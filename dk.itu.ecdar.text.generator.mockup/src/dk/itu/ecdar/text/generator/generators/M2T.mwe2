module dk.itu.ecdar.text.generator.generators.M2T

Workflow {

	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri = "../"
		registerGeneratedEPackage = "dk.itu.ecdar.text.ecdarText.EcdarTextPackage"
		registerEcoreFile = "platform:/resource/dk.itu.ecdar.text/src-gen/dk/itu/ecdar/text/EcdarText.ecore"
	}

	
	component = org.eclipse.xtext.mwe.Reader {
		path = "input/"
		register = dk.itu.ecdar.text.EcdarTextStandaloneSetup { }
					
		load = {
			slot = "etfile"
			type = "ETFile"
			firstOnly = true
		}
	}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "../dk.itu.ecdar.text.generator.mockup/model-gen/"
	}

	component = org.eclipse.xpand2.Generator {
		
		metaModel = org.eclipse.xtend.typesystem.emf.EmfMetaModel { 
			metaModelPackage = "dk.itu.ecdar.text.ecdarText.EcdarTextPackage"
			metaModelFile = "platform:/resource/dk.itu.ecdar.text/src-gen/dk/itu/ecdar/text/EcdarText.ecore"
		}
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {}
		//expand = "dk::itu::ecdar::text::generator::templates::DoNothing::main FOREACH etfile"
		expand = "dk::itu::ecdar::text::generator::templates::DoNothing::main FOR etfile"

		outlet = { path = "model-gen/" }
	}

	component = org.eclipse.emf.mwe.utils.Writer {
		modelSlot = "etfile"
		// file extension is important here. 
		// ".ttripLoose" (so the declared xtext syntax extension) saves in textual syntax
		// ".xmi" or ".ecore" saves in xmi syntax.
		uri = "platform:/resource/dk.itu.ecdar.text.generator.mockup/model-gen/output.xmi"
	}
}