«IMPORT ecdarText»
«DEFINE main FOR ecdarText::ETSpecificationDefinition»
«REM»
   «DEFINE main FOR ecdarText::ETSpecificationDefinition»
«ENDREM»
«FILE this.name + ".java"»
import dk.itu.ecdar.text.generator.framework.IInputEdge;
import dk.itu.ecdar.text.generator.framework.IOutputEdge;
import dk.itu.ecdar.text.generator.framework.ILocation;
import dk.itu.ecdar.text.generator.framework.ITIOA;

public class «this.name» extends ITIOA {

«REM»
   Iterate over this specifications locations edges
«ENDREM»
«REM»First we add the initial location to the list of locations«ENDREM»
//«body.locations.add(this.body.initialLocation)»

/* Generating all edges - NOTE: Edges with IO type "!" is OutputEdge, "?" is InputEdge	 */
«FOREACH body.locations.edges AS edge ITERATOR iter»
   	/*	Number: «iter.counter1»
 		Name: «edge.toString()» of edge
 		Controllable: «edge.controllable»
 		Edge IO Type: «edge.io.type»	*/ 
 		
   	«IF edge.io.type.toString() == "?"»
   	class «"Edge" + iter.counter1» extends IInputEdge {
   	«ELSEIF edge.io.type.toString() == "!"»
   	class «"Edge" + iter.counter1» extends IOutputEdge {
   	«ENDIF»    	 
		public «"Edge" + iter.counter1»() {
			//Target: «edge.target.name»
			«FOREACH edge.io.eContents.typeSelect(ecdarText::ETReference).target.eContainer.eContents.typeSelect(ETVariableID).toList() AS var ITERATOR iterVars-»
			«IF iterVars.firstIteration-»
				super(«edge.target.name», "«var.name»");
			«ELSE-»
				//super(«edge.target.name», "«var.name»");
			«ENDIF-»					
			«ENDFOREACH-»
		}

		@Override
		public boolean checkGuard(long time) {
			«IF (edge.guard.metaType == null)»
			return to.checkInvariant(time);
			«ELSEIF (edge.guard.metaType != null)»
			«LET edge.guard.metaType AS metaType»
			«LET edge.guard.eContents.typeSelect(ETNumberLiteral).value.get(0) AS value»
					«IF metaType == ecdarText::ETLessEqualExpression»return to.checkInvariant(time) && time <=«value»;
					«ELSEIF metaType == ecdarText::ETLessExpression»return to.checkInvariant(time) && time <«value»;
					«ELSEIF metaType == ecdarText::ETGreaterEqualExpression»return to.checkInvariant(time) && time >=«value»;
					«ELSEIF metaType == ecdarText::ETGreaterExpression»return to.checkInvariant(time) && time >«value»;
					«ENDIF»
			«ENDLET»
			«ENDLET»
			«ENDIF»
		}

		@Override
		public void onTraverse() {
			resetTime();
		}
	} 
«ENDFOREACH»

«REM»
   initial location Name: «this.body.initialLocation.name»
«ENDREM»

/* Generating all locations */
«FOREACH body.locations.reverse() AS location ITERATOR iter»
   	/* 	Number: «iter.counter1» 
   		Name: «location.name.toString()»
   		Name: «location.metaType» */
   		
	class «location.name.toFirstUpper()» extends ILocation {
		public «location.name.toFirstUpper()»(«this.name.toFirstUpper()» parent) {
			super("«location.name.toFirstUpper()»", parent);
		}

		@Override
		public void setupEdges() {
			outputEdges = new IOutputEdge[]{
				«LET location.edges.select(e|e.io.type.toString() == "!") AS edgesMatch-»
				«FOREACH edgesMatch AS edge ITERATOR iteratingEdges-»
						«REM»We have the uncontrollable edges here«ENDREM»
							«FOREACH body.locations.edges AS edgeToMatch ITERATOR edgeAllIterate-»
							«IF edge.toString() == edgeToMatch.toString()-»
								//Matching: «edgeToMatch.toString()» = «edge.toString()»
								new «"Edge" + edgeAllIterate.counter1»()«IF (!iteratingEdges.lastIteration)-»,«ENDIF-»
							«ENDIF-»
							«ENDFOREACH-»				
				«ENDFOREACH-»
				«ENDLET-»
			};
			
			inputEdges = new IInputEdge[]{
				«REM»new A_GRANT_B()«ENDREM»
				«LET location.edges.select(e|e.io.type.toString() == "?") AS edgesMatch-»
				«FOREACH edgesMatch AS edge ITERATOR iteratingEdges-»
						«REM»We have the controllable edges here«ENDREM»
						«FOREACH body.locations.edges AS edgeToMatch ITERATOR edgeIter-»
							«IF edge.toString() == edgeToMatch.toString()-»
								//Matching: «edgeToMatch.toString()-» = «edge.toString()»
								new «"Edge" + edgeIter.counter1»()«IF (!iteratingEdges.lastIteration)-»,«ENDIF-»
							«ENDIF-»
						«ENDFOREACH-»				
				«ENDFOREACH-»
				«ENDLET-»
			};
		}

		@Override
		public boolean checkInvariant(long time) {
			«IF (!location.invariants.isEmpty)-»
			//IS NOT EMPTY
				«LET location.invariants.eContents.typeSelect(ETNumberLiteral).value.get(0) AS value-»
				«LET location.invariants.get(0).metaType AS metaType-»
					«IF metaType == ecdarText::ETLessEqualExpression»return time<=«value»;
					«ELSEIF metaType == ecdarText::ETLessExpression»return time<«value»;
					«ELSEIF metaType == ecdarText::ETGreaterEqualExpression»return time>=«value»;
					«ELSEIF metaType == ecdarText::ETGreaterExpression»return time>«value»;
					«ENDIF»
				«ENDLET-»
				«ENDLET-»
			«ELSE»
			//IS EMPTY
			return true;
			«ENDIF-»			
		}
		
		@Override
		public boolean isPreemptive() {
			return false;
		}

		@Override
		public void task() {
			Controller.«this.name»«location.name.toFirstUpper()»();
		}	
	}
«ENDFOREACH»
	«REM»Instantiate«ENDREM»
	ILocation «FOREACH body.locations.withoutLast() AS location ITERATOR iter»«location.name.toString()», «ENDFOREACH»«body.locations.last().name.toString()»;
	
	public «this.name»() {
		super();
		«FOREACH body.locations.reverse() AS location ITERATOR iter»
		«location.name.toString()» = new «location.name.toString()»(this);
		«location.name.toString()».setupEdges();
		«ENDFOREACH»
		current = «body.locations.last().name.toString()»;
	}
}
«ENDFILE»
«ENDDEFINE»
