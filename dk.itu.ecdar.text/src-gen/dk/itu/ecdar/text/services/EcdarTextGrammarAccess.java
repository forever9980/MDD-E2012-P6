/*
* generated by Xtext
*/

package dk.itu.ecdar.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EcdarTextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ETFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsETImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsETDeclarationsParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cSpecificationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecificationsETSpecificationParserRuleCall_3_0 = (RuleCall)cSpecificationsAssignment_3.eContents().get(0);
		
		//// TODO: assertions+=Assertion*
		//ETFile: // NOTE: instantiation important serialization of empty files
		//	{ETFile} imports+=ETImport* // NOTE: instantiated, but optional
		//	declarations=ETDeclarations specifications+=ETSpecification*;
		public ParserRule getRule() { return rule; }

		//// NOTE: instantiation important serialization of empty files
		//{ETFile} imports+=ETImport* // NOTE: instantiated, but optional
		//declarations=ETDeclarations specifications+=ETSpecification*
		public Group getGroup() { return cGroup; }

		//// NOTE: instantiation important serialization of empty files
		//{ETFile}
		public Action getETFileAction_0() { return cETFileAction_0; }

		//imports+=ETImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ETImport
		public RuleCall getImportsETImportParserRuleCall_1_0() { return cImportsETImportParserRuleCall_1_0; }

		//// NOTE: instantiated, but optional
		//declarations=ETDeclarations
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//ETDeclarations
		public RuleCall getDeclarationsETDeclarationsParserRuleCall_2_0() { return cDeclarationsETDeclarationsParserRuleCall_2_0; }

		//specifications+=ETSpecification*
		public Assignment getSpecificationsAssignment_3() { return cSpecificationsAssignment_3; }

		//ETSpecification
		public RuleCall getSpecificationsETSpecificationParserRuleCall_3_0() { return cSpecificationsETSpecificationParserRuleCall_3_0; }
	}

	public class ETImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceIDTerminalRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ETImport:
		//	"import" importedNamespace=ID;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ID
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ID
		public RuleCall getImportedNamespaceIDTerminalRuleCall_1_0() { return cImportedNamespaceIDTerminalRuleCall_1_0; }
	}

	public class ETArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeETExpressionParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * Modified UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Declarations.shtml)
		// *
		// * - removed channels
		// * - added actions
		// * / ETArrayDeclaration:
		//	"[" size=ETExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" size=ETExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//size=ETExpression
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//ETExpression
		public RuleCall getSizeETExpressionParserRuleCall_1_0() { return cSizeETExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ETDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclarationsETDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeclarationsETDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cDeclarationsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ETDeclarations:
		//	{ETDeclarations} (declarations+=ETDeclaration (";" declarations+=ETDeclaration)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//{ETDeclarations} (declarations+=ETDeclaration (";" declarations+=ETDeclaration)* ";"?)?
		public Group getGroup() { return cGroup; }

		//{ETDeclarations}
		public Action getETDeclarationsAction_0() { return cETDeclarationsAction_0; }

		//(declarations+=ETDeclaration (";" declarations+=ETDeclaration)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//declarations+=ETDeclaration
		public Assignment getDeclarationsAssignment_1_0() { return cDeclarationsAssignment_1_0; }

		//ETDeclaration
		public RuleCall getDeclarationsETDeclarationParserRuleCall_1_0_0() { return cDeclarationsETDeclarationParserRuleCall_1_0_0; }

		//(";" declarations+=ETDeclaration)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//declarations+=ETDeclaration
		public Assignment getDeclarationsAssignment_1_1_1() { return cDeclarationsAssignment_1_1_1; }

		//ETDeclaration
		public RuleCall getDeclarationsETDeclarationParserRuleCall_1_1_1_0() { return cDeclarationsETDeclarationParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ETDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ETDeclaration:
		//	ETVariableDeclaration | ETTypeDeclaration;
		public ParserRule getRule() { return rule; }

		//ETVariableDeclaration | ETTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETVariableDeclaration
		public RuleCall getETVariableDeclarationParserRuleCall_0() { return cETVariableDeclarationParserRuleCall_0; }

		//ETTypeDeclaration
		public RuleCall getETTypeDeclarationParserRuleCall_1() { return cETTypeDeclarationParserRuleCall_1; }
	}

	public class ETTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersETTypeModifiersParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierETTypeIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ETType:
		//	modifiers=ETTypeModifiers identifier=ETTypeIdentifier;
		public ParserRule getRule() { return rule; }

		//modifiers=ETTypeModifiers identifier=ETTypeIdentifier
		public Group getGroup() { return cGroup; }

		//modifiers=ETTypeModifiers
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//ETTypeModifiers
		public RuleCall getModifiersETTypeModifiersParserRuleCall_0_0() { return cModifiersETTypeModifiersParserRuleCall_0_0; }

		//identifier=ETTypeIdentifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ETTypeIdentifier
		public RuleCall getIdentifierETTypeIdentifierParserRuleCall_1_0() { return cIdentifierETTypeIdentifierParserRuleCall_1_0; }
	}

	public class ETTypeModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETTypeModifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETTypeModifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cUrgentAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_1_0_0 = (Keyword)cUrgentAssignment_1_0.eContents().get(0);
		private final Assignment cMetaAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cMetaMetaKeyword_1_1_0 = (Keyword)cMetaAssignment_1_1.eContents().get(0);
		private final Assignment cConstAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cConstConstKeyword_1_2_0 = (Keyword)cConstAssignment_1_2.eContents().get(0);
		
		//ETTypeModifiers:
		//	{ETTypeModifiers} (urgent?="urgent"? & meta?="meta"? & const?="const"?);
		public ParserRule getRule() { return rule; }

		//{ETTypeModifiers} (urgent?="urgent"? & meta?="meta"? & const?="const"?)
		public Group getGroup() { return cGroup; }

		//{ETTypeModifiers}
		public Action getETTypeModifiersAction_0() { return cETTypeModifiersAction_0; }

		//urgent?="urgent"? & meta?="meta"? & const?="const"?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//urgent?="urgent"?
		public Assignment getUrgentAssignment_1_0() { return cUrgentAssignment_1_0; }

		//"urgent"
		public Keyword getUrgentUrgentKeyword_1_0_0() { return cUrgentUrgentKeyword_1_0_0; }

		//meta?="meta"?
		public Assignment getMetaAssignment_1_1() { return cMetaAssignment_1_1; }

		//"meta"
		public Keyword getMetaMetaKeyword_1_1_0() { return cMetaMetaKeyword_1_1_0; }

		//const?="const"?
		public Assignment getConstAssignment_1_2() { return cConstAssignment_1_2; }

		//"const"
		public Keyword getConstConstKeyword_1_2_0() { return cConstConstKeyword_1_2_0; }
	}

	public class ETVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeETTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesETVariableIDParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesETVariableIDParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//ETVariableDeclaration:
		//	type=ETType variables+=ETVariableID ("," variables+=ETVariableID)*;
		public ParserRule getRule() { return rule; }

		//type=ETType variables+=ETVariableID ("," variables+=ETVariableID)*
		public Group getGroup() { return cGroup; }

		//type=ETType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ETType
		public RuleCall getTypeETTypeParserRuleCall_0_0() { return cTypeETTypeParserRuleCall_0_0; }

		//variables+=ETVariableID
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//ETVariableID
		public RuleCall getVariablesETVariableIDParserRuleCall_1_0() { return cVariablesETVariableIDParserRuleCall_1_0; }

		//("," variables+=ETVariableID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=ETVariableID
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//ETVariableID
		public RuleCall getVariablesETVariableIDParserRuleCall_2_1_0() { return cVariablesETVariableIDParserRuleCall_2_1_0; }
	}

	public class ETVariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETVariableID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cIoTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cIoTypeAlternatives_1_0 = (Alternatives)cIoTypeAssignment_1.eContents().get(0);
		private final Keyword cIoTypeExclamationMarkKeyword_1_0_0 = (Keyword)cIoTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cIoTypeQuestionMarkKeyword_1_0_1 = (Keyword)cIoTypeAlternatives_1_0.eContents().get(1);
		private final Assignment cDimensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensionsETArrayDeclarationParserRuleCall_2_0 = (RuleCall)cDimensionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialiserAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialiserETInitialiserParserRuleCall_3_1_0 = (RuleCall)cInitialiserAssignment_3_1.eContents().get(0);
		
		//ETVariableID:
		//	name=ID // NOTE: workaround for in-/outputs, ignored
		//	ioType=("!" | "?")? dimensions+=ETArrayDeclaration* ("=" initialiser=ETInitialiser)?;
		public ParserRule getRule() { return rule; }

		//name=ID // NOTE: workaround for in-/outputs, ignored
		//ioType=("!" | "?")? dimensions+=ETArrayDeclaration* ("=" initialiser=ETInitialiser)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//ioType=("!" | "?")?
		public Assignment getIoTypeAssignment_1() { return cIoTypeAssignment_1; }

		//"!" | "?"
		public Alternatives getIoTypeAlternatives_1_0() { return cIoTypeAlternatives_1_0; }

		//"!"
		public Keyword getIoTypeExclamationMarkKeyword_1_0_0() { return cIoTypeExclamationMarkKeyword_1_0_0; }

		//"?"
		public Keyword getIoTypeQuestionMarkKeyword_1_0_1() { return cIoTypeQuestionMarkKeyword_1_0_1; }

		//dimensions+=ETArrayDeclaration*
		public Assignment getDimensionsAssignment_2() { return cDimensionsAssignment_2; }

		//ETArrayDeclaration
		public RuleCall getDimensionsETArrayDeclarationParserRuleCall_2_0() { return cDimensionsETArrayDeclarationParserRuleCall_2_0; }

		//("=" initialiser=ETInitialiser)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initialiser=ETInitialiser
		public Assignment getInitialiserAssignment_3_1() { return cInitialiserAssignment_3_1; }

		//ETInitialiser
		public RuleCall getInitialiserETInitialiserParserRuleCall_3_1_0() { return cInitialiserETInitialiserParserRuleCall_3_1_0; }
	}

	public class ETInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETInitialiser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETSingleInitialiserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETMultiInitialiserParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ETInitialiser:
		//	ETSingleInitialiser | ETMultiInitialiser;
		public ParserRule getRule() { return rule; }

		//ETSingleInitialiser | ETMultiInitialiser
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETSingleInitialiser
		public RuleCall getETSingleInitialiserParserRuleCall_0() { return cETSingleInitialiserParserRuleCall_0; }

		//ETMultiInitialiser
		public RuleCall getETMultiInitialiserParserRuleCall_1() { return cETMultiInitialiserParserRuleCall_1; }
	}

	public class ETSingleInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSingleInitialiser");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionETExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ETSingleInitialiser:
		//	expression=ETExpression;
		public ParserRule getRule() { return rule; }

		//expression=ETExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//ETExpression
		public RuleCall getExpressionETExpressionParserRuleCall_0() { return cExpressionETExpressionParserRuleCall_0; }
	}

	public class ETMultiInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETMultiInitialiser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialisersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialisersETInitialiserParserRuleCall_1_0 = (RuleCall)cInitialisersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialisersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialisersETInitialiserParserRuleCall_2_1_0 = (RuleCall)cInitialisersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ETMultiInitialiser:
		//	"{" initialisers+=ETInitialiser ("," initialisers+=ETInitialiser)* "}";
		public ParserRule getRule() { return rule; }

		//"{" initialisers+=ETInitialiser ("," initialisers+=ETInitialiser)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//initialisers+=ETInitialiser
		public Assignment getInitialisersAssignment_1() { return cInitialisersAssignment_1; }

		//ETInitialiser
		public RuleCall getInitialisersETInitialiserParserRuleCall_1_0() { return cInitialisersETInitialiserParserRuleCall_1_0; }

		//("," initialisers+=ETInitialiser)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//initialisers+=ETInitialiser
		public Assignment getInitialisersAssignment_2_1() { return cInitialisersAssignment_2_1; }

		//ETInitialiser
		public RuleCall getInitialisersETInitialiserParserRuleCall_2_1_0() { return cInitialisersETInitialiserParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ETTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseTypeETTypeParserRuleCall_1_0 = (RuleCall)cBaseTypeAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesETTypeIDParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesETTypeIDParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		
		//ETTypeDeclaration:
		//	"typedef" baseType=ETType types+=ETTypeID ("," types+=ETTypeID)*;
		public ParserRule getRule() { return rule; }

		//"typedef" baseType=ETType types+=ETTypeID ("," types+=ETTypeID)*
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//baseType=ETType
		public Assignment getBaseTypeAssignment_1() { return cBaseTypeAssignment_1; }

		//ETType
		public RuleCall getBaseTypeETTypeParserRuleCall_1_0() { return cBaseTypeETTypeParserRuleCall_1_0; }

		//types+=ETTypeID
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//ETTypeID
		public RuleCall getTypesETTypeIDParserRuleCall_2_0() { return cTypesETTypeIDParserRuleCall_2_0; }

		//("," types+=ETTypeID)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=ETTypeID
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//ETTypeID
		public RuleCall getTypesETTypeIDParserRuleCall_3_1_0() { return cTypesETTypeIDParserRuleCall_3_1_0; }
	}

	public class ETTypeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETTypeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionsETArrayDeclarationParserRuleCall_1_0 = (RuleCall)cDimensionsAssignment_1.eContents().get(0);
		
		//ETTypeID:
		//	name=ID dimensions+=ETArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//name=ID dimensions+=ETArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//dimensions+=ETArrayDeclaration*
		public Assignment getDimensionsAssignment_1() { return cDimensionsAssignment_1; }

		//ETArrayDeclaration
		public RuleCall getDimensionsETArrayDeclarationParserRuleCall_1_0() { return cDimensionsETArrayDeclarationParserRuleCall_1_0; }
	}

	public class ETTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETClockTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cETActionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cETBooleanTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cETScalarTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cETStructTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cETTypeReferenceAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cTargetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cTargetETTypeIDCrossReference_6_1_0 = (CrossReference)cTargetAssignment_6_1.eContents().get(0);
		private final RuleCall cTargetETTypeIDIDTerminalRuleCall_6_1_0_1 = (RuleCall)cTargetETTypeIDCrossReference_6_1_0.eContents().get(1);
		
		//ETTypeIdentifier:
		//	ETIntegerType | ETClockType | ETActionType | ETBooleanType | ETScalarType | ETStructType | {ETTypeReference}
		//	target=[ETTypeID];
		public ParserRule getRule() { return rule; }

		//ETIntegerType | ETClockType | ETActionType | ETBooleanType | ETScalarType | ETStructType | {ETTypeReference}
		//target=[ETTypeID]
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETIntegerType
		public RuleCall getETIntegerTypeParserRuleCall_0() { return cETIntegerTypeParserRuleCall_0; }

		//ETClockType
		public RuleCall getETClockTypeParserRuleCall_1() { return cETClockTypeParserRuleCall_1; }

		//ETActionType
		public RuleCall getETActionTypeParserRuleCall_2() { return cETActionTypeParserRuleCall_2; }

		//ETBooleanType
		public RuleCall getETBooleanTypeParserRuleCall_3() { return cETBooleanTypeParserRuleCall_3; }

		//ETScalarType
		public RuleCall getETScalarTypeParserRuleCall_4() { return cETScalarTypeParserRuleCall_4; }

		//ETStructType
		public RuleCall getETStructTypeParserRuleCall_5() { return cETStructTypeParserRuleCall_5; }

		//{ETTypeReference} target=[ETTypeID]
		public Group getGroup_6() { return cGroup_6; }

		//{ETTypeReference}
		public Action getETTypeReferenceAction_6_0() { return cETTypeReferenceAction_6_0; }

		//target=[ETTypeID]
		public Assignment getTargetAssignment_6_1() { return cTargetAssignment_6_1; }

		//[ETTypeID]
		public CrossReference getTargetETTypeIDCrossReference_6_1_0() { return cTargetETTypeIDCrossReference_6_1_0; }

		//ID
		public RuleCall getTargetETTypeIDIDTerminalRuleCall_6_1_0_1() { return cTargetETTypeIDIDTerminalRuleCall_6_1_0_1; }
	}

	public class ETIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinETExpressionParserRuleCall_2_1_0 = (RuleCall)cMinAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMaxAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMaxETExpressionParserRuleCall_2_3_0 = (RuleCall)cMaxAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//ETIntegerType:
		//	{ETIntegerType} "int" ("[" min=ETExpression "," max=ETExpression "]")?;
		public ParserRule getRule() { return rule; }

		//{ETIntegerType} "int" ("[" min=ETExpression "," max=ETExpression "]")?
		public Group getGroup() { return cGroup; }

		//{ETIntegerType}
		public Action getETIntegerTypeAction_0() { return cETIntegerTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//("[" min=ETExpression "," max=ETExpression "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//min=ETExpression
		public Assignment getMinAssignment_2_1() { return cMinAssignment_2_1; }

		//ETExpression
		public RuleCall getMinETExpressionParserRuleCall_2_1_0() { return cMinETExpressionParserRuleCall_2_1_0; }

		//","
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//max=ETExpression
		public Assignment getMaxAssignment_2_3() { return cMaxAssignment_2_3; }

		//ETExpression
		public RuleCall getMaxETExpressionParserRuleCall_2_3_0() { return cMaxETExpressionParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class ETClockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETClockType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETClockTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ETClockType:
		//	{ETClockType} "clock";
		public ParserRule getRule() { return rule; }

		//{ETClockType} "clock"
		public Group getGroup() { return cGroup; }

		//{ETClockType}
		public Action getETClockTypeAction_0() { return cETClockTypeAction_0; }

		//"clock"
		public Keyword getClockKeyword_1() { return cClockKeyword_1; }
	}

	public class ETActionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETActionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETInputTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETOutputTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cETActionTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cActionKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ETActionType:
		//	ETInputType | ETOutputType | {ETActionType} "action";
		public ParserRule getRule() { return rule; }

		//ETInputType | ETOutputType | {ETActionType} "action"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETInputType
		public RuleCall getETInputTypeParserRuleCall_0() { return cETInputTypeParserRuleCall_0; }

		//ETOutputType
		public RuleCall getETOutputTypeParserRuleCall_1() { return cETOutputTypeParserRuleCall_1; }

		//{ETActionType} "action"
		public Group getGroup_2() { return cGroup_2; }

		//{ETActionType}
		public Action getETActionTypeAction_2_0() { return cETActionTypeAction_2_0; }

		//"action"
		public Keyword getActionKeyword_2_1() { return cActionKeyword_2_1; }
	}

	public class ETInputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETInputType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETInputTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ETInputType:
		//	{ETInputType} "input";
		public ParserRule getRule() { return rule; }

		//{ETInputType} "input"
		public Group getGroup() { return cGroup; }

		//{ETInputType}
		public Action getETInputTypeAction_0() { return cETInputTypeAction_0; }

		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
	}

	public class ETOutputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETOutputType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETOutputTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ETOutputType:
		//	{ETOutputType} "output";
		public ParserRule getRule() { return rule; }

		//{ETOutputType} "output"
		public Group getGroup() { return cGroup; }

		//{ETOutputType}
		public Action getETOutputTypeAction_0() { return cETOutputTypeAction_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
	}

	public class ETBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ETBooleanType:
		//	{ETBooleanType} "bool";
		public ParserRule getRule() { return rule; }

		//{ETBooleanType} "bool"
		public Group getGroup() { return cGroup; }

		//{ETBooleanType}
		public Action getETBooleanTypeAction_0() { return cETBooleanTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class ETScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETScalarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETScalarTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScalarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeETExpressionParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ETScalarType:
		//	{ETScalarType} "scalar" "[" size=ETExpression "]";
		public ParserRule getRule() { return rule; }

		//{ETScalarType} "scalar" "[" size=ETExpression "]"
		public Group getGroup() { return cGroup; }

		//{ETScalarType}
		public Action getETScalarTypeAction_0() { return cETScalarTypeAction_0; }

		//"scalar"
		public Keyword getScalarKeyword_1() { return cScalarKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//size=ETExpression
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }

		//ETExpression
		public RuleCall getSizeETExpressionParserRuleCall_3_0() { return cSizeETExpressionParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ETStructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETStructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsETFieldDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclarationsETFieldDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ETStructType:
		//	{ETStructType} "struct" "{" declarations+=ETFieldDeclaration (";" declarations+=ETFieldDeclaration)* ";"? "}";
		public ParserRule getRule() { return rule; }

		//{ETStructType} "struct" "{" declarations+=ETFieldDeclaration (";" declarations+=ETFieldDeclaration)* ";"? "}"
		public Group getGroup() { return cGroup; }

		//{ETStructType}
		public Action getETStructTypeAction_0() { return cETStructTypeAction_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//declarations+=ETFieldDeclaration
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//ETFieldDeclaration
		public RuleCall getDeclarationsETFieldDeclarationParserRuleCall_3_0() { return cDeclarationsETFieldDeclarationParserRuleCall_3_0; }

		//(";" declarations+=ETFieldDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//declarations+=ETFieldDeclaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }

		//ETFieldDeclaration
		public RuleCall getDeclarationsETFieldDeclarationParserRuleCall_4_1_0() { return cDeclarationsETFieldDeclarationParserRuleCall_4_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ETFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeETTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsETFieldIDParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsETFieldIDParserRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		
		//ETFieldDeclaration:
		//	type=ETType fields+=ETFieldID ("," fields+=ETFieldID)*;
		public ParserRule getRule() { return rule; }

		//type=ETType fields+=ETFieldID ("," fields+=ETFieldID)*
		public Group getGroup() { return cGroup; }

		//type=ETType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ETType
		public RuleCall getTypeETTypeParserRuleCall_0_0() { return cTypeETTypeParserRuleCall_0_0; }

		//fields+=ETFieldID
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }

		//ETFieldID
		public RuleCall getFieldsETFieldIDParserRuleCall_1_0() { return cFieldsETFieldIDParserRuleCall_1_0; }

		//("," fields+=ETFieldID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fields+=ETFieldID
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }

		//ETFieldID
		public RuleCall getFieldsETFieldIDParserRuleCall_2_1_0() { return cFieldsETFieldIDParserRuleCall_2_1_0; }
	}

	public class ETFieldIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETFieldID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionsETArrayDeclarationParserRuleCall_1_0 = (RuleCall)cDimensionsAssignment_1.eContents().get(0);
		
		//ETFieldID:
		//	name=ID dimensions+=ETArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//name=ID dimensions+=ETArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//dimensions+=ETArrayDeclaration*
		public Assignment getDimensionsAssignment_1() { return cDimensionsAssignment_1; }

		//ETArrayDeclaration
		public RuleCall getDimensionsETArrayDeclarationParserRuleCall_1_0() { return cDimensionsETArrayDeclarationParserRuleCall_1_0; }
	}

	public class ETSpecificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETSpecificationDisjunctionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cETSpecificationDisjunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightETSpecificationDisjunctionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////// Specification expression
		//// left
		//ETSpecificationExpression:
		//	ETSpecificationDisjunctionExpression ({ETSpecificationDisjunctionExpression.left=current} "||"
		//	right=ETSpecificationDisjunctionExpression)*;
		public ParserRule getRule() { return rule; }

		//ETSpecificationDisjunctionExpression ({ETSpecificationDisjunctionExpression.left=current} "||"
		//right=ETSpecificationDisjunctionExpression)*
		public Group getGroup() { return cGroup; }

		//ETSpecificationDisjunctionExpression
		public RuleCall getETSpecificationDisjunctionExpressionParserRuleCall_0() { return cETSpecificationDisjunctionExpressionParserRuleCall_0; }

		//({ETSpecificationDisjunctionExpression.left=current} "||" right=ETSpecificationDisjunctionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETSpecificationDisjunctionExpression.left=current}
		public Action getETSpecificationDisjunctionExpressionLeftAction_1_0() { return cETSpecificationDisjunctionExpressionLeftAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//right=ETSpecificationDisjunctionExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ETSpecificationDisjunctionExpression
		public RuleCall getRightETSpecificationDisjunctionExpressionParserRuleCall_1_2_0() { return cRightETSpecificationDisjunctionExpressionParserRuleCall_1_2_0; }
	}

	public class ETSpecificationDisjunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationDisjunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETSpecificationCompositionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cETSpecificationConjunctionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightETSpecificationCompositionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// left
		//ETSpecificationDisjunctionExpression returns ETSpecificationExpression:
		//	ETSpecificationCompositionExpression ({ETSpecificationConjunctionExpression.left=current} "&&"
		//	right=ETSpecificationCompositionExpression)*;
		public ParserRule getRule() { return rule; }

		//ETSpecificationCompositionExpression ({ETSpecificationConjunctionExpression.left=current} "&&"
		//right=ETSpecificationCompositionExpression)*
		public Group getGroup() { return cGroup; }

		//ETSpecificationCompositionExpression
		public RuleCall getETSpecificationCompositionExpressionParserRuleCall_0() { return cETSpecificationCompositionExpressionParserRuleCall_0; }

		//({ETSpecificationConjunctionExpression.left=current} "&&" right=ETSpecificationCompositionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETSpecificationConjunctionExpression.left=current}
		public Action getETSpecificationConjunctionExpressionLeftAction_1_0() { return cETSpecificationConjunctionExpressionLeftAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//right=ETSpecificationCompositionExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ETSpecificationCompositionExpression
		public RuleCall getRightETSpecificationCompositionExpressionParserRuleCall_1_2_0() { return cRightETSpecificationCompositionExpressionParserRuleCall_1_2_0; }
	}

	public class ETSpecificationCompositionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationCompositionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETPrimarySpecificationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cETSpecificationCompositionExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightETPrimarySpecificationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// left
		//ETSpecificationCompositionExpression returns ETSpecificationExpression:
		//	ETPrimarySpecificationExpression ({ETSpecificationCompositionExpression.left=current} "|"
		//	right=ETPrimarySpecificationExpression)*;
		public ParserRule getRule() { return rule; }

		//ETPrimarySpecificationExpression ({ETSpecificationCompositionExpression.left=current} "|"
		//right=ETPrimarySpecificationExpression)*
		public Group getGroup() { return cGroup; }

		//ETPrimarySpecificationExpression
		public RuleCall getETPrimarySpecificationExpressionParserRuleCall_0() { return cETPrimarySpecificationExpressionParserRuleCall_0; }

		//({ETSpecificationCompositionExpression.left=current} "|" right=ETPrimarySpecificationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETSpecificationCompositionExpression.left=current}
		public Action getETSpecificationCompositionExpressionLeftAction_1_0() { return cETSpecificationCompositionExpressionLeftAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//right=ETPrimarySpecificationExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ETPrimarySpecificationExpression
		public RuleCall getRightETPrimarySpecificationExpressionParserRuleCall_1_2_0() { return cRightETPrimarySpecificationExpressionParserRuleCall_1_2_0; }
	}

	public class ETPrimarySpecificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETPrimarySpecificationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETSpecificationReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETSpecificationInstantiationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cETSpecificationExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ETPrimarySpecificationExpression returns ETSpecificationExpression:
		//	ETSpecificationReference | ETSpecificationInstantiation | "(" ETSpecificationExpression ")";
		public ParserRule getRule() { return rule; }

		//ETSpecificationReference | ETSpecificationInstantiation | "(" ETSpecificationExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETSpecificationReference
		public RuleCall getETSpecificationReferenceParserRuleCall_0() { return cETSpecificationReferenceParserRuleCall_0; }

		//ETSpecificationInstantiation
		public RuleCall getETSpecificationInstantiationParserRuleCall_1() { return cETSpecificationInstantiationParserRuleCall_1; }

		//"(" ETSpecificationExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ETSpecificationExpression
		public RuleCall getETSpecificationExpressionParserRuleCall_2_1() { return cETSpecificationExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ETSpecificationReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETSpecificationReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSpecificationETSpecificationCrossReference_1_0 = (CrossReference)cSpecificationAssignment_1.eContents().get(0);
		private final RuleCall cSpecificationETSpecificationIDTerminalRuleCall_1_0_1 = (RuleCall)cSpecificationETSpecificationCrossReference_1_0.eContents().get(1);
		
		//ETSpecificationReference returns ETSpecificationExpression:
		//	{ETSpecificationReference} specification=[ETSpecification];
		public ParserRule getRule() { return rule; }

		//{ETSpecificationReference} specification=[ETSpecification]
		public Group getGroup() { return cGroup; }

		//{ETSpecificationReference}
		public Action getETSpecificationReferenceAction_0() { return cETSpecificationReferenceAction_0; }

		//specification=[ETSpecification]
		public Assignment getSpecificationAssignment_1() { return cSpecificationAssignment_1; }

		//[ETSpecification]
		public CrossReference getSpecificationETSpecificationCrossReference_1_0() { return cSpecificationETSpecificationCrossReference_1_0; }

		//ID
		public RuleCall getSpecificationETSpecificationIDTerminalRuleCall_1_0_1() { return cSpecificationETSpecificationIDTerminalRuleCall_1_0_1; }
	}

	public class ETSpecificationInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETSpecificationInstantiationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTemplateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTemplateETSpecificationTemplateCrossReference_1_0 = (CrossReference)cTemplateAssignment_1.eContents().get(0);
		private final RuleCall cTemplateETSpecificationTemplateIDTerminalRuleCall_1_0_1 = (RuleCall)cTemplateETSpecificationTemplateCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsETExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsETExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ETSpecificationInstantiation returns ETSpecificationExpression:
		//	{ETSpecificationInstantiation} template=[ETSpecificationTemplate] "(" (arguments+=ETExpression (","
		//	arguments+=ETExpression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ETSpecificationInstantiation} template=[ETSpecificationTemplate] "(" (arguments+=ETExpression (","
		//arguments+=ETExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ETSpecificationInstantiation}
		public Action getETSpecificationInstantiationAction_0() { return cETSpecificationInstantiationAction_0; }

		//template=[ETSpecificationTemplate]
		public Assignment getTemplateAssignment_1() { return cTemplateAssignment_1; }

		//[ETSpecificationTemplate]
		public CrossReference getTemplateETSpecificationTemplateCrossReference_1_0() { return cTemplateETSpecificationTemplateCrossReference_1_0; }

		//ID
		public RuleCall getTemplateETSpecificationTemplateIDTerminalRuleCall_1_0_1() { return cTemplateETSpecificationTemplateIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=ETExpression ("," arguments+=ETExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=ETExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//ETExpression
		public RuleCall getArgumentsETExpressionParserRuleCall_3_0_0() { return cArgumentsETExpressionParserRuleCall_3_0_0; }

		//("," arguments+=ETExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=ETExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//ETExpression
		public RuleCall getArgumentsETExpressionParserRuleCall_3_1_1_0() { return cArgumentsETExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ETSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETSpecificationBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETSpecificationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////// Specification
		//ETSpecification:
		//	ETSpecificationBinding | ETSpecificationDefinition;
		public ParserRule getRule() { return rule; }

		//ETSpecificationBinding | ETSpecificationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETSpecificationBinding
		public RuleCall getETSpecificationBindingParserRuleCall_0() { return cETSpecificationBindingParserRuleCall_0; }

		//ETSpecificationDefinition
		public RuleCall getETSpecificationDefinitionParserRuleCall_1() { return cETSpecificationDefinitionParserRuleCall_1; }
	}

	public class ETSpecificationBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionETSpecificationExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//ETSpecificationBinding:
		//	"let" name=ID "=" expression=ETSpecificationExpression;
		public ParserRule getRule() { return rule; }

		//"let" name=ID "=" expression=ETSpecificationExpression
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=ETSpecificationExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//ETSpecificationExpression
		public RuleCall getExpressionETSpecificationExpressionParserRuleCall_3_0() { return cExpressionETSpecificationExpressionParserRuleCall_3_0; }
	}

	public class ETSpecificationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETSpecificationTemplateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cETSpecificationDefinitionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSpecKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Assignment cBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBodyETSpecificationBodyParserRuleCall_1_3_0 = (RuleCall)cBodyAssignment_1_3.eContents().get(0);
		
		//ETSpecificationDefinition:
		//	ETSpecificationTemplate | {ETSpecificationDefinition} "spec" name=ID body=ETSpecificationBody;
		public ParserRule getRule() { return rule; }

		//ETSpecificationTemplate | {ETSpecificationDefinition} "spec" name=ID body=ETSpecificationBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETSpecificationTemplate
		public RuleCall getETSpecificationTemplateParserRuleCall_0() { return cETSpecificationTemplateParserRuleCall_0; }

		//{ETSpecificationDefinition} "spec" name=ID body=ETSpecificationBody
		public Group getGroup_1() { return cGroup_1; }

		//{ETSpecificationDefinition}
		public Action getETSpecificationDefinitionAction_1_0() { return cETSpecificationDefinitionAction_1_0; }

		//"spec"
		public Keyword getSpecKeyword_1_1() { return cSpecKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//body=ETSpecificationBody
		public Assignment getBodyAssignment_1_3() { return cBodyAssignment_1_3; }

		//ETSpecificationBody
		public RuleCall getBodyETSpecificationBodyParserRuleCall_1_3_0() { return cBodyETSpecificationBodyParserRuleCall_1_3_0; }
	}

	public class ETSpecificationTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETSpecificationTemplateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTemplateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersETParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersETParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyETSpecificationBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//ETSpecificationTemplate:
		//	{ETSpecificationTemplate} "template" name=ID "(" (parameters+=ETParameter ("," parameters+=ETParameter)*)? ")"
		//	body=ETSpecificationBody;
		public ParserRule getRule() { return rule; }

		//{ETSpecificationTemplate} "template" name=ID "(" (parameters+=ETParameter ("," parameters+=ETParameter)*)? ")"
		//body=ETSpecificationBody
		public Group getGroup() { return cGroup; }

		//{ETSpecificationTemplate}
		public Action getETSpecificationTemplateAction_0() { return cETSpecificationTemplateAction_0; }

		//"template"
		public Keyword getTemplateKeyword_1() { return cTemplateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=ETParameter ("," parameters+=ETParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=ETParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//ETParameter
		public RuleCall getParametersETParameterParserRuleCall_4_0_0() { return cParametersETParameterParserRuleCall_4_0_0; }

		//("," parameters+=ETParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=ETParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//ETParameter
		public RuleCall getParametersETParameterParserRuleCall_4_1_1_0() { return cParametersETParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=ETSpecificationBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//ETSpecificationBody
		public RuleCall getBodyETSpecificationBodyParserRuleCall_6_0() { return cBodyETSpecificationBodyParserRuleCall_6_0; }
	}

	public class ETSpecificationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSpecificationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsETDeclarationsParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cInitialKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialLocationETLocationParserRuleCall_3_0 = (RuleCall)cInitialLocationAssignment_3.eContents().get(0);
		private final Assignment cLocationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocationsETLocationParserRuleCall_4_0 = (RuleCall)cLocationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ETSpecificationBody:
		//	"{" // NOTE: instantiated, but optional
		//	declarations=ETDeclarations // TODO: make 'initial' a modifier and all locations optional?
		//	"initial" initialLocation=ETLocation locations+=ETLocation* "}";
		public ParserRule getRule() { return rule; }

		//"{" // NOTE: instantiated, but optional
		//declarations=ETDeclarations // TODO: make 'initial' a modifier and all locations optional?
		//"initial" initialLocation=ETLocation locations+=ETLocation* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//// NOTE: instantiated, but optional
		//declarations=ETDeclarations
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//ETDeclarations
		public RuleCall getDeclarationsETDeclarationsParserRuleCall_1_0() { return cDeclarationsETDeclarationsParserRuleCall_1_0; }

		//// TODO: make 'initial' a modifier and all locations optional?
		//"initial"
		public Keyword getInitialKeyword_2() { return cInitialKeyword_2; }

		//initialLocation=ETLocation
		public Assignment getInitialLocationAssignment_3() { return cInitialLocationAssignment_3; }

		//ETLocation
		public RuleCall getInitialLocationETLocationParserRuleCall_3_0() { return cInitialLocationETLocationParserRuleCall_3_0; }

		//locations+=ETLocation*
		public Assignment getLocationsAssignment_4() { return cLocationsAssignment_4; }

		//ETLocation
		public RuleCall getLocationsETLocationParserRuleCall_4_0() { return cLocationsETLocationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ETParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeETTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensionsETArrayDeclarationParserRuleCall_2_0 = (RuleCall)cDimensionsAssignment_2.eContents().get(0);
		
		//ETParameter:
		//	type=ETType name=ID dimensions+=ETArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//type=ETType name=ID dimensions+=ETArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//type=ETType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ETType
		public RuleCall getTypeETTypeParserRuleCall_0_0() { return cTypeETTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//dimensions+=ETArrayDeclaration*
		public Assignment getDimensionsAssignment_2() { return cDimensionsAssignment_2; }

		//ETArrayDeclaration
		public RuleCall getDimensionsETArrayDeclarationParserRuleCall_2_0() { return cDimensionsETArrayDeclarationParserRuleCall_2_0; }
	}

	public class ETLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cUrgentAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_0_0_0 = (Keyword)cUrgentAssignment_0_0.eContents().get(0);
		private final Assignment cUniversalAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cUniversalUniversalKeyword_0_1_0 = (Keyword)cUniversalAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInvariantKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInvariantsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInvariantsETExpressionParserRuleCall_3_1_0 = (RuleCall)cInvariantsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInvariantsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInvariantsETExpressionParserRuleCall_3_2_1_0 = (RuleCall)cInvariantsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEdgesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEdgesETEdgeParserRuleCall_4_0_0 = (RuleCall)cEdgesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cEdgesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cEdgesETEdgeParserRuleCall_4_1_1_0 = (RuleCall)cEdgesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ETLocation:
		//	(urgent?="urgent"? & universal?="universal"?) name=ID "{" ("invariant" invariants+=ETExpression (","
		//	invariants+=ETExpression)* ";")? (edges+=ETEdge (";" edges+=ETEdge)*)? "}";
		public ParserRule getRule() { return rule; }

		//(urgent?="urgent"? & universal?="universal"?) name=ID "{" ("invariant" invariants+=ETExpression (","
		//invariants+=ETExpression)* ";")? (edges+=ETEdge (";" edges+=ETEdge)*)? "}"
		public Group getGroup() { return cGroup; }

		//urgent?="urgent"? & universal?="universal"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//urgent?="urgent"?
		public Assignment getUrgentAssignment_0_0() { return cUrgentAssignment_0_0; }

		//"urgent"
		public Keyword getUrgentUrgentKeyword_0_0_0() { return cUrgentUrgentKeyword_0_0_0; }

		//universal?="universal"?
		public Assignment getUniversalAssignment_0_1() { return cUniversalAssignment_0_1; }

		//"universal"
		public Keyword getUniversalUniversalKeyword_0_1_0() { return cUniversalUniversalKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("invariant" invariants+=ETExpression ("," invariants+=ETExpression)* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"invariant"
		public Keyword getInvariantKeyword_3_0() { return cInvariantKeyword_3_0; }

		//invariants+=ETExpression
		public Assignment getInvariantsAssignment_3_1() { return cInvariantsAssignment_3_1; }

		//ETExpression
		public RuleCall getInvariantsETExpressionParserRuleCall_3_1_0() { return cInvariantsETExpressionParserRuleCall_3_1_0; }

		//("," invariants+=ETExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//invariants+=ETExpression
		public Assignment getInvariantsAssignment_3_2_1() { return cInvariantsAssignment_3_2_1; }

		//ETExpression
		public RuleCall getInvariantsETExpressionParserRuleCall_3_2_1_0() { return cInvariantsETExpressionParserRuleCall_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }

		//(edges+=ETEdge (";" edges+=ETEdge)*)?
		public Group getGroup_4() { return cGroup_4; }

		//edges+=ETEdge
		public Assignment getEdgesAssignment_4_0() { return cEdgesAssignment_4_0; }

		//ETEdge
		public RuleCall getEdgesETEdgeParserRuleCall_4_0_0() { return cEdgesETEdgeParserRuleCall_4_0_0; }

		//(";" edges+=ETEdge)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//";"
		public Keyword getSemicolonKeyword_4_1_0() { return cSemicolonKeyword_4_1_0; }

		//edges+=ETEdge
		public Assignment getEdgesAssignment_4_1_1() { return cEdgesAssignment_4_1_1; }

		//ETEdge
		public RuleCall getEdgesETEdgeParserRuleCall_4_1_1_0() { return cEdgesETEdgeParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ETEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cControllableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cControllableControllableKeyword_0_0 = (Keyword)cControllableAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cForeachKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSelectsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSelectsETSelectParserRuleCall_1_0_2_0 = (RuleCall)cSelectsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cSelectsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cSelectsETSelectParserRuleCall_1_0_3_1_0 = (RuleCall)cSelectsAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Assignment cIoAssignment_1_0_6 = (Assignment)cGroup_1_0.eContents().get(6);
		private final RuleCall cIoETIOParserRuleCall_1_0_6_0 = (RuleCall)cIoAssignment_1_0_6.eContents().get(0);
		private final Keyword cColonKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Group cGroup_1_0_8 = (Group)cGroup_1_0.eContents().get(8);
		private final Keyword cIfKeyword_1_0_8_0 = (Keyword)cGroup_1_0_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_8_1 = (Keyword)cGroup_1_0_8.eContents().get(1);
		private final Assignment cGuardAssignment_1_0_8_2 = (Assignment)cGroup_1_0_8.eContents().get(2);
		private final RuleCall cGuardETExpressionParserRuleCall_1_0_8_2_0 = (RuleCall)cGuardAssignment_1_0_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_8_3 = (Keyword)cGroup_1_0_8.eContents().get(3);
		private final Alternatives cAlternatives_1_0_9 = (Alternatives)cGroup_1_0.eContents().get(9);
		private final Group cGroup_1_0_9_0 = (Group)cAlternatives_1_0_9.eContents().get(0);
		private final Keyword cGotoKeyword_1_0_9_0_0 = (Keyword)cGroup_1_0_9_0.eContents().get(0);
		private final Assignment cTargetAssignment_1_0_9_0_1 = (Assignment)cGroup_1_0_9_0.eContents().get(1);
		private final CrossReference cTargetETLocationCrossReference_1_0_9_0_1_0 = (CrossReference)cTargetAssignment_1_0_9_0_1.eContents().get(0);
		private final RuleCall cTargetETLocationIDTerminalRuleCall_1_0_9_0_1_0_1 = (RuleCall)cTargetETLocationCrossReference_1_0_9_0_1_0.eContents().get(1);
		private final Group cGroup_1_0_9_1 = (Group)cAlternatives_1_0_9.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0_9_1_0 = (Keyword)cGroup_1_0_9_1.eContents().get(0);
		private final Group cGroup_1_0_9_1_1 = (Group)cGroup_1_0_9_1.eContents().get(1);
		private final Assignment cUpdatesAssignment_1_0_9_1_1_0 = (Assignment)cGroup_1_0_9_1_1.eContents().get(0);
		private final RuleCall cUpdatesETExpressionParserRuleCall_1_0_9_1_1_0_0 = (RuleCall)cUpdatesAssignment_1_0_9_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_9_1_1_1 = (Keyword)cGroup_1_0_9_1_1.eContents().get(1);
		private final Keyword cGotoKeyword_1_0_9_1_2 = (Keyword)cGroup_1_0_9_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_0_9_1_3 = (Assignment)cGroup_1_0_9_1.eContents().get(3);
		private final CrossReference cTargetETLocationCrossReference_1_0_9_1_3_0 = (CrossReference)cTargetAssignment_1_0_9_1_3.eContents().get(0);
		private final RuleCall cTargetETLocationIDTerminalRuleCall_1_0_9_1_3_0_1 = (RuleCall)cTargetETLocationCrossReference_1_0_9_1_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_0_9_1_4 = (Keyword)cGroup_1_0_9_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_1_0_10 = (Keyword)cGroup_1_0.eContents().get(10);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIoAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIoETIOParserRuleCall_1_1_0_0 = (RuleCall)cIoAssignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cIfKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		private final Assignment cGuardAssignment_1_1_2_2 = (Assignment)cGroup_1_1_2.eContents().get(2);
		private final RuleCall cGuardETExpressionParserRuleCall_1_1_2_2_0 = (RuleCall)cGuardAssignment_1_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_3 = (Keyword)cGroup_1_1_2.eContents().get(3);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_1_3_0 = (Group)cAlternatives_1_1_3.eContents().get(0);
		private final Keyword cGotoKeyword_1_1_3_0_0 = (Keyword)cGroup_1_1_3_0.eContents().get(0);
		private final Assignment cTargetAssignment_1_1_3_0_1 = (Assignment)cGroup_1_1_3_0.eContents().get(1);
		private final CrossReference cTargetETLocationCrossReference_1_1_3_0_1_0 = (CrossReference)cTargetAssignment_1_1_3_0_1.eContents().get(0);
		private final RuleCall cTargetETLocationIDTerminalRuleCall_1_1_3_0_1_0_1 = (RuleCall)cTargetETLocationCrossReference_1_1_3_0_1_0.eContents().get(1);
		private final Group cGroup_1_1_3_1 = (Group)cAlternatives_1_1_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_3_1_0 = (Keyword)cGroup_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cGroup_1_1_3_1.eContents().get(1);
		private final Assignment cUpdatesAssignment_1_1_3_1_1_0 = (Assignment)cGroup_1_1_3_1_1.eContents().get(0);
		private final RuleCall cUpdatesETExpressionParserRuleCall_1_1_3_1_1_0_0 = (RuleCall)cUpdatesAssignment_1_1_3_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3_1_1_1 = (Keyword)cGroup_1_1_3_1_1.eContents().get(1);
		private final Keyword cGotoKeyword_1_1_3_1_2 = (Keyword)cGroup_1_1_3_1.eContents().get(2);
		private final Assignment cTargetAssignment_1_1_3_1_3 = (Assignment)cGroup_1_1_3_1.eContents().get(3);
		private final CrossReference cTargetETLocationCrossReference_1_1_3_1_3_0 = (CrossReference)cTargetAssignment_1_1_3_1_3.eContents().get(0);
		private final RuleCall cTargetETLocationIDTerminalRuleCall_1_1_3_1_3_0_1 = (RuleCall)cTargetETLocationCrossReference_1_1_3_1_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_3_1_4 = (Keyword)cGroup_1_1_3_1.eContents().get(4);
		
		//ETEdge:
		//	controllable?="controllable"? ("foreach" "(" selects+=ETSelect ("," selects+=ETSelect)* ")" "{" io=ETIO ":" ("if" "("
		//	guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation]
		//	"}") "}" / * NOTE:
		//	 * 'then' suffix not possible in LL grammar,
		//	 * ETIO also expression!
		//	 * /
		//// TODO: how to avoid code duplication?
		//	| io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto"
		//	target=[ETLocation] "}"));
		public ParserRule getRule() { return rule; }

		//controllable?="controllable"? ("foreach" "(" selects+=ETSelect ("," selects+=ETSelect)* ")" "{" io=ETIO ":" ("if" "("
		//guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}")
		//"}" / * NOTE:
		//	 * 'then' suffix not possible in LL grammar,
		//	 * ETIO also expression!
		//	 * / // TODO: how to avoid code duplication?
		//| io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto"
		//target=[ETLocation] "}"))
		public Group getGroup() { return cGroup; }

		//controllable?="controllable"?
		public Assignment getControllableAssignment_0() { return cControllableAssignment_0; }

		//"controllable"
		public Keyword getControllableControllableKeyword_0_0() { return cControllableControllableKeyword_0_0; }

		//"foreach" "(" selects+=ETSelect ("," selects+=ETSelect)* ")" "{" io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto"
		//target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}") "}" / * NOTE:
		//	 * 'then' suffix not possible in LL grammar,
		//	 * ETIO also expression!
		//	 * / // TODO: how to avoid code duplication?
		//| io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto"
		//target=[ETLocation] "}")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"foreach" "(" selects+=ETSelect ("," selects+=ETSelect)* ")" "{" io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto"
		//target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}") "}"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"foreach"
		public Keyword getForeachKeyword_1_0_0() { return cForeachKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//selects+=ETSelect
		public Assignment getSelectsAssignment_1_0_2() { return cSelectsAssignment_1_0_2; }

		//ETSelect
		public RuleCall getSelectsETSelectParserRuleCall_1_0_2_0() { return cSelectsETSelectParserRuleCall_1_0_2_0; }

		//("," selects+=ETSelect)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//","
		public Keyword getCommaKeyword_1_0_3_0() { return cCommaKeyword_1_0_3_0; }

		//selects+=ETSelect
		public Assignment getSelectsAssignment_1_0_3_1() { return cSelectsAssignment_1_0_3_1; }

		//ETSelect
		public RuleCall getSelectsETSelectParserRuleCall_1_0_3_1_0() { return cSelectsETSelectParserRuleCall_1_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_5() { return cLeftCurlyBracketKeyword_1_0_5; }

		//io=ETIO
		public Assignment getIoAssignment_1_0_6() { return cIoAssignment_1_0_6; }

		//ETIO
		public RuleCall getIoETIOParserRuleCall_1_0_6_0() { return cIoETIOParserRuleCall_1_0_6_0; }

		//":"
		public Keyword getColonKeyword_1_0_7() { return cColonKeyword_1_0_7; }

		//("if" "(" guard=ETExpression ")")?
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }

		//"if"
		public Keyword getIfKeyword_1_0_8_0() { return cIfKeyword_1_0_8_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_8_1() { return cLeftParenthesisKeyword_1_0_8_1; }

		//guard=ETExpression
		public Assignment getGuardAssignment_1_0_8_2() { return cGuardAssignment_1_0_8_2; }

		//ETExpression
		public RuleCall getGuardETExpressionParserRuleCall_1_0_8_2_0() { return cGuardETExpressionParserRuleCall_1_0_8_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_8_3() { return cRightParenthesisKeyword_1_0_8_3; }

		//"goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}"
		public Alternatives getAlternatives_1_0_9() { return cAlternatives_1_0_9; }

		//"goto" target=[ETLocation]
		public Group getGroup_1_0_9_0() { return cGroup_1_0_9_0; }

		//"goto"
		public Keyword getGotoKeyword_1_0_9_0_0() { return cGotoKeyword_1_0_9_0_0; }

		//target=[ETLocation]
		public Assignment getTargetAssignment_1_0_9_0_1() { return cTargetAssignment_1_0_9_0_1; }

		//[ETLocation]
		public CrossReference getTargetETLocationCrossReference_1_0_9_0_1_0() { return cTargetETLocationCrossReference_1_0_9_0_1_0; }

		//ID
		public RuleCall getTargetETLocationIDTerminalRuleCall_1_0_9_0_1_0_1() { return cTargetETLocationIDTerminalRuleCall_1_0_9_0_1_0_1; }

		//"{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}"
		public Group getGroup_1_0_9_1() { return cGroup_1_0_9_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_9_1_0() { return cLeftCurlyBracketKeyword_1_0_9_1_0; }

		//(updates+=ETExpression ";")*
		public Group getGroup_1_0_9_1_1() { return cGroup_1_0_9_1_1; }

		//updates+=ETExpression
		public Assignment getUpdatesAssignment_1_0_9_1_1_0() { return cUpdatesAssignment_1_0_9_1_1_0; }

		//ETExpression
		public RuleCall getUpdatesETExpressionParserRuleCall_1_0_9_1_1_0_0() { return cUpdatesETExpressionParserRuleCall_1_0_9_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_9_1_1_1() { return cSemicolonKeyword_1_0_9_1_1_1; }

		//"goto"
		public Keyword getGotoKeyword_1_0_9_1_2() { return cGotoKeyword_1_0_9_1_2; }

		//target=[ETLocation]
		public Assignment getTargetAssignment_1_0_9_1_3() { return cTargetAssignment_1_0_9_1_3; }

		//[ETLocation]
		public CrossReference getTargetETLocationCrossReference_1_0_9_1_3_0() { return cTargetETLocationCrossReference_1_0_9_1_3_0; }

		//ID
		public RuleCall getTargetETLocationIDTerminalRuleCall_1_0_9_1_3_0_1() { return cTargetETLocationIDTerminalRuleCall_1_0_9_1_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_9_1_4() { return cRightCurlyBracketKeyword_1_0_9_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_10() { return cRightCurlyBracketKeyword_1_0_10; }

		//io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto"
		//target=[ETLocation] "}")
		public Group getGroup_1_1() { return cGroup_1_1; }

		//io=ETIO
		public Assignment getIoAssignment_1_1_0() { return cIoAssignment_1_1_0; }

		//ETIO
		public RuleCall getIoETIOParserRuleCall_1_1_0_0() { return cIoETIOParserRuleCall_1_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }

		//("if" "(" guard=ETExpression ")")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"if"
		public Keyword getIfKeyword_1_1_2_0() { return cIfKeyword_1_1_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_2_1() { return cLeftParenthesisKeyword_1_1_2_1; }

		//guard=ETExpression
		public Assignment getGuardAssignment_1_1_2_2() { return cGuardAssignment_1_1_2_2; }

		//ETExpression
		public RuleCall getGuardETExpressionParserRuleCall_1_1_2_2_0() { return cGuardETExpressionParserRuleCall_1_1_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2_3() { return cRightParenthesisKeyword_1_1_2_3; }

		//"goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}"
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }

		//"goto" target=[ETLocation]
		public Group getGroup_1_1_3_0() { return cGroup_1_1_3_0; }

		//"goto"
		public Keyword getGotoKeyword_1_1_3_0_0() { return cGotoKeyword_1_1_3_0_0; }

		//target=[ETLocation]
		public Assignment getTargetAssignment_1_1_3_0_1() { return cTargetAssignment_1_1_3_0_1; }

		//[ETLocation]
		public CrossReference getTargetETLocationCrossReference_1_1_3_0_1_0() { return cTargetETLocationCrossReference_1_1_3_0_1_0; }

		//ID
		public RuleCall getTargetETLocationIDTerminalRuleCall_1_1_3_0_1_0_1() { return cTargetETLocationIDTerminalRuleCall_1_1_3_0_1_0_1; }

		//"{" (updates+=ETExpression ";")* "goto" target=[ETLocation] "}"
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_3_1_0() { return cLeftCurlyBracketKeyword_1_1_3_1_0; }

		//(updates+=ETExpression ";")*
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }

		//updates+=ETExpression
		public Assignment getUpdatesAssignment_1_1_3_1_1_0() { return cUpdatesAssignment_1_1_3_1_1_0; }

		//ETExpression
		public RuleCall getUpdatesETExpressionParserRuleCall_1_1_3_1_1_0_0() { return cUpdatesETExpressionParserRuleCall_1_1_3_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_3_1_1_1() { return cSemicolonKeyword_1_1_3_1_1_1; }

		//"goto"
		public Keyword getGotoKeyword_1_1_3_1_2() { return cGotoKeyword_1_1_3_1_2; }

		//target=[ETLocation]
		public Assignment getTargetAssignment_1_1_3_1_3() { return cTargetAssignment_1_1_3_1_3; }

		//[ETLocation]
		public CrossReference getTargetETLocationCrossReference_1_1_3_1_3_0() { return cTargetETLocationCrossReference_1_1_3_1_3_0; }

		//ID
		public RuleCall getTargetETLocationIDTerminalRuleCall_1_1_3_1_3_0_1() { return cTargetETLocationIDTerminalRuleCall_1_1_3_1_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_3_1_4() { return cRightCurlyBracketKeyword_1_1_3_1_4; }
	}

	public class ETIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionETExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeETIOTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ETIO:
		//	expression=ETExpression type=ETIOType;
		public ParserRule getRule() { return rule; }

		//expression=ETExpression type=ETIOType
		public Group getGroup() { return cGroup; }

		//expression=ETExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ETExpression
		public RuleCall getExpressionETExpressionParserRuleCall_0_0() { return cExpressionETExpressionParserRuleCall_0_0; }

		//type=ETIOType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ETIOType
		public RuleCall getTypeETIOTypeEnumRuleCall_1_0() { return cTypeETIOTypeEnumRuleCall_1_0; }
	}

	public class ETSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeETTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ETSelect:
		//	name=ID ":" type=ETType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ETType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ETType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ETType
		public RuleCall getTypeETTypeParserRuleCall_2_0() { return cTypeETTypeParserRuleCall_2_0; }
	}

	public class ETExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETImplyLogicOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETForallExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cForallKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETExistsExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExistsKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeETTypeParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cExpressionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExpressionETExpressionParserRuleCall_1_6_0 = (RuleCall)cExpressionAssignment_1_6.eContents().get(0);
		
		/// * TODO: refinement * / / *
		//Assertion:
		//	'assert:' (SpecificationAssertion | Consistency | Implementation | Control)
		//;
		//
		//SpecificationAssertion:
		//	'specification' expression=LogicalExpression
		//;
		//
		//Consistency:
		//	'consistent' expression=LogicalExpression
		//;
		//
		//Implementation:
		//	'implementation' expression=LogicalExpression
		//;
		//
		//Control:
		//	'control' expression=LogicalExpression
		//;
		// * / //// Expression
		/// *
		// * Same as UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Expressions.shtml)
		// * / // unary right
		//ETExpression:
		//	ETImplyLogicOrExpression | ({ETForallExpression} "forall" | {ETExistsExpression} "exists") "(" name=ID ":" type=ETType
		//	")" expression=ETExpression;
		public ParserRule getRule() { return rule; }

		//ETImplyLogicOrExpression | ({ETForallExpression} "forall" | {ETExistsExpression} "exists") "(" name=ID ":" type=ETType
		//")" expression=ETExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETImplyLogicOrExpression
		public RuleCall getETImplyLogicOrExpressionParserRuleCall_0() { return cETImplyLogicOrExpressionParserRuleCall_0; }

		//({ETForallExpression} "forall" | {ETExistsExpression} "exists") "(" name=ID ":" type=ETType ")" expression=ETExpression
		public Group getGroup_1() { return cGroup_1; }

		//{ETForallExpression} "forall" | {ETExistsExpression} "exists"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETForallExpression} "forall"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETForallExpression}
		public Action getETForallExpressionAction_1_0_0_0() { return cETForallExpressionAction_1_0_0_0; }

		//"forall"
		public Keyword getForallKeyword_1_0_0_1() { return cForallKeyword_1_0_0_1; }

		//{ETExistsExpression} "exists"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETExistsExpression}
		public Action getETExistsExpressionAction_1_0_1_0() { return cETExistsExpressionAction_1_0_1_0; }

		//"exists"
		public Keyword getExistsKeyword_1_0_1_1() { return cExistsKeyword_1_0_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//type=ETType
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }

		//ETType
		public RuleCall getTypeETTypeParserRuleCall_1_4_0() { return cTypeETTypeParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//expression=ETExpression
		public Assignment getExpressionAssignment_1_6() { return cExpressionAssignment_1_6; }

		//ETExpression
		public RuleCall getExpressionETExpressionParserRuleCall_1_6_0() { return cExpressionETExpressionParserRuleCall_1_6_0; }
	}

	public class ETImplyLogicOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETImplyLogicOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETLogicAndExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETImplyExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cImplyKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETLogicOrExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETLogicAndExpression1ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETImplyLogicOrExpression returns ETExpression:
		//	ETLogicAndExpression1 (({ETImplyExpression.left=current} "imply" | {ETLogicOrExpression.left=current} "or")
		//	right=ETLogicAndExpression1)*;
		public ParserRule getRule() { return rule; }

		//ETLogicAndExpression1 (({ETImplyExpression.left=current} "imply" | {ETLogicOrExpression.left=current} "or")
		//right=ETLogicAndExpression1)*
		public Group getGroup() { return cGroup; }

		//ETLogicAndExpression1
		public RuleCall getETLogicAndExpression1ParserRuleCall_0() { return cETLogicAndExpression1ParserRuleCall_0; }

		//(({ETImplyExpression.left=current} "imply" | {ETLogicOrExpression.left=current} "or") right=ETLogicAndExpression1)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETImplyExpression.left=current} "imply" | {ETLogicOrExpression.left=current} "or"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETImplyExpression.left=current} "imply"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETImplyExpression.left=current}
		public Action getETImplyExpressionLeftAction_1_0_0_0() { return cETImplyExpressionLeftAction_1_0_0_0; }

		//"imply"
		public Keyword getImplyKeyword_1_0_0_1() { return cImplyKeyword_1_0_0_1; }

		//{ETLogicOrExpression.left=current} "or"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETLogicOrExpression.left=current}
		public Action getETLogicOrExpressionLeftAction_1_0_1_0() { return cETLogicOrExpressionLeftAction_1_0_1_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1_1() { return cOrKeyword_1_0_1_1; }

		//right=ETLogicAndExpression1
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETLogicAndExpression1
		public RuleCall getRightETLogicAndExpression1ParserRuleCall_1_1_0() { return cRightETLogicAndExpression1ParserRuleCall_1_1_0; }
	}

	public class ETLogicAndExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETLogicAndExpression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETLogicNotExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETLogicAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETLogicNotExpression1ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETLogicAndExpression1 returns ETExpression:
		//	ETLogicNotExpression1 (({ETLogicAndExpression.left=current} "and") right=ETLogicNotExpression1)*;
		public ParserRule getRule() { return rule; }

		//ETLogicNotExpression1 (({ETLogicAndExpression.left=current} "and") right=ETLogicNotExpression1)*
		public Group getGroup() { return cGroup; }

		//ETLogicNotExpression1
		public RuleCall getETLogicNotExpression1ParserRuleCall_0() { return cETLogicNotExpression1ParserRuleCall_0; }

		//(({ETLogicAndExpression.left=current} "and") right=ETLogicNotExpression1)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETLogicAndExpression.left=current} "and"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETLogicAndExpression.left=current}
		public Action getETLogicAndExpressionLeftAction_1_0_0() { return cETLogicAndExpressionLeftAction_1_0_0; }

		//"and"
		public Keyword getAndKeyword_1_0_1() { return cAndKeyword_1_0_1; }

		//right=ETLogicNotExpression1
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETLogicNotExpression1
		public RuleCall getRightETLogicNotExpression1ParserRuleCall_1_1_0() { return cRightETLogicNotExpression1ParserRuleCall_1_1_0; }
	}

	public class ETLogicNotExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETLogicNotExpression1");
		private final RuleCall cETAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// unary right
		//// TODO: causes duplicate method definition by Xtext
		////	| ({ETLogicNotExpression} 'not'
		////		expression=ETLogicNotExpression1)
		//ETLogicNotExpression1 returns ETExpression:
		//	ETAssignmentExpression;
		public ParserRule getRule() { return rule; }

		//ETAssignmentExpression
		public RuleCall getETAssignmentExpressionParserRuleCall() { return cETAssignmentExpressionParserRuleCall; }
	}

	public class ETAssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETAssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETAssignmentExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETAssignmentExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cETAdditionAssignmentExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cETSubtractionAssignmentExpressionLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cETMultiplicationAssignmentExpressionLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cETDivisionAssignmentExpressionLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cETModuloAssignmentExpressionLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cPercentSignEqualsSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Action cETBitOrAssignmentExpressionLeftAction_1_0_7_0 = (Action)cGroup_1_0_7.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Group cGroup_1_0_8 = (Group)cAlternatives_1_0.eContents().get(8);
		private final Action cETBitAndAssignmentExpressionLeftAction_1_0_8_0 = (Action)cGroup_1_0_8.eContents().get(0);
		private final Keyword cAmpersandEqualsSignKeyword_1_0_8_1 = (Keyword)cGroup_1_0_8.eContents().get(1);
		private final Group cGroup_1_0_9 = (Group)cAlternatives_1_0.eContents().get(9);
		private final Action cETBitXORAssignmentExpressionLeftAction_1_0_9_0 = (Action)cGroup_1_0_9.eContents().get(0);
		private final Keyword cCircumflexAccentEqualsSignKeyword_1_0_9_1 = (Keyword)cGroup_1_0_9.eContents().get(1);
		private final Group cGroup_1_0_10 = (Group)cAlternatives_1_0.eContents().get(10);
		private final Action cETBitLeftAssignmentExpressionLeftAction_1_0_10_0 = (Action)cGroup_1_0_10.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1 = (Keyword)cGroup_1_0_10.eContents().get(1);
		private final Group cGroup_1_0_11 = (Group)cAlternatives_1_0.eContents().get(11);
		private final Action cETBitRightAssignmentExpressionLeftAction_1_0_11_0 = (Action)cGroup_1_0_11.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1 = (Keyword)cGroup_1_0_11.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETAssignmentExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// right
		//ETAssignmentExpression returns ETExpression:
		//	ETConditionalExpression (({ETAssignmentExpression.left=current} "=" | {ETAssignmentExpression.left=current} ":=" |
		//	{ETAdditionAssignmentExpression.left=current} "+=" | {ETSubtractionAssignmentExpression.left=current} "-=" |
		//	{ETMultiplicationAssignmentExpression.left=current} "*=" | {ETDivisionAssignmentExpression.left=current} "/=" |
		//	{ETModuloAssignmentExpression.left=current} "%=" | {ETBitOrAssignmentExpression.left=current} "|=" |
		//	{ETBitAndAssignmentExpression.left=current} "&=" | {ETBitXORAssignmentExpression.left=current} "^=" |
		//	{ETBitLeftAssignmentExpression.left=current} "<<=" | {ETBitRightAssignmentExpression.left=current} ">>=")
		//	right=ETAssignmentExpression)?;
		public ParserRule getRule() { return rule; }

		//ETConditionalExpression (({ETAssignmentExpression.left=current} "=" | {ETAssignmentExpression.left=current} ":=" |
		//{ETAdditionAssignmentExpression.left=current} "+=" | {ETSubtractionAssignmentExpression.left=current} "-=" |
		//{ETMultiplicationAssignmentExpression.left=current} "*=" | {ETDivisionAssignmentExpression.left=current} "/=" |
		//{ETModuloAssignmentExpression.left=current} "%=" | {ETBitOrAssignmentExpression.left=current} "|=" |
		//{ETBitAndAssignmentExpression.left=current} "&=" | {ETBitXORAssignmentExpression.left=current} "^=" |
		//{ETBitLeftAssignmentExpression.left=current} "<<=" | {ETBitRightAssignmentExpression.left=current} ">>=")
		//right=ETAssignmentExpression)?
		public Group getGroup() { return cGroup; }

		//ETConditionalExpression
		public RuleCall getETConditionalExpressionParserRuleCall_0() { return cETConditionalExpressionParserRuleCall_0; }

		//(({ETAssignmentExpression.left=current} "=" | {ETAssignmentExpression.left=current} ":=" |
		//{ETAdditionAssignmentExpression.left=current} "+=" | {ETSubtractionAssignmentExpression.left=current} "-=" |
		//{ETMultiplicationAssignmentExpression.left=current} "*=" | {ETDivisionAssignmentExpression.left=current} "/=" |
		//{ETModuloAssignmentExpression.left=current} "%=" | {ETBitOrAssignmentExpression.left=current} "|=" |
		//{ETBitAndAssignmentExpression.left=current} "&=" | {ETBitXORAssignmentExpression.left=current} "^=" |
		//{ETBitLeftAssignmentExpression.left=current} "<<=" | {ETBitRightAssignmentExpression.left=current} ">>=")
		//right=ETAssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ETAssignmentExpression.left=current} "=" | {ETAssignmentExpression.left=current} ":=" |
		//{ETAdditionAssignmentExpression.left=current} "+=" | {ETSubtractionAssignmentExpression.left=current} "-=" |
		//{ETMultiplicationAssignmentExpression.left=current} "*=" | {ETDivisionAssignmentExpression.left=current} "/=" |
		//{ETModuloAssignmentExpression.left=current} "%=" | {ETBitOrAssignmentExpression.left=current} "|=" |
		//{ETBitAndAssignmentExpression.left=current} "&=" | {ETBitXORAssignmentExpression.left=current} "^=" |
		//{ETBitLeftAssignmentExpression.left=current} "<<=" | {ETBitRightAssignmentExpression.left=current} ">>="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETAssignmentExpression.left=current} "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETAssignmentExpression.left=current}
		public Action getETAssignmentExpressionLeftAction_1_0_0_0() { return cETAssignmentExpressionLeftAction_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }

		//{ETAssignmentExpression.left=current} ":="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETAssignmentExpression.left=current}
		public Action getETAssignmentExpressionLeftAction_1_0_1_0() { return cETAssignmentExpressionLeftAction_1_0_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1_1() { return cColonEqualsSignKeyword_1_0_1_1; }

		//{ETAdditionAssignmentExpression.left=current} "+="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{ETAdditionAssignmentExpression.left=current}
		public Action getETAdditionAssignmentExpressionLeftAction_1_0_2_0() { return cETAdditionAssignmentExpressionLeftAction_1_0_2_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_0_2_1() { return cPlusSignEqualsSignKeyword_1_0_2_1; }

		//{ETSubtractionAssignmentExpression.left=current} "-="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{ETSubtractionAssignmentExpression.left=current}
		public Action getETSubtractionAssignmentExpressionLeftAction_1_0_3_0() { return cETSubtractionAssignmentExpressionLeftAction_1_0_3_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1_0_3_1() { return cHyphenMinusEqualsSignKeyword_1_0_3_1; }

		//{ETMultiplicationAssignmentExpression.left=current} "*="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{ETMultiplicationAssignmentExpression.left=current}
		public Action getETMultiplicationAssignmentExpressionLeftAction_1_0_4_0() { return cETMultiplicationAssignmentExpressionLeftAction_1_0_4_0; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1_0_4_1() { return cAsteriskEqualsSignKeyword_1_0_4_1; }

		//{ETDivisionAssignmentExpression.left=current} "/="
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{ETDivisionAssignmentExpression.left=current}
		public Action getETDivisionAssignmentExpressionLeftAction_1_0_5_0() { return cETDivisionAssignmentExpressionLeftAction_1_0_5_0; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_0_5_1() { return cSolidusEqualsSignKeyword_1_0_5_1; }

		//{ETModuloAssignmentExpression.left=current} "%="
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{ETModuloAssignmentExpression.left=current}
		public Action getETModuloAssignmentExpressionLeftAction_1_0_6_0() { return cETModuloAssignmentExpressionLeftAction_1_0_6_0; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_1_0_6_1() { return cPercentSignEqualsSignKeyword_1_0_6_1; }

		//{ETBitOrAssignmentExpression.left=current} "|="
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//{ETBitOrAssignmentExpression.left=current}
		public Action getETBitOrAssignmentExpressionLeftAction_1_0_7_0() { return cETBitOrAssignmentExpressionLeftAction_1_0_7_0; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_1_0_7_1() { return cVerticalLineEqualsSignKeyword_1_0_7_1; }

		//{ETBitAndAssignmentExpression.left=current} "&="
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }

		//{ETBitAndAssignmentExpression.left=current}
		public Action getETBitAndAssignmentExpressionLeftAction_1_0_8_0() { return cETBitAndAssignmentExpressionLeftAction_1_0_8_0; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_1_0_8_1() { return cAmpersandEqualsSignKeyword_1_0_8_1; }

		//{ETBitXORAssignmentExpression.left=current} "^="
		public Group getGroup_1_0_9() { return cGroup_1_0_9; }

		//{ETBitXORAssignmentExpression.left=current}
		public Action getETBitXORAssignmentExpressionLeftAction_1_0_9_0() { return cETBitXORAssignmentExpressionLeftAction_1_0_9_0; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_1_0_9_1() { return cCircumflexAccentEqualsSignKeyword_1_0_9_1; }

		//{ETBitLeftAssignmentExpression.left=current} "<<="
		public Group getGroup_1_0_10() { return cGroup_1_0_10; }

		//{ETBitLeftAssignmentExpression.left=current}
		public Action getETBitLeftAssignmentExpressionLeftAction_1_0_10_0() { return cETBitLeftAssignmentExpressionLeftAction_1_0_10_0; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1() { return cLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1; }

		//{ETBitRightAssignmentExpression.left=current} ">>="
		public Group getGroup_1_0_11() { return cGroup_1_0_11; }

		//{ETBitRightAssignmentExpression.left=current}
		public Action getETBitRightAssignmentExpressionLeftAction_1_0_11_0() { return cETBitRightAssignmentExpressionLeftAction_1_0_11_0; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1; }

		//right=ETAssignmentExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETAssignmentExpression
		public RuleCall getRightETAssignmentExpressionParserRuleCall_1_1_0() { return cRightETAssignmentExpressionParserRuleCall_1_1_0; }
	}

	public class ETConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETLogicOrExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cETConditionalExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenETLogicOrExpression2ParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseETConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cElseAssignment_1_4.eContents().get(0);
		
		//// right
		//ETConditionalExpression returns ETExpression:
		//	ETLogicOrExpression2 ({ETConditionalExpression.condition=current} "?" then=ETLogicOrExpression2 ":"
		//	else=ETConditionalExpression)?;
		public ParserRule getRule() { return rule; }

		//ETLogicOrExpression2 ({ETConditionalExpression.condition=current} "?" then=ETLogicOrExpression2 ":"
		//else=ETConditionalExpression)?
		public Group getGroup() { return cGroup; }

		//ETLogicOrExpression2
		public RuleCall getETLogicOrExpression2ParserRuleCall_0() { return cETLogicOrExpression2ParserRuleCall_0; }

		//({ETConditionalExpression.condition=current} "?" then=ETLogicOrExpression2 ":" else=ETConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ETConditionalExpression.condition=current}
		public Action getETConditionalExpressionConditionAction_1_0() { return cETConditionalExpressionConditionAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//then=ETLogicOrExpression2
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }

		//ETLogicOrExpression2
		public RuleCall getThenETLogicOrExpression2ParserRuleCall_1_2_0() { return cThenETLogicOrExpression2ParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//else=ETConditionalExpression
		public Assignment getElseAssignment_1_4() { return cElseAssignment_1_4; }

		//ETConditionalExpression
		public RuleCall getElseETConditionalExpressionParserRuleCall_1_4_0() { return cElseETConditionalExpressionParserRuleCall_1_4_0; }
	}

	public class ETLogicOrExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETLogicOrExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETLogicAndExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETLogicOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETLogicAndExpression2ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETLogicOrExpression2 returns ETExpression:
		//	ETLogicAndExpression2 (({ETLogicOrExpression.left=current} "||") right=ETLogicAndExpression2)*;
		public ParserRule getRule() { return rule; }

		//ETLogicAndExpression2 (({ETLogicOrExpression.left=current} "||") right=ETLogicAndExpression2)*
		public Group getGroup() { return cGroup; }

		//ETLogicAndExpression2
		public RuleCall getETLogicAndExpression2ParserRuleCall_0() { return cETLogicAndExpression2ParserRuleCall_0; }

		//(({ETLogicOrExpression.left=current} "||") right=ETLogicAndExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETLogicOrExpression.left=current} "||"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETLogicOrExpression.left=current}
		public Action getETLogicOrExpressionLeftAction_1_0_0() { return cETLogicOrExpressionLeftAction_1_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }

		//right=ETLogicAndExpression2
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETLogicAndExpression2
		public RuleCall getRightETLogicAndExpression2ParserRuleCall_1_1_0() { return cRightETLogicAndExpression2ParserRuleCall_1_1_0; }
	}

	public class ETLogicAndExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETLogicAndExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETBitOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETLogicAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETBitOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETLogicAndExpression2 returns ETExpression:
		//	ETBitOrExpression (({ETLogicAndExpression.left=current} "&&") right=ETBitOrExpression)*;
		public ParserRule getRule() { return rule; }

		//ETBitOrExpression (({ETLogicAndExpression.left=current} "&&") right=ETBitOrExpression)*
		public Group getGroup() { return cGroup; }

		//ETBitOrExpression
		public RuleCall getETBitOrExpressionParserRuleCall_0() { return cETBitOrExpressionParserRuleCall_0; }

		//(({ETLogicAndExpression.left=current} "&&") right=ETBitOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETLogicAndExpression.left=current} "&&"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETLogicAndExpression.left=current}
		public Action getETLogicAndExpressionLeftAction_1_0_0() { return cETLogicAndExpressionLeftAction_1_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }

		//right=ETBitOrExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETBitOrExpression
		public RuleCall getRightETBitOrExpressionParserRuleCall_1_1_0() { return cRightETBitOrExpressionParserRuleCall_1_1_0; }
	}

	public class ETBitOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBitOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETBitXORExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETBitOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETBitXORExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETBitOrExpression returns ETExpression:
		//	ETBitXORExpression (({ETBitOrExpression.left=current} "|") right=ETBitXORExpression)*;
		public ParserRule getRule() { return rule; }

		//ETBitXORExpression (({ETBitOrExpression.left=current} "|") right=ETBitXORExpression)*
		public Group getGroup() { return cGroup; }

		//ETBitXORExpression
		public RuleCall getETBitXORExpressionParserRuleCall_0() { return cETBitXORExpressionParserRuleCall_0; }

		//(({ETBitOrExpression.left=current} "|") right=ETBitXORExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETBitOrExpression.left=current} "|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETBitOrExpression.left=current}
		public Action getETBitOrExpressionLeftAction_1_0_0() { return cETBitOrExpressionLeftAction_1_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1() { return cVerticalLineKeyword_1_0_1; }

		//right=ETBitXORExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETBitXORExpression
		public RuleCall getRightETBitXORExpressionParserRuleCall_1_1_0() { return cRightETBitXORExpressionParserRuleCall_1_1_0; }
	}

	public class ETBitXORExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBitXORExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETBitAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETBitXORExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETBitAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETBitXORExpression returns ETExpression:
		//	ETBitAndExpression (({ETBitXORExpression.left=current} "^") right=ETBitAndExpression)*;
		public ParserRule getRule() { return rule; }

		//ETBitAndExpression (({ETBitXORExpression.left=current} "^") right=ETBitAndExpression)*
		public Group getGroup() { return cGroup; }

		//ETBitAndExpression
		public RuleCall getETBitAndExpressionParserRuleCall_0() { return cETBitAndExpressionParserRuleCall_0; }

		//(({ETBitXORExpression.left=current} "^") right=ETBitAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETBitXORExpression.left=current} "^"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETBitXORExpression.left=current}
		public Action getETBitXORExpressionLeftAction_1_0_0() { return cETBitXORExpressionLeftAction_1_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=ETBitAndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETBitAndExpression
		public RuleCall getRightETBitAndExpressionParserRuleCall_1_1_0() { return cRightETBitAndExpressionParserRuleCall_1_1_0; }
	}

	public class ETBitAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBitAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cETBitAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETBitAndExpression returns ETExpression:
		//	ETEqualityExpression (({ETBitAndExpression.left=current} "&") right=ETEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//ETEqualityExpression (({ETBitAndExpression.left=current} "&") right=ETEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//ETEqualityExpression
		public RuleCall getETEqualityExpressionParserRuleCall_0() { return cETEqualityExpressionParserRuleCall_0; }

		//(({ETBitAndExpression.left=current} "&") right=ETEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETBitAndExpression.left=current} "&"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETBitAndExpression.left=current}
		public Action getETBitAndExpressionLeftAction_1_0_0() { return cETBitAndExpressionLeftAction_1_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }

		//right=ETEqualityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETEqualityExpression
		public RuleCall getRightETEqualityExpressionParserRuleCall_1_1_0() { return cRightETEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class ETEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETInequalityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETEqualExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETUnequalExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETInequalityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETEqualityExpression returns ETExpression:
		//	ETInequalityExpression (({ETEqualExpression.left=current} "==" | {ETUnequalExpression.left=current} "!=")
		//	right=ETInequalityExpression)*;
		public ParserRule getRule() { return rule; }

		//ETInequalityExpression (({ETEqualExpression.left=current} "==" | {ETUnequalExpression.left=current} "!=")
		//right=ETInequalityExpression)*
		public Group getGroup() { return cGroup; }

		//ETInequalityExpression
		public RuleCall getETInequalityExpressionParserRuleCall_0() { return cETInequalityExpressionParserRuleCall_0; }

		//(({ETEqualExpression.left=current} "==" | {ETUnequalExpression.left=current} "!=") right=ETInequalityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETEqualExpression.left=current} "==" | {ETUnequalExpression.left=current} "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETEqualExpression.left=current} "=="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETEqualExpression.left=current}
		public Action getETEqualExpressionLeftAction_1_0_0_0() { return cETEqualExpressionLeftAction_1_0_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }

		//{ETUnequalExpression.left=current} "!="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETUnequalExpression.left=current}
		public Action getETUnequalExpressionLeftAction_1_0_1_0() { return cETUnequalExpressionLeftAction_1_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }

		//right=ETInequalityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETInequalityExpression
		public RuleCall getRightETInequalityExpressionParserRuleCall_1_1_0() { return cRightETInequalityExpressionParserRuleCall_1_1_0; }
	}

	public class ETInequalityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETInequalityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETLessExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETLessEqualExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cETGreaterEqualExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cETGreaterExpressionLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETMinMaxExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETInequalityExpression returns ETExpression:
		//	ETMinMaxExpression (({ETLessExpression.left=current} "<" | {ETLessEqualExpression.left=current} "<=" |
		//	{ETGreaterEqualExpression.left=current} ">=" | {ETGreaterExpression.left=current} ">") right=ETMinMaxExpression)*;
		public ParserRule getRule() { return rule; }

		//ETMinMaxExpression (({ETLessExpression.left=current} "<" | {ETLessEqualExpression.left=current} "<=" |
		//{ETGreaterEqualExpression.left=current} ">=" | {ETGreaterExpression.left=current} ">") right=ETMinMaxExpression)*
		public Group getGroup() { return cGroup; }

		//ETMinMaxExpression
		public RuleCall getETMinMaxExpressionParserRuleCall_0() { return cETMinMaxExpressionParserRuleCall_0; }

		//(({ETLessExpression.left=current} "<" | {ETLessEqualExpression.left=current} "<=" |
		//{ETGreaterEqualExpression.left=current} ">=" | {ETGreaterExpression.left=current} ">") right=ETMinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETLessExpression.left=current} "<" | {ETLessEqualExpression.left=current} "<=" |
		//{ETGreaterEqualExpression.left=current} ">=" | {ETGreaterExpression.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETLessExpression.left=current} "<"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETLessExpression.left=current}
		public Action getETLessExpressionLeftAction_1_0_0_0() { return cETLessExpressionLeftAction_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }

		//{ETLessEqualExpression.left=current} "<="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETLessEqualExpression.left=current}
		public Action getETLessEqualExpressionLeftAction_1_0_1_0() { return cETLessEqualExpressionLeftAction_1_0_1_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }

		//{ETGreaterEqualExpression.left=current} ">="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{ETGreaterEqualExpression.left=current}
		public Action getETGreaterEqualExpressionLeftAction_1_0_2_0() { return cETGreaterEqualExpressionLeftAction_1_0_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_2_1; }

		//{ETGreaterExpression.left=current} ">"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{ETGreaterExpression.left=current}
		public Action getETGreaterExpressionLeftAction_1_0_3_0() { return cETGreaterExpressionLeftAction_1_0_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_3_1() { return cGreaterThanSignKeyword_1_0_3_1; }

		//right=ETMinMaxExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETMinMaxExpression
		public RuleCall getRightETMinMaxExpressionParserRuleCall_1_1_0() { return cRightETMinMaxExpressionParserRuleCall_1_1_0; }
	}

	public class ETMinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETMinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETBitLeftBRightExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETMinExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETMaxExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignQuestionMarkKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETBitLeftBRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETMinMaxExpression returns ETExpression:
		//	ETBitLeftBRightExpression (({ETMinExpression.left=current} "<?" | {ETMaxExpression.left=current} ">?")
		//	right=ETBitLeftBRightExpression)*;
		public ParserRule getRule() { return rule; }

		//ETBitLeftBRightExpression (({ETMinExpression.left=current} "<?" | {ETMaxExpression.left=current} ">?")
		//right=ETBitLeftBRightExpression)*
		public Group getGroup() { return cGroup; }

		//ETBitLeftBRightExpression
		public RuleCall getETBitLeftBRightExpressionParserRuleCall_0() { return cETBitLeftBRightExpressionParserRuleCall_0; }

		//(({ETMinExpression.left=current} "<?" | {ETMaxExpression.left=current} ">?") right=ETBitLeftBRightExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETMinExpression.left=current} "<?" | {ETMaxExpression.left=current} ">?"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETMinExpression.left=current} "<?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETMinExpression.left=current}
		public Action getETMinExpressionLeftAction_1_0_0_0() { return cETMinExpressionLeftAction_1_0_0_0; }

		//"<?"
		public Keyword getLessThanSignQuestionMarkKeyword_1_0_0_1() { return cLessThanSignQuestionMarkKeyword_1_0_0_1; }

		//{ETMaxExpression.left=current} ">?"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETMaxExpression.left=current}
		public Action getETMaxExpressionLeftAction_1_0_1_0() { return cETMaxExpressionLeftAction_1_0_1_0; }

		//">?"
		public Keyword getGreaterThanSignQuestionMarkKeyword_1_0_1_1() { return cGreaterThanSignQuestionMarkKeyword_1_0_1_1; }

		//right=ETBitLeftBRightExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETBitLeftBRightExpression
		public RuleCall getRightETBitLeftBRightExpressionParserRuleCall_1_1_0() { return cRightETBitLeftBRightExpressionParserRuleCall_1_1_0; }
	}

	public class ETBitLeftBRightExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBitLeftBRightExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETBitLeftExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETBitRightExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETBitLeftBRightExpression returns ETExpression:
		//	ETAdditiveExpression (({ETBitLeftExpression.left=current} "<<" | {ETBitRightExpression.left=current} ">>")
		//	right=ETAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//ETAdditiveExpression (({ETBitLeftExpression.left=current} "<<" | {ETBitRightExpression.left=current} ">>")
		//right=ETAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//ETAdditiveExpression
		public RuleCall getETAdditiveExpressionParserRuleCall_0() { return cETAdditiveExpressionParserRuleCall_0; }

		//(({ETBitLeftExpression.left=current} "<<" | {ETBitRightExpression.left=current} ">>") right=ETAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETBitLeftExpression.left=current} "<<" | {ETBitRightExpression.left=current} ">>"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETBitLeftExpression.left=current} "<<"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETBitLeftExpression.left=current}
		public Action getETBitLeftExpressionLeftAction_1_0_0_0() { return cETBitLeftExpressionLeftAction_1_0_0_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0_1() { return cLessThanSignLessThanSignKeyword_1_0_0_1; }

		//{ETBitRightExpression.left=current} ">>"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETBitRightExpression.left=current}
		public Action getETBitRightExpressionLeftAction_1_0_1_0() { return cETBitRightExpressionLeftAction_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignGreaterThanSignKeyword_1_0_1_1; }

		//right=ETAdditiveExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETAdditiveExpression
		public RuleCall getRightETAdditiveExpressionParserRuleCall_1_1_0() { return cRightETAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class ETAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETAddExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETSubtractExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETAdditiveExpression returns ETExpression:
		//	ETMultiplicativeExpression (({ETAddExpression.left=current} "+" | {ETSubtractExpression.left=current} "-")
		//	right=ETMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//ETMultiplicativeExpression (({ETAddExpression.left=current} "+" | {ETSubtractExpression.left=current} "-")
		//right=ETMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//ETMultiplicativeExpression
		public RuleCall getETMultiplicativeExpressionParserRuleCall_0() { return cETMultiplicativeExpressionParserRuleCall_0; }

		//(({ETAddExpression.left=current} "+" | {ETSubtractExpression.left=current} "-") right=ETMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETAddExpression.left=current} "+" | {ETSubtractExpression.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETAddExpression.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETAddExpression.left=current}
		public Action getETAddExpressionLeftAction_1_0_0_0() { return cETAddExpressionLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{ETSubtractExpression.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETSubtractExpression.left=current}
		public Action getETSubtractExpressionLeftAction_1_0_1_0() { return cETSubtractExpressionLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=ETMultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETMultiplicativeExpression
		public RuleCall getRightETMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightETMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class ETMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETPrefixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETMultiplyExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETDivideExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cETModuloExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightETPrefixExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//ETMultiplicativeExpression returns ETExpression:
		//	ETPrefixExpression (({ETMultiplyExpression.left=current} "*" | {ETDivideExpression.left=current} "/" |
		//	{ETModuloExpression.left=current} "%") right=ETPrefixExpression)*;
		public ParserRule getRule() { return rule; }

		//ETPrefixExpression (({ETMultiplyExpression.left=current} "*" | {ETDivideExpression.left=current} "/" |
		//{ETModuloExpression.left=current} "%") right=ETPrefixExpression)*
		public Group getGroup() { return cGroup; }

		//ETPrefixExpression
		public RuleCall getETPrefixExpressionParserRuleCall_0() { return cETPrefixExpressionParserRuleCall_0; }

		//(({ETMultiplyExpression.left=current} "*" | {ETDivideExpression.left=current} "/" | {ETModuloExpression.left=current}
		//"%") right=ETPrefixExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ETMultiplyExpression.left=current} "*" | {ETDivideExpression.left=current} "/" | {ETModuloExpression.left=current} "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETMultiplyExpression.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETMultiplyExpression.left=current}
		public Action getETMultiplyExpressionLeftAction_1_0_0_0() { return cETMultiplyExpressionLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{ETDivideExpression.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETDivideExpression.left=current}
		public Action getETDivideExpressionLeftAction_1_0_1_0() { return cETDivideExpressionLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//{ETModuloExpression.left=current} "%"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{ETModuloExpression.left=current}
		public Action getETModuloExpressionLeftAction_1_0_2_0() { return cETModuloExpressionLeftAction_1_0_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }

		//right=ETPrefixExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ETPrefixExpression
		public RuleCall getRightETPrefixExpressionParserRuleCall_1_1_0() { return cRightETPrefixExpressionParserRuleCall_1_1_0; }
	}

	public class ETPrefixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETPrefixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETPreIncrementExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETPreDecrementExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionETPrefixExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//// unary right
		//ETPrefixExpression returns ETExpression:
		//	ETUnaryExpression | ({ETPreIncrementExpression} "++" | {ETPreDecrementExpression} "--") expression=ETPrefixExpression;
		public ParserRule getRule() { return rule; }

		//ETUnaryExpression | ({ETPreIncrementExpression} "++" | {ETPreDecrementExpression} "--") expression=ETPrefixExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETUnaryExpression
		public RuleCall getETUnaryExpressionParserRuleCall_0() { return cETUnaryExpressionParserRuleCall_0; }

		//({ETPreIncrementExpression} "++" | {ETPreDecrementExpression} "--") expression=ETPrefixExpression
		public Group getGroup_1() { return cGroup_1; }

		//{ETPreIncrementExpression} "++" | {ETPreDecrementExpression} "--"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETPreIncrementExpression} "++"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETPreIncrementExpression}
		public Action getETPreIncrementExpressionAction_1_0_0_0() { return cETPreIncrementExpressionAction_1_0_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_0_1() { return cPlusSignPlusSignKeyword_1_0_0_1; }

		//{ETPreDecrementExpression} "--"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETPreDecrementExpression}
		public Action getETPreDecrementExpressionAction_1_0_1_0() { return cETPreDecrementExpressionAction_1_0_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusHyphenMinusKeyword_1_0_1_1; }

		//expression=ETPrefixExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//ETPrefixExpression
		public RuleCall getExpressionETPrefixExpressionParserRuleCall_1_1_0() { return cExpressionETPrefixExpressionParserRuleCall_1_1_0; }
	}

	public class ETUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cETLogicNotExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cETMinusExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionETUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//// unary right
		//ETUnaryExpression returns ETExpression:
		//	ETPostfixExpression | ({ETLogicNotExpression} "!" | {ETMinusExpression} "-") expression=ETUnaryExpression;
		public ParserRule getRule() { return rule; }

		//ETPostfixExpression | ({ETLogicNotExpression} "!" | {ETMinusExpression} "-") expression=ETUnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETPostfixExpression
		public RuleCall getETPostfixExpressionParserRuleCall_0() { return cETPostfixExpressionParserRuleCall_0; }

		//({ETLogicNotExpression} "!" | {ETMinusExpression} "-") expression=ETUnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{ETLogicNotExpression} "!" | {ETMinusExpression} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ETLogicNotExpression} "!"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ETLogicNotExpression}
		public Action getETLogicNotExpressionAction_1_0_0_0() { return cETLogicNotExpressionAction_1_0_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0_0_1() { return cExclamationMarkKeyword_1_0_0_1; }

		//{ETMinusExpression} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ETMinusExpression}
		public Action getETMinusExpressionAction_1_0_1_0() { return cETMinusExpressionAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//expression=ETUnaryExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//ETUnaryExpression
		public RuleCall getExpressionETUnaryExpressionParserRuleCall_1_1_0() { return cExpressionETUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class ETPostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETPostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETArrayExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cETPostIncrementExpressionExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cETPostDecrementExpressionExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// unary left
		//ETPostfixExpression returns ETExpression:
		//	ETArrayExpression ({ETPostIncrementExpression.expression=current} "++" |
		//	{ETPostDecrementExpression.expression=current} "--")*;
		public ParserRule getRule() { return rule; }

		//ETArrayExpression ({ETPostIncrementExpression.expression=current} "++" | {ETPostDecrementExpression.expression=current}
		//"--")*
		public Group getGroup() { return cGroup; }

		//ETArrayExpression
		public RuleCall getETArrayExpressionParserRuleCall_0() { return cETArrayExpressionParserRuleCall_0; }

		//({ETPostIncrementExpression.expression=current} "++" | {ETPostDecrementExpression.expression=current} "--")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{ETPostIncrementExpression.expression=current} "++"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ETPostIncrementExpression.expression=current}
		public Action getETPostIncrementExpressionExpressionAction_1_0_0() { return cETPostIncrementExpressionExpressionAction_1_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_1() { return cPlusSignPlusSignKeyword_1_0_1; }

		//{ETPostDecrementExpression.expression=current} "--"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ETPostDecrementExpression.expression=current}
		public Action getETPostDecrementExpressionExpressionAction_1_1_0() { return cETPostDecrementExpressionExpressionAction_1_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }
	}

	public class ETArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cETPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cETArrayExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightETExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// left
		//ETArrayExpression returns ETExpression:
		//	ETPrimaryExpression ({ETArrayExpression.left=current} "[" right=ETExpression "]")*;
		public ParserRule getRule() { return rule; }

		//ETPrimaryExpression ({ETArrayExpression.left=current} "[" right=ETExpression "]")*
		public Group getGroup() { return cGroup; }

		//ETPrimaryExpression
		public RuleCall getETPrimaryExpressionParserRuleCall_0() { return cETPrimaryExpressionParserRuleCall_0; }

		//({ETArrayExpression.left=current} "[" right=ETExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//{ETArrayExpression.left=current}
		public Action getETArrayExpressionLeftAction_1_0() { return cETArrayExpressionLeftAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//right=ETExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ETExpression
		public RuleCall getRightETExpressionParserRuleCall_1_2_0() { return cRightETExpressionParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class ETPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cETBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cETParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ETPrimaryExpression returns ETExpression:
		//	ETReference | ETNumberLiteral | ETBooleanLiteral | ETParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//ETReference | ETNumberLiteral | ETBooleanLiteral | ETParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ETReference
		public RuleCall getETReferenceParserRuleCall_0() { return cETReferenceParserRuleCall_0; }

		//ETNumberLiteral
		public RuleCall getETNumberLiteralParserRuleCall_1() { return cETNumberLiteralParserRuleCall_1; }

		//ETBooleanLiteral
		public RuleCall getETBooleanLiteralParserRuleCall_2() { return cETBooleanLiteralParserRuleCall_2; }

		//ETParenthesizedExpression
		public RuleCall getETParenthesizedExpressionParserRuleCall_3() { return cETParenthesizedExpressionParserRuleCall_3; }
	}

	public class ETReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetEObjectCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetEObjectCrossReference_1_0.eContents().get(1);
		
		/// * NOTE:
		// * - member access handled by ID terminal
		// * - reference restricted by scoping rules,
		// *   depending on use (update, guard, etc.)
		// * - local variable, global variable,
		// *   global type, parameter
		// * / ETReference returns ETExpression:
		//	{ETReference} target=[ecore::EObject];
		public ParserRule getRule() { return rule; }

		//{ETReference} target=[ecore::EObject]
		public Group getGroup() { return cGroup; }

		//{ETReference}
		public Action getETReferenceAction_0() { return cETReferenceAction_0; }

		//target=[ecore::EObject]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[ecore::EObject]
		public CrossReference getTargetEObjectCrossReference_1_0() { return cTargetEObjectCrossReference_1_0; }

		//ID
		public RuleCall getTargetEObjectIDTerminalRuleCall_1_0_1() { return cTargetEObjectIDTerminalRuleCall_1_0_1; }
	}

	public class ETBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ETBooleanLiteral returns ETExpression:
		//	{ETBooleanLiteral} value=BOOL;
		public ParserRule getRule() { return rule; }

		//{ETBooleanLiteral} value=BOOL
		public Group getGroup() { return cGroup; }

		//{ETBooleanLiteral}
		public Action getETBooleanLiteralAction_0() { return cETBooleanLiteralAction_0; }

		//value=BOOL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_1_0() { return cValueBOOLParserRuleCall_1_0; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL returns ecore::EBooleanObject:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class ETNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cETNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ETNumberLiteral returns ETExpression:
		//	{ETNumberLiteral} value=INT;
		public ParserRule getRule() { return rule; }

		//{ETNumberLiteral} value=INT
		public Group getGroup() { return cGroup; }

		//{ETNumberLiteral}
		public Action getETNumberLiteralAction_0() { return cETNumberLiteralAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class ETParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ETParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cETExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ETParenthesizedExpression returns ETExpression:
		//	"(" ETExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ETExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ETExpression
		public RuleCall getETExpressionParserRuleCall_1() { return cETExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class ETIOTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ETIOType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTQuestionMarkKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTExclamationMarkKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ETIOType:
		//	INPUT="?" | OUTPUT="!";
		public EnumRule getRule() { return rule; }

		//INPUT="?" | OUTPUT="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INPUT="?"
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }

		//"?"
		public Keyword getINPUTQuestionMarkKeyword_0_0() { return cINPUTQuestionMarkKeyword_0_0; }

		//OUTPUT="!"
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }

		//"!"
		public Keyword getOUTPUTExclamationMarkKeyword_1_0() { return cOUTPUTExclamationMarkKeyword_1_0; }
	}
	
	private ETFileElements pETFile;
	private ETImportElements pETImport;
	private ETArrayDeclarationElements pETArrayDeclaration;
	private ETDeclarationsElements pETDeclarations;
	private ETDeclarationElements pETDeclaration;
	private ETTypeElements pETType;
	private ETTypeModifiersElements pETTypeModifiers;
	private ETVariableDeclarationElements pETVariableDeclaration;
	private ETVariableIDElements pETVariableID;
	private ETInitialiserElements pETInitialiser;
	private ETSingleInitialiserElements pETSingleInitialiser;
	private ETMultiInitialiserElements pETMultiInitialiser;
	private ETTypeDeclarationElements pETTypeDeclaration;
	private ETTypeIDElements pETTypeID;
	private ETTypeIdentifierElements pETTypeIdentifier;
	private ETIntegerTypeElements pETIntegerType;
	private ETClockTypeElements pETClockType;
	private ETActionTypeElements pETActionType;
	private ETInputTypeElements pETInputType;
	private ETOutputTypeElements pETOutputType;
	private ETBooleanTypeElements pETBooleanType;
	private ETScalarTypeElements pETScalarType;
	private ETStructTypeElements pETStructType;
	private ETFieldDeclarationElements pETFieldDeclaration;
	private ETFieldIDElements pETFieldID;
	private ETSpecificationExpressionElements pETSpecificationExpression;
	private ETSpecificationDisjunctionExpressionElements pETSpecificationDisjunctionExpression;
	private ETSpecificationCompositionExpressionElements pETSpecificationCompositionExpression;
	private ETPrimarySpecificationExpressionElements pETPrimarySpecificationExpression;
	private ETSpecificationReferenceElements pETSpecificationReference;
	private ETSpecificationInstantiationElements pETSpecificationInstantiation;
	private ETSpecificationElements pETSpecification;
	private ETSpecificationBindingElements pETSpecificationBinding;
	private ETSpecificationDefinitionElements pETSpecificationDefinition;
	private ETSpecificationTemplateElements pETSpecificationTemplate;
	private ETSpecificationBodyElements pETSpecificationBody;
	private ETParameterElements pETParameter;
	private ETLocationElements pETLocation;
	private ETEdgeElements pETEdge;
	private ETIOElements pETIO;
	private ETIOTypeElements unknownRuleETIOType;
	private ETSelectElements pETSelect;
	private ETExpressionElements pETExpression;
	private ETImplyLogicOrExpressionElements pETImplyLogicOrExpression;
	private ETLogicAndExpression1Elements pETLogicAndExpression1;
	private ETLogicNotExpression1Elements pETLogicNotExpression1;
	private ETAssignmentExpressionElements pETAssignmentExpression;
	private ETConditionalExpressionElements pETConditionalExpression;
	private ETLogicOrExpression2Elements pETLogicOrExpression2;
	private ETLogicAndExpression2Elements pETLogicAndExpression2;
	private ETBitOrExpressionElements pETBitOrExpression;
	private ETBitXORExpressionElements pETBitXORExpression;
	private ETBitAndExpressionElements pETBitAndExpression;
	private ETEqualityExpressionElements pETEqualityExpression;
	private ETInequalityExpressionElements pETInequalityExpression;
	private ETMinMaxExpressionElements pETMinMaxExpression;
	private ETBitLeftBRightExpressionElements pETBitLeftBRightExpression;
	private ETAdditiveExpressionElements pETAdditiveExpression;
	private ETMultiplicativeExpressionElements pETMultiplicativeExpression;
	private ETPrefixExpressionElements pETPrefixExpression;
	private ETUnaryExpressionElements pETUnaryExpression;
	private ETPostfixExpressionElements pETPostfixExpression;
	private ETArrayExpressionElements pETArrayExpression;
	private ETPrimaryExpressionElements pETPrimaryExpression;
	private ETReferenceElements pETReference;
	private ETBooleanLiteralElements pETBooleanLiteral;
	private BOOLElements pBOOL;
	private ETNumberLiteralElements pETNumberLiteral;
	private ETParenthesizedExpressionElements pETParenthesizedExpression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EcdarTextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.ecdar.text.EcdarText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// TODO: assertions+=Assertion*
	//ETFile: // NOTE: instantiation important serialization of empty files
	//	{ETFile} imports+=ETImport* // NOTE: instantiated, but optional
	//	declarations=ETDeclarations specifications+=ETSpecification*;
	public ETFileElements getETFileAccess() {
		return (pETFile != null) ? pETFile : (pETFile = new ETFileElements());
	}
	
	public ParserRule getETFileRule() {
		return getETFileAccess().getRule();
	}

	//ETImport:
	//	"import" importedNamespace=ID;
	public ETImportElements getETImportAccess() {
		return (pETImport != null) ? pETImport : (pETImport = new ETImportElements());
	}
	
	public ParserRule getETImportRule() {
		return getETImportAccess().getRule();
	}

	/// *
	// * Modified UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Declarations.shtml)
	// *
	// * - removed channels
	// * - added actions
	// * / ETArrayDeclaration:
	//	"[" size=ETExpression "]";
	public ETArrayDeclarationElements getETArrayDeclarationAccess() {
		return (pETArrayDeclaration != null) ? pETArrayDeclaration : (pETArrayDeclaration = new ETArrayDeclarationElements());
	}
	
	public ParserRule getETArrayDeclarationRule() {
		return getETArrayDeclarationAccess().getRule();
	}

	//ETDeclarations:
	//	{ETDeclarations} (declarations+=ETDeclaration (";" declarations+=ETDeclaration)* ";"?)?;
	public ETDeclarationsElements getETDeclarationsAccess() {
		return (pETDeclarations != null) ? pETDeclarations : (pETDeclarations = new ETDeclarationsElements());
	}
	
	public ParserRule getETDeclarationsRule() {
		return getETDeclarationsAccess().getRule();
	}

	//ETDeclaration:
	//	ETVariableDeclaration | ETTypeDeclaration;
	public ETDeclarationElements getETDeclarationAccess() {
		return (pETDeclaration != null) ? pETDeclaration : (pETDeclaration = new ETDeclarationElements());
	}
	
	public ParserRule getETDeclarationRule() {
		return getETDeclarationAccess().getRule();
	}

	//ETType:
	//	modifiers=ETTypeModifiers identifier=ETTypeIdentifier;
	public ETTypeElements getETTypeAccess() {
		return (pETType != null) ? pETType : (pETType = new ETTypeElements());
	}
	
	public ParserRule getETTypeRule() {
		return getETTypeAccess().getRule();
	}

	//ETTypeModifiers:
	//	{ETTypeModifiers} (urgent?="urgent"? & meta?="meta"? & const?="const"?);
	public ETTypeModifiersElements getETTypeModifiersAccess() {
		return (pETTypeModifiers != null) ? pETTypeModifiers : (pETTypeModifiers = new ETTypeModifiersElements());
	}
	
	public ParserRule getETTypeModifiersRule() {
		return getETTypeModifiersAccess().getRule();
	}

	//ETVariableDeclaration:
	//	type=ETType variables+=ETVariableID ("," variables+=ETVariableID)*;
	public ETVariableDeclarationElements getETVariableDeclarationAccess() {
		return (pETVariableDeclaration != null) ? pETVariableDeclaration : (pETVariableDeclaration = new ETVariableDeclarationElements());
	}
	
	public ParserRule getETVariableDeclarationRule() {
		return getETVariableDeclarationAccess().getRule();
	}

	//ETVariableID:
	//	name=ID // NOTE: workaround for in-/outputs, ignored
	//	ioType=("!" | "?")? dimensions+=ETArrayDeclaration* ("=" initialiser=ETInitialiser)?;
	public ETVariableIDElements getETVariableIDAccess() {
		return (pETVariableID != null) ? pETVariableID : (pETVariableID = new ETVariableIDElements());
	}
	
	public ParserRule getETVariableIDRule() {
		return getETVariableIDAccess().getRule();
	}

	//ETInitialiser:
	//	ETSingleInitialiser | ETMultiInitialiser;
	public ETInitialiserElements getETInitialiserAccess() {
		return (pETInitialiser != null) ? pETInitialiser : (pETInitialiser = new ETInitialiserElements());
	}
	
	public ParserRule getETInitialiserRule() {
		return getETInitialiserAccess().getRule();
	}

	//ETSingleInitialiser:
	//	expression=ETExpression;
	public ETSingleInitialiserElements getETSingleInitialiserAccess() {
		return (pETSingleInitialiser != null) ? pETSingleInitialiser : (pETSingleInitialiser = new ETSingleInitialiserElements());
	}
	
	public ParserRule getETSingleInitialiserRule() {
		return getETSingleInitialiserAccess().getRule();
	}

	//ETMultiInitialiser:
	//	"{" initialisers+=ETInitialiser ("," initialisers+=ETInitialiser)* "}";
	public ETMultiInitialiserElements getETMultiInitialiserAccess() {
		return (pETMultiInitialiser != null) ? pETMultiInitialiser : (pETMultiInitialiser = new ETMultiInitialiserElements());
	}
	
	public ParserRule getETMultiInitialiserRule() {
		return getETMultiInitialiserAccess().getRule();
	}

	//ETTypeDeclaration:
	//	"typedef" baseType=ETType types+=ETTypeID ("," types+=ETTypeID)*;
	public ETTypeDeclarationElements getETTypeDeclarationAccess() {
		return (pETTypeDeclaration != null) ? pETTypeDeclaration : (pETTypeDeclaration = new ETTypeDeclarationElements());
	}
	
	public ParserRule getETTypeDeclarationRule() {
		return getETTypeDeclarationAccess().getRule();
	}

	//ETTypeID:
	//	name=ID dimensions+=ETArrayDeclaration*;
	public ETTypeIDElements getETTypeIDAccess() {
		return (pETTypeID != null) ? pETTypeID : (pETTypeID = new ETTypeIDElements());
	}
	
	public ParserRule getETTypeIDRule() {
		return getETTypeIDAccess().getRule();
	}

	//ETTypeIdentifier:
	//	ETIntegerType | ETClockType | ETActionType | ETBooleanType | ETScalarType | ETStructType | {ETTypeReference}
	//	target=[ETTypeID];
	public ETTypeIdentifierElements getETTypeIdentifierAccess() {
		return (pETTypeIdentifier != null) ? pETTypeIdentifier : (pETTypeIdentifier = new ETTypeIdentifierElements());
	}
	
	public ParserRule getETTypeIdentifierRule() {
		return getETTypeIdentifierAccess().getRule();
	}

	//ETIntegerType:
	//	{ETIntegerType} "int" ("[" min=ETExpression "," max=ETExpression "]")?;
	public ETIntegerTypeElements getETIntegerTypeAccess() {
		return (pETIntegerType != null) ? pETIntegerType : (pETIntegerType = new ETIntegerTypeElements());
	}
	
	public ParserRule getETIntegerTypeRule() {
		return getETIntegerTypeAccess().getRule();
	}

	//ETClockType:
	//	{ETClockType} "clock";
	public ETClockTypeElements getETClockTypeAccess() {
		return (pETClockType != null) ? pETClockType : (pETClockType = new ETClockTypeElements());
	}
	
	public ParserRule getETClockTypeRule() {
		return getETClockTypeAccess().getRule();
	}

	//ETActionType:
	//	ETInputType | ETOutputType | {ETActionType} "action";
	public ETActionTypeElements getETActionTypeAccess() {
		return (pETActionType != null) ? pETActionType : (pETActionType = new ETActionTypeElements());
	}
	
	public ParserRule getETActionTypeRule() {
		return getETActionTypeAccess().getRule();
	}

	//ETInputType:
	//	{ETInputType} "input";
	public ETInputTypeElements getETInputTypeAccess() {
		return (pETInputType != null) ? pETInputType : (pETInputType = new ETInputTypeElements());
	}
	
	public ParserRule getETInputTypeRule() {
		return getETInputTypeAccess().getRule();
	}

	//ETOutputType:
	//	{ETOutputType} "output";
	public ETOutputTypeElements getETOutputTypeAccess() {
		return (pETOutputType != null) ? pETOutputType : (pETOutputType = new ETOutputTypeElements());
	}
	
	public ParserRule getETOutputTypeRule() {
		return getETOutputTypeAccess().getRule();
	}

	//ETBooleanType:
	//	{ETBooleanType} "bool";
	public ETBooleanTypeElements getETBooleanTypeAccess() {
		return (pETBooleanType != null) ? pETBooleanType : (pETBooleanType = new ETBooleanTypeElements());
	}
	
	public ParserRule getETBooleanTypeRule() {
		return getETBooleanTypeAccess().getRule();
	}

	//ETScalarType:
	//	{ETScalarType} "scalar" "[" size=ETExpression "]";
	public ETScalarTypeElements getETScalarTypeAccess() {
		return (pETScalarType != null) ? pETScalarType : (pETScalarType = new ETScalarTypeElements());
	}
	
	public ParserRule getETScalarTypeRule() {
		return getETScalarTypeAccess().getRule();
	}

	//ETStructType:
	//	{ETStructType} "struct" "{" declarations+=ETFieldDeclaration (";" declarations+=ETFieldDeclaration)* ";"? "}";
	public ETStructTypeElements getETStructTypeAccess() {
		return (pETStructType != null) ? pETStructType : (pETStructType = new ETStructTypeElements());
	}
	
	public ParserRule getETStructTypeRule() {
		return getETStructTypeAccess().getRule();
	}

	//ETFieldDeclaration:
	//	type=ETType fields+=ETFieldID ("," fields+=ETFieldID)*;
	public ETFieldDeclarationElements getETFieldDeclarationAccess() {
		return (pETFieldDeclaration != null) ? pETFieldDeclaration : (pETFieldDeclaration = new ETFieldDeclarationElements());
	}
	
	public ParserRule getETFieldDeclarationRule() {
		return getETFieldDeclarationAccess().getRule();
	}

	//ETFieldID:
	//	name=ID dimensions+=ETArrayDeclaration*;
	public ETFieldIDElements getETFieldIDAccess() {
		return (pETFieldID != null) ? pETFieldID : (pETFieldID = new ETFieldIDElements());
	}
	
	public ParserRule getETFieldIDRule() {
		return getETFieldIDAccess().getRule();
	}

	////// Specification expression
	//// left
	//ETSpecificationExpression:
	//	ETSpecificationDisjunctionExpression ({ETSpecificationDisjunctionExpression.left=current} "||"
	//	right=ETSpecificationDisjunctionExpression)*;
	public ETSpecificationExpressionElements getETSpecificationExpressionAccess() {
		return (pETSpecificationExpression != null) ? pETSpecificationExpression : (pETSpecificationExpression = new ETSpecificationExpressionElements());
	}
	
	public ParserRule getETSpecificationExpressionRule() {
		return getETSpecificationExpressionAccess().getRule();
	}

	//// left
	//ETSpecificationDisjunctionExpression returns ETSpecificationExpression:
	//	ETSpecificationCompositionExpression ({ETSpecificationConjunctionExpression.left=current} "&&"
	//	right=ETSpecificationCompositionExpression)*;
	public ETSpecificationDisjunctionExpressionElements getETSpecificationDisjunctionExpressionAccess() {
		return (pETSpecificationDisjunctionExpression != null) ? pETSpecificationDisjunctionExpression : (pETSpecificationDisjunctionExpression = new ETSpecificationDisjunctionExpressionElements());
	}
	
	public ParserRule getETSpecificationDisjunctionExpressionRule() {
		return getETSpecificationDisjunctionExpressionAccess().getRule();
	}

	//// left
	//ETSpecificationCompositionExpression returns ETSpecificationExpression:
	//	ETPrimarySpecificationExpression ({ETSpecificationCompositionExpression.left=current} "|"
	//	right=ETPrimarySpecificationExpression)*;
	public ETSpecificationCompositionExpressionElements getETSpecificationCompositionExpressionAccess() {
		return (pETSpecificationCompositionExpression != null) ? pETSpecificationCompositionExpression : (pETSpecificationCompositionExpression = new ETSpecificationCompositionExpressionElements());
	}
	
	public ParserRule getETSpecificationCompositionExpressionRule() {
		return getETSpecificationCompositionExpressionAccess().getRule();
	}

	//ETPrimarySpecificationExpression returns ETSpecificationExpression:
	//	ETSpecificationReference | ETSpecificationInstantiation | "(" ETSpecificationExpression ")";
	public ETPrimarySpecificationExpressionElements getETPrimarySpecificationExpressionAccess() {
		return (pETPrimarySpecificationExpression != null) ? pETPrimarySpecificationExpression : (pETPrimarySpecificationExpression = new ETPrimarySpecificationExpressionElements());
	}
	
	public ParserRule getETPrimarySpecificationExpressionRule() {
		return getETPrimarySpecificationExpressionAccess().getRule();
	}

	//ETSpecificationReference returns ETSpecificationExpression:
	//	{ETSpecificationReference} specification=[ETSpecification];
	public ETSpecificationReferenceElements getETSpecificationReferenceAccess() {
		return (pETSpecificationReference != null) ? pETSpecificationReference : (pETSpecificationReference = new ETSpecificationReferenceElements());
	}
	
	public ParserRule getETSpecificationReferenceRule() {
		return getETSpecificationReferenceAccess().getRule();
	}

	//ETSpecificationInstantiation returns ETSpecificationExpression:
	//	{ETSpecificationInstantiation} template=[ETSpecificationTemplate] "(" (arguments+=ETExpression (","
	//	arguments+=ETExpression)*)? ")";
	public ETSpecificationInstantiationElements getETSpecificationInstantiationAccess() {
		return (pETSpecificationInstantiation != null) ? pETSpecificationInstantiation : (pETSpecificationInstantiation = new ETSpecificationInstantiationElements());
	}
	
	public ParserRule getETSpecificationInstantiationRule() {
		return getETSpecificationInstantiationAccess().getRule();
	}

	////// Specification
	//ETSpecification:
	//	ETSpecificationBinding | ETSpecificationDefinition;
	public ETSpecificationElements getETSpecificationAccess() {
		return (pETSpecification != null) ? pETSpecification : (pETSpecification = new ETSpecificationElements());
	}
	
	public ParserRule getETSpecificationRule() {
		return getETSpecificationAccess().getRule();
	}

	//ETSpecificationBinding:
	//	"let" name=ID "=" expression=ETSpecificationExpression;
	public ETSpecificationBindingElements getETSpecificationBindingAccess() {
		return (pETSpecificationBinding != null) ? pETSpecificationBinding : (pETSpecificationBinding = new ETSpecificationBindingElements());
	}
	
	public ParserRule getETSpecificationBindingRule() {
		return getETSpecificationBindingAccess().getRule();
	}

	//ETSpecificationDefinition:
	//	ETSpecificationTemplate | {ETSpecificationDefinition} "spec" name=ID body=ETSpecificationBody;
	public ETSpecificationDefinitionElements getETSpecificationDefinitionAccess() {
		return (pETSpecificationDefinition != null) ? pETSpecificationDefinition : (pETSpecificationDefinition = new ETSpecificationDefinitionElements());
	}
	
	public ParserRule getETSpecificationDefinitionRule() {
		return getETSpecificationDefinitionAccess().getRule();
	}

	//ETSpecificationTemplate:
	//	{ETSpecificationTemplate} "template" name=ID "(" (parameters+=ETParameter ("," parameters+=ETParameter)*)? ")"
	//	body=ETSpecificationBody;
	public ETSpecificationTemplateElements getETSpecificationTemplateAccess() {
		return (pETSpecificationTemplate != null) ? pETSpecificationTemplate : (pETSpecificationTemplate = new ETSpecificationTemplateElements());
	}
	
	public ParserRule getETSpecificationTemplateRule() {
		return getETSpecificationTemplateAccess().getRule();
	}

	//ETSpecificationBody:
	//	"{" // NOTE: instantiated, but optional
	//	declarations=ETDeclarations // TODO: make 'initial' a modifier and all locations optional?
	//	"initial" initialLocation=ETLocation locations+=ETLocation* "}";
	public ETSpecificationBodyElements getETSpecificationBodyAccess() {
		return (pETSpecificationBody != null) ? pETSpecificationBody : (pETSpecificationBody = new ETSpecificationBodyElements());
	}
	
	public ParserRule getETSpecificationBodyRule() {
		return getETSpecificationBodyAccess().getRule();
	}

	//ETParameter:
	//	type=ETType name=ID dimensions+=ETArrayDeclaration*;
	public ETParameterElements getETParameterAccess() {
		return (pETParameter != null) ? pETParameter : (pETParameter = new ETParameterElements());
	}
	
	public ParserRule getETParameterRule() {
		return getETParameterAccess().getRule();
	}

	//ETLocation:
	//	(urgent?="urgent"? & universal?="universal"?) name=ID "{" ("invariant" invariants+=ETExpression (","
	//	invariants+=ETExpression)* ";")? (edges+=ETEdge (";" edges+=ETEdge)*)? "}";
	public ETLocationElements getETLocationAccess() {
		return (pETLocation != null) ? pETLocation : (pETLocation = new ETLocationElements());
	}
	
	public ParserRule getETLocationRule() {
		return getETLocationAccess().getRule();
	}

	//ETEdge:
	//	controllable?="controllable"? ("foreach" "(" selects+=ETSelect ("," selects+=ETSelect)* ")" "{" io=ETIO ":" ("if" "("
	//	guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto" target=[ETLocation]
	//	"}") "}" / * NOTE:
	//	 * 'then' suffix not possible in LL grammar,
	//	 * ETIO also expression!
	//	 * /
	//// TODO: how to avoid code duplication?
	//	| io=ETIO ":" ("if" "(" guard=ETExpression ")")? ("goto" target=[ETLocation] | "{" (updates+=ETExpression ";")* "goto"
	//	target=[ETLocation] "}"));
	public ETEdgeElements getETEdgeAccess() {
		return (pETEdge != null) ? pETEdge : (pETEdge = new ETEdgeElements());
	}
	
	public ParserRule getETEdgeRule() {
		return getETEdgeAccess().getRule();
	}

	//ETIO:
	//	expression=ETExpression type=ETIOType;
	public ETIOElements getETIOAccess() {
		return (pETIO != null) ? pETIO : (pETIO = new ETIOElements());
	}
	
	public ParserRule getETIORule() {
		return getETIOAccess().getRule();
	}

	//enum ETIOType:
	//	INPUT="?" | OUTPUT="!";
	public ETIOTypeElements getETIOTypeAccess() {
		return (unknownRuleETIOType != null) ? unknownRuleETIOType : (unknownRuleETIOType = new ETIOTypeElements());
	}
	
	public EnumRule getETIOTypeRule() {
		return getETIOTypeAccess().getRule();
	}

	//ETSelect:
	//	name=ID ":" type=ETType;
	public ETSelectElements getETSelectAccess() {
		return (pETSelect != null) ? pETSelect : (pETSelect = new ETSelectElements());
	}
	
	public ParserRule getETSelectRule() {
		return getETSelectAccess().getRule();
	}

	/// * TODO: refinement * / / *
	//Assertion:
	//	'assert:' (SpecificationAssertion | Consistency | Implementation | Control)
	//;
	//
	//SpecificationAssertion:
	//	'specification' expression=LogicalExpression
	//;
	//
	//Consistency:
	//	'consistent' expression=LogicalExpression
	//;
	//
	//Implementation:
	//	'implementation' expression=LogicalExpression
	//;
	//
	//Control:
	//	'control' expression=LogicalExpression
	//;
	// * / //// Expression
	/// *
	// * Same as UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Expressions.shtml)
	// * / // unary right
	//ETExpression:
	//	ETImplyLogicOrExpression | ({ETForallExpression} "forall" | {ETExistsExpression} "exists") "(" name=ID ":" type=ETType
	//	")" expression=ETExpression;
	public ETExpressionElements getETExpressionAccess() {
		return (pETExpression != null) ? pETExpression : (pETExpression = new ETExpressionElements());
	}
	
	public ParserRule getETExpressionRule() {
		return getETExpressionAccess().getRule();
	}

	//// left
	//ETImplyLogicOrExpression returns ETExpression:
	//	ETLogicAndExpression1 (({ETImplyExpression.left=current} "imply" | {ETLogicOrExpression.left=current} "or")
	//	right=ETLogicAndExpression1)*;
	public ETImplyLogicOrExpressionElements getETImplyLogicOrExpressionAccess() {
		return (pETImplyLogicOrExpression != null) ? pETImplyLogicOrExpression : (pETImplyLogicOrExpression = new ETImplyLogicOrExpressionElements());
	}
	
	public ParserRule getETImplyLogicOrExpressionRule() {
		return getETImplyLogicOrExpressionAccess().getRule();
	}

	//// left
	//ETLogicAndExpression1 returns ETExpression:
	//	ETLogicNotExpression1 (({ETLogicAndExpression.left=current} "and") right=ETLogicNotExpression1)*;
	public ETLogicAndExpression1Elements getETLogicAndExpression1Access() {
		return (pETLogicAndExpression1 != null) ? pETLogicAndExpression1 : (pETLogicAndExpression1 = new ETLogicAndExpression1Elements());
	}
	
	public ParserRule getETLogicAndExpression1Rule() {
		return getETLogicAndExpression1Access().getRule();
	}

	//// unary right
	//// TODO: causes duplicate method definition by Xtext
	////	| ({ETLogicNotExpression} 'not'
	////		expression=ETLogicNotExpression1)
	//ETLogicNotExpression1 returns ETExpression:
	//	ETAssignmentExpression;
	public ETLogicNotExpression1Elements getETLogicNotExpression1Access() {
		return (pETLogicNotExpression1 != null) ? pETLogicNotExpression1 : (pETLogicNotExpression1 = new ETLogicNotExpression1Elements());
	}
	
	public ParserRule getETLogicNotExpression1Rule() {
		return getETLogicNotExpression1Access().getRule();
	}

	//// right
	//ETAssignmentExpression returns ETExpression:
	//	ETConditionalExpression (({ETAssignmentExpression.left=current} "=" | {ETAssignmentExpression.left=current} ":=" |
	//	{ETAdditionAssignmentExpression.left=current} "+=" | {ETSubtractionAssignmentExpression.left=current} "-=" |
	//	{ETMultiplicationAssignmentExpression.left=current} "*=" | {ETDivisionAssignmentExpression.left=current} "/=" |
	//	{ETModuloAssignmentExpression.left=current} "%=" | {ETBitOrAssignmentExpression.left=current} "|=" |
	//	{ETBitAndAssignmentExpression.left=current} "&=" | {ETBitXORAssignmentExpression.left=current} "^=" |
	//	{ETBitLeftAssignmentExpression.left=current} "<<=" | {ETBitRightAssignmentExpression.left=current} ">>=")
	//	right=ETAssignmentExpression)?;
	public ETAssignmentExpressionElements getETAssignmentExpressionAccess() {
		return (pETAssignmentExpression != null) ? pETAssignmentExpression : (pETAssignmentExpression = new ETAssignmentExpressionElements());
	}
	
	public ParserRule getETAssignmentExpressionRule() {
		return getETAssignmentExpressionAccess().getRule();
	}

	//// right
	//ETConditionalExpression returns ETExpression:
	//	ETLogicOrExpression2 ({ETConditionalExpression.condition=current} "?" then=ETLogicOrExpression2 ":"
	//	else=ETConditionalExpression)?;
	public ETConditionalExpressionElements getETConditionalExpressionAccess() {
		return (pETConditionalExpression != null) ? pETConditionalExpression : (pETConditionalExpression = new ETConditionalExpressionElements());
	}
	
	public ParserRule getETConditionalExpressionRule() {
		return getETConditionalExpressionAccess().getRule();
	}

	//// left
	//ETLogicOrExpression2 returns ETExpression:
	//	ETLogicAndExpression2 (({ETLogicOrExpression.left=current} "||") right=ETLogicAndExpression2)*;
	public ETLogicOrExpression2Elements getETLogicOrExpression2Access() {
		return (pETLogicOrExpression2 != null) ? pETLogicOrExpression2 : (pETLogicOrExpression2 = new ETLogicOrExpression2Elements());
	}
	
	public ParserRule getETLogicOrExpression2Rule() {
		return getETLogicOrExpression2Access().getRule();
	}

	//// left
	//ETLogicAndExpression2 returns ETExpression:
	//	ETBitOrExpression (({ETLogicAndExpression.left=current} "&&") right=ETBitOrExpression)*;
	public ETLogicAndExpression2Elements getETLogicAndExpression2Access() {
		return (pETLogicAndExpression2 != null) ? pETLogicAndExpression2 : (pETLogicAndExpression2 = new ETLogicAndExpression2Elements());
	}
	
	public ParserRule getETLogicAndExpression2Rule() {
		return getETLogicAndExpression2Access().getRule();
	}

	//// left
	//ETBitOrExpression returns ETExpression:
	//	ETBitXORExpression (({ETBitOrExpression.left=current} "|") right=ETBitXORExpression)*;
	public ETBitOrExpressionElements getETBitOrExpressionAccess() {
		return (pETBitOrExpression != null) ? pETBitOrExpression : (pETBitOrExpression = new ETBitOrExpressionElements());
	}
	
	public ParserRule getETBitOrExpressionRule() {
		return getETBitOrExpressionAccess().getRule();
	}

	//// left
	//ETBitXORExpression returns ETExpression:
	//	ETBitAndExpression (({ETBitXORExpression.left=current} "^") right=ETBitAndExpression)*;
	public ETBitXORExpressionElements getETBitXORExpressionAccess() {
		return (pETBitXORExpression != null) ? pETBitXORExpression : (pETBitXORExpression = new ETBitXORExpressionElements());
	}
	
	public ParserRule getETBitXORExpressionRule() {
		return getETBitXORExpressionAccess().getRule();
	}

	//// left
	//ETBitAndExpression returns ETExpression:
	//	ETEqualityExpression (({ETBitAndExpression.left=current} "&") right=ETEqualityExpression)*;
	public ETBitAndExpressionElements getETBitAndExpressionAccess() {
		return (pETBitAndExpression != null) ? pETBitAndExpression : (pETBitAndExpression = new ETBitAndExpressionElements());
	}
	
	public ParserRule getETBitAndExpressionRule() {
		return getETBitAndExpressionAccess().getRule();
	}

	//// left
	//ETEqualityExpression returns ETExpression:
	//	ETInequalityExpression (({ETEqualExpression.left=current} "==" | {ETUnequalExpression.left=current} "!=")
	//	right=ETInequalityExpression)*;
	public ETEqualityExpressionElements getETEqualityExpressionAccess() {
		return (pETEqualityExpression != null) ? pETEqualityExpression : (pETEqualityExpression = new ETEqualityExpressionElements());
	}
	
	public ParserRule getETEqualityExpressionRule() {
		return getETEqualityExpressionAccess().getRule();
	}

	//// left
	//ETInequalityExpression returns ETExpression:
	//	ETMinMaxExpression (({ETLessExpression.left=current} "<" | {ETLessEqualExpression.left=current} "<=" |
	//	{ETGreaterEqualExpression.left=current} ">=" | {ETGreaterExpression.left=current} ">") right=ETMinMaxExpression)*;
	public ETInequalityExpressionElements getETInequalityExpressionAccess() {
		return (pETInequalityExpression != null) ? pETInequalityExpression : (pETInequalityExpression = new ETInequalityExpressionElements());
	}
	
	public ParserRule getETInequalityExpressionRule() {
		return getETInequalityExpressionAccess().getRule();
	}

	//// left
	//ETMinMaxExpression returns ETExpression:
	//	ETBitLeftBRightExpression (({ETMinExpression.left=current} "<?" | {ETMaxExpression.left=current} ">?")
	//	right=ETBitLeftBRightExpression)*;
	public ETMinMaxExpressionElements getETMinMaxExpressionAccess() {
		return (pETMinMaxExpression != null) ? pETMinMaxExpression : (pETMinMaxExpression = new ETMinMaxExpressionElements());
	}
	
	public ParserRule getETMinMaxExpressionRule() {
		return getETMinMaxExpressionAccess().getRule();
	}

	//// left
	//ETBitLeftBRightExpression returns ETExpression:
	//	ETAdditiveExpression (({ETBitLeftExpression.left=current} "<<" | {ETBitRightExpression.left=current} ">>")
	//	right=ETAdditiveExpression)*;
	public ETBitLeftBRightExpressionElements getETBitLeftBRightExpressionAccess() {
		return (pETBitLeftBRightExpression != null) ? pETBitLeftBRightExpression : (pETBitLeftBRightExpression = new ETBitLeftBRightExpressionElements());
	}
	
	public ParserRule getETBitLeftBRightExpressionRule() {
		return getETBitLeftBRightExpressionAccess().getRule();
	}

	//// left
	//ETAdditiveExpression returns ETExpression:
	//	ETMultiplicativeExpression (({ETAddExpression.left=current} "+" | {ETSubtractExpression.left=current} "-")
	//	right=ETMultiplicativeExpression)*;
	public ETAdditiveExpressionElements getETAdditiveExpressionAccess() {
		return (pETAdditiveExpression != null) ? pETAdditiveExpression : (pETAdditiveExpression = new ETAdditiveExpressionElements());
	}
	
	public ParserRule getETAdditiveExpressionRule() {
		return getETAdditiveExpressionAccess().getRule();
	}

	//// left
	//ETMultiplicativeExpression returns ETExpression:
	//	ETPrefixExpression (({ETMultiplyExpression.left=current} "*" | {ETDivideExpression.left=current} "/" |
	//	{ETModuloExpression.left=current} "%") right=ETPrefixExpression)*;
	public ETMultiplicativeExpressionElements getETMultiplicativeExpressionAccess() {
		return (pETMultiplicativeExpression != null) ? pETMultiplicativeExpression : (pETMultiplicativeExpression = new ETMultiplicativeExpressionElements());
	}
	
	public ParserRule getETMultiplicativeExpressionRule() {
		return getETMultiplicativeExpressionAccess().getRule();
	}

	//// unary right
	//ETPrefixExpression returns ETExpression:
	//	ETUnaryExpression | ({ETPreIncrementExpression} "++" | {ETPreDecrementExpression} "--") expression=ETPrefixExpression;
	public ETPrefixExpressionElements getETPrefixExpressionAccess() {
		return (pETPrefixExpression != null) ? pETPrefixExpression : (pETPrefixExpression = new ETPrefixExpressionElements());
	}
	
	public ParserRule getETPrefixExpressionRule() {
		return getETPrefixExpressionAccess().getRule();
	}

	//// unary right
	//ETUnaryExpression returns ETExpression:
	//	ETPostfixExpression | ({ETLogicNotExpression} "!" | {ETMinusExpression} "-") expression=ETUnaryExpression;
	public ETUnaryExpressionElements getETUnaryExpressionAccess() {
		return (pETUnaryExpression != null) ? pETUnaryExpression : (pETUnaryExpression = new ETUnaryExpressionElements());
	}
	
	public ParserRule getETUnaryExpressionRule() {
		return getETUnaryExpressionAccess().getRule();
	}

	//// unary left
	//ETPostfixExpression returns ETExpression:
	//	ETArrayExpression ({ETPostIncrementExpression.expression=current} "++" |
	//	{ETPostDecrementExpression.expression=current} "--")*;
	public ETPostfixExpressionElements getETPostfixExpressionAccess() {
		return (pETPostfixExpression != null) ? pETPostfixExpression : (pETPostfixExpression = new ETPostfixExpressionElements());
	}
	
	public ParserRule getETPostfixExpressionRule() {
		return getETPostfixExpressionAccess().getRule();
	}

	//// left
	//ETArrayExpression returns ETExpression:
	//	ETPrimaryExpression ({ETArrayExpression.left=current} "[" right=ETExpression "]")*;
	public ETArrayExpressionElements getETArrayExpressionAccess() {
		return (pETArrayExpression != null) ? pETArrayExpression : (pETArrayExpression = new ETArrayExpressionElements());
	}
	
	public ParserRule getETArrayExpressionRule() {
		return getETArrayExpressionAccess().getRule();
	}

	//ETPrimaryExpression returns ETExpression:
	//	ETReference | ETNumberLiteral | ETBooleanLiteral | ETParenthesizedExpression;
	public ETPrimaryExpressionElements getETPrimaryExpressionAccess() {
		return (pETPrimaryExpression != null) ? pETPrimaryExpression : (pETPrimaryExpression = new ETPrimaryExpressionElements());
	}
	
	public ParserRule getETPrimaryExpressionRule() {
		return getETPrimaryExpressionAccess().getRule();
	}

	/// * NOTE:
	// * - member access handled by ID terminal
	// * - reference restricted by scoping rules,
	// *   depending on use (update, guard, etc.)
	// * - local variable, global variable,
	// *   global type, parameter
	// * / ETReference returns ETExpression:
	//	{ETReference} target=[ecore::EObject];
	public ETReferenceElements getETReferenceAccess() {
		return (pETReference != null) ? pETReference : (pETReference = new ETReferenceElements());
	}
	
	public ParserRule getETReferenceRule() {
		return getETReferenceAccess().getRule();
	}

	//ETBooleanLiteral returns ETExpression:
	//	{ETBooleanLiteral} value=BOOL;
	public ETBooleanLiteralElements getETBooleanLiteralAccess() {
		return (pETBooleanLiteral != null) ? pETBooleanLiteral : (pETBooleanLiteral = new ETBooleanLiteralElements());
	}
	
	public ParserRule getETBooleanLiteralRule() {
		return getETBooleanLiteralAccess().getRule();
	}

	//BOOL returns ecore::EBooleanObject:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//ETNumberLiteral returns ETExpression:
	//	{ETNumberLiteral} value=INT;
	public ETNumberLiteralElements getETNumberLiteralAccess() {
		return (pETNumberLiteral != null) ? pETNumberLiteral : (pETNumberLiteral = new ETNumberLiteralElements());
	}
	
	public ParserRule getETNumberLiteralRule() {
		return getETNumberLiteralAccess().getRule();
	}

	//ETParenthesizedExpression returns ETExpression:
	//	"(" ETExpression ")";
	public ETParenthesizedExpressionElements getETParenthesizedExpressionAccess() {
		return (pETParenthesizedExpression != null) ? pETParenthesizedExpression : (pETParenthesizedExpression = new ETParenthesizedExpressionElements());
	}
	
	public ParserRule getETParenthesizedExpressionRule() {
		return getETParenthesizedExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
