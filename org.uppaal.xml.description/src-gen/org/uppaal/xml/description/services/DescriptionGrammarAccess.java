/*
* generated by Xtext
*/

package org.uppaal.xml.description.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DescriptionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Top");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSYSTEMKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUASystemDefinitionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDECLARATIONSKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUADeclarationsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPARAMSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cUAParametersParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cEXPRESSIONKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cUAExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSELECTKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cUASelectListParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cUPDATEKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cUAUpdateParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cSYNCKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cUASynchronisationParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		/// * NOTE:
		// * Rules/Names are prefixed with UA (UppAal) for convenience
		// * reasons to differentiate them from equal names in the ECDAR DSL.
		// * Otherwise, it's necessary to use fully qualified identifiers
		// * in code using both models, as neither Java nor Xtend support
		// * type/import aliasing yet. For Xtend, see:
		// * http://bugs.eclipse.org/bugs/show_bug.cgi?id=382915
		// * / / * NOTE:
		// * Top rule can be ignored, only exists to mention all
		// * rules, so they aren't ignored by the Xtext generator.
		// * Rules are actually used independently.
		// * / Top:
		//	"SYSTEM" UASystemDefinition | "DECLARATIONS" UADeclarations | "PARAMS" UAParameters | "EXPRESSION" UAExpression |
		//	"SELECT" UASelectList | "UPDATE" UAUpdate | "SYNC" UASynchronisation;
		public ParserRule getRule() { return rule; }

		//"SYSTEM" UASystemDefinition | "DECLARATIONS" UADeclarations | "PARAMS" UAParameters | "EXPRESSION" UAExpression |
		//"SELECT" UASelectList | "UPDATE" UAUpdate | "SYNC" UASynchronisation
		public Alternatives getAlternatives() { return cAlternatives; }

		//"SYSTEM" UASystemDefinition
		public Group getGroup_0() { return cGroup_0; }

		//"SYSTEM"
		public Keyword getSYSTEMKeyword_0_0() { return cSYSTEMKeyword_0_0; }

		//UASystemDefinition
		public RuleCall getUASystemDefinitionParserRuleCall_0_1() { return cUASystemDefinitionParserRuleCall_0_1; }

		//"DECLARATIONS" UADeclarations
		public Group getGroup_1() { return cGroup_1; }

		//"DECLARATIONS"
		public Keyword getDECLARATIONSKeyword_1_0() { return cDECLARATIONSKeyword_1_0; }

		//UADeclarations
		public RuleCall getUADeclarationsParserRuleCall_1_1() { return cUADeclarationsParserRuleCall_1_1; }

		//"PARAMS" UAParameters
		public Group getGroup_2() { return cGroup_2; }

		//"PARAMS"
		public Keyword getPARAMSKeyword_2_0() { return cPARAMSKeyword_2_0; }

		//UAParameters
		public RuleCall getUAParametersParserRuleCall_2_1() { return cUAParametersParserRuleCall_2_1; }

		//"EXPRESSION" UAExpression
		public Group getGroup_3() { return cGroup_3; }

		//"EXPRESSION"
		public Keyword getEXPRESSIONKeyword_3_0() { return cEXPRESSIONKeyword_3_0; }

		//UAExpression
		public RuleCall getUAExpressionParserRuleCall_3_1() { return cUAExpressionParserRuleCall_3_1; }

		//"SELECT" UASelectList
		public Group getGroup_4() { return cGroup_4; }

		//"SELECT"
		public Keyword getSELECTKeyword_4_0() { return cSELECTKeyword_4_0; }

		//UASelectList
		public RuleCall getUASelectListParserRuleCall_4_1() { return cUASelectListParserRuleCall_4_1; }

		//"UPDATE" UAUpdate
		public Group getGroup_5() { return cGroup_5; }

		//"UPDATE"
		public Keyword getUPDATEKeyword_5_0() { return cUPDATEKeyword_5_0; }

		//UAUpdate
		public RuleCall getUAUpdateParserRuleCall_5_1() { return cUAUpdateParserRuleCall_5_1; }

		//"SYNC" UASynchronisation
		public Group getGroup_6() { return cGroup_6; }

		//"SYNC"
		public Keyword getSYNCKeyword_6_0() { return cSYNCKeyword_6_0; }

		//UASynchronisation
		public RuleCall getUASynchronisationParserRuleCall_6_1() { return cUASynchronisationParserRuleCall_6_1; }
	}

	public class UASystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASystemDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUASystemDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDefinitionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDefinitionsUADefinitionParserRuleCall_1_0_0 = (RuleCall)cDefinitionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSystemAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSystemUASystemParserRuleCall_2_0_0 = (RuleCall)cSystemAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//UASystemDefinition:
		//	{UASystemDefinition} (definitions+=UADefinition ";"?)* (system=UASystem ";"?)?;
		public ParserRule getRule() { return rule; }

		//{UASystemDefinition} (definitions+=UADefinition ";"?)* (system=UASystem ";"?)?
		public Group getGroup() { return cGroup; }

		//{UASystemDefinition}
		public Action getUASystemDefinitionAction_0() { return cUASystemDefinitionAction_0; }

		//(definitions+=UADefinition ";"?)*
		public Group getGroup_1() { return cGroup_1; }

		//definitions+=UADefinition
		public Assignment getDefinitionsAssignment_1_0() { return cDefinitionsAssignment_1_0; }

		//UADefinition
		public RuleCall getDefinitionsUADefinitionParserRuleCall_1_0_0() { return cDefinitionsUADefinitionParserRuleCall_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//(system=UASystem ";"?)?
		public Group getGroup_2() { return cGroup_2; }

		//system=UASystem
		public Assignment getSystemAssignment_2_0() { return cSystemAssignment_2_0; }

		//UASystem
		public RuleCall getSystemUASystemParserRuleCall_2_0_0() { return cSystemUASystemParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class UADefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UADefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUADeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUAInstantiationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UADefinition:
		//	UADeclaration | UAInstantiation;
		public ParserRule getRule() { return rule; }

		//UADeclaration | UAInstantiation
		public Alternatives getAlternatives() { return cAlternatives; }

		//UADeclaration
		public RuleCall getUADeclarationParserRuleCall_0() { return cUADeclarationParserRuleCall_0; }

		//UAInstantiation
		public RuleCall getUAInstantiationParserRuleCall_1() { return cUAInstantiationParserRuleCall_1; }
	}

	public class UAInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersUAParametersParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetIDTerminalRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentsUAExpressionParserRuleCall_5_0 = (RuleCall)cArgumentsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cArgumentsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cArgumentsUAExpressionParserRuleCall_6_1_0 = (RuleCall)cArgumentsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//UAInstantiation:
		//	name=ID ("(" parameters=UAParameters ")")? (":=" | "=") target=ID "(" arguments+=UAExpression (","
		//	arguments+=UAExpression)* ")";
		public ParserRule getRule() { return rule; }

		//name=ID ("(" parameters=UAParameters ")")? (":=" | "=") target=ID "(" arguments+=UAExpression (","
		//arguments+=UAExpression)* ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" parameters=UAParameters ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameters=UAParameters
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//UAParameters
		public RuleCall getParametersUAParametersParserRuleCall_1_1_0() { return cParametersUAParametersParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//":=" | "="
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//target=ID
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//ID
		public RuleCall getTargetIDTerminalRuleCall_3_0() { return cTargetIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//arguments+=UAExpression
		public Assignment getArgumentsAssignment_5() { return cArgumentsAssignment_5; }

		//UAExpression
		public RuleCall getArgumentsUAExpressionParserRuleCall_5_0() { return cArgumentsUAExpressionParserRuleCall_5_0; }

		//("," arguments+=UAExpression)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//arguments+=UAExpression
		public Assignment getArgumentsAssignment_6_1() { return cArgumentsAssignment_6_1; }

		//UAExpression
		public RuleCall getArgumentsUAExpressionParserRuleCall_6_1_0() { return cArgumentsUAExpressionParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class UASystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSystemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemsUASystemIDParserRuleCall_1_0 = (RuleCall)cSystemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cSystemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSystemsUASystemIDParserRuleCall_2_1_0 = (RuleCall)cSystemsAssignment_2_1.eContents().get(0);
		
		//UASystem:
		//	"system" systems+=UASystemID (("," | "<") systems+=UASystemID)*;
		public ParserRule getRule() { return rule; }

		//"system" systems+=UASystemID (("," | "<") systems+=UASystemID)*
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//systems+=UASystemID
		public Assignment getSystemsAssignment_1() { return cSystemsAssignment_1; }

		//UASystemID
		public RuleCall getSystemsUASystemIDParserRuleCall_1_0() { return cSystemsUASystemIDParserRuleCall_1_0; }

		//(("," | "<") systems+=UASystemID)*
		public Group getGroup_2() { return cGroup_2; }

		//"," | "<"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0_1() { return cLessThanSignKeyword_2_0_1; }

		//systems+=UASystemID
		public Assignment getSystemsAssignment_2_1() { return cSystemsAssignment_2_1; }

		//UASystemID
		public RuleCall getSystemsUASystemIDParserRuleCall_2_1_0() { return cSystemsUASystemIDParserRuleCall_2_1_0; }
	}

	public class UASystemIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASystemID");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UASystemID:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UAArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeUAExpressionParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////// Declarations
		/// * NOTE:
		// * Definition of higher-level grammar would require
		// * duplicate definition. For example, variable
		// * declarations support multiple names, comma-separated,
		// * but individual parameters are also comma separated.
		// *
		// * Uses only names, as cross-references don't work,
		// * because the parser is used directly instead of
		// * using the EMF API. This is required as several
		// * declaration blocks may exist throughout the file.
		// *
		// * Use of semicolon is more permissive
		// * / / *
		// * UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Declarations.shtml)
		// * / UAArrayDeclaration:
		//	"[" size=UAExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" size=UAExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//size=UAExpression
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//UAExpression
		public RuleCall getSizeUAExpressionParserRuleCall_1_0() { return cSizeUAExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class UADeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UADeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsUADeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclarationsUADeclarationParserRuleCall_1_1_0 = (RuleCall)cDeclarationsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UADeclarations:
		//	declarations+=UADeclaration (";" declarations+=UADeclaration)* ";"?;
		public ParserRule getRule() { return rule; }

		//declarations+=UADeclaration (";" declarations+=UADeclaration)* ";"?
		public Group getGroup() { return cGroup; }

		//declarations+=UADeclaration
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }

		//UADeclaration
		public RuleCall getDeclarationsUADeclarationParserRuleCall_0_0() { return cDeclarationsUADeclarationParserRuleCall_0_0; }

		//(";" declarations+=UADeclaration)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//declarations+=UADeclaration
		public Assignment getDeclarationsAssignment_1_1() { return cDeclarationsAssignment_1_1; }

		//UADeclaration
		public RuleCall getDeclarationsUADeclarationParserRuleCall_1_1_0() { return cDeclarationsUADeclarationParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UADeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UADeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUATypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: | UAFunction
		//// TODO: | UAChannelPritority
		//UADeclaration:
		//	UAVariableDeclaration | UATypeDeclaration;
		public ParserRule getRule() { return rule; }

		//UAVariableDeclaration | UATypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAVariableDeclaration
		public RuleCall getUAVariableDeclarationParserRuleCall_0() { return cUAVariableDeclarationParserRuleCall_0; }

		//UATypeDeclaration
		public RuleCall getUATypeDeclarationParserRuleCall_1() { return cUATypeDeclarationParserRuleCall_1; }
	}

	public class UATypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersUATypeModifiersParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierUATypeIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//UAType:
		//	modifiers=UATypeModifiers identifier=UATypeIdentifier;
		public ParserRule getRule() { return rule; }

		//modifiers=UATypeModifiers identifier=UATypeIdentifier
		public Group getGroup() { return cGroup; }

		//modifiers=UATypeModifiers
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//UATypeModifiers
		public RuleCall getModifiersUATypeModifiersParserRuleCall_0_0() { return cModifiersUATypeModifiersParserRuleCall_0_0; }

		//identifier=UATypeIdentifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//UATypeIdentifier
		public RuleCall getIdentifierUATypeIdentifierParserRuleCall_1_0() { return cIdentifierUATypeIdentifierParserRuleCall_1_0; }
	}

	public class UATypeModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UATypeModifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUATypeModifiersAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cUrgentAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cUrgentUrgentKeyword_1_0_0 = (Keyword)cUrgentAssignment_1_0.eContents().get(0);
		private final Assignment cBroadcastAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cBroadcastBroadcastKeyword_1_1_0 = (Keyword)cBroadcastAssignment_1_1.eContents().get(0);
		private final Assignment cMetaAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cMetaMetaKeyword_1_2_0 = (Keyword)cMetaAssignment_1_2.eContents().get(0);
		private final Assignment cConstAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cConstConstKeyword_1_3_0 = (Keyword)cConstAssignment_1_3.eContents().get(0);
		
		//UATypeModifiers:
		//	{UATypeModifiers} (urgent?="urgent"? & broadcast?="broadcast"? & meta?="meta"? & const?="const"?);
		public ParserRule getRule() { return rule; }

		//{UATypeModifiers} (urgent?="urgent"? & broadcast?="broadcast"? & meta?="meta"? & const?="const"?)
		public Group getGroup() { return cGroup; }

		//{UATypeModifiers}
		public Action getUATypeModifiersAction_0() { return cUATypeModifiersAction_0; }

		//urgent?="urgent"? & broadcast?="broadcast"? & meta?="meta"? & const?="const"?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//urgent?="urgent"?
		public Assignment getUrgentAssignment_1_0() { return cUrgentAssignment_1_0; }

		//"urgent"
		public Keyword getUrgentUrgentKeyword_1_0_0() { return cUrgentUrgentKeyword_1_0_0; }

		//broadcast?="broadcast"?
		public Assignment getBroadcastAssignment_1_1() { return cBroadcastAssignment_1_1; }

		//"broadcast"
		public Keyword getBroadcastBroadcastKeyword_1_1_0() { return cBroadcastBroadcastKeyword_1_1_0; }

		//meta?="meta"?
		public Assignment getMetaAssignment_1_2() { return cMetaAssignment_1_2; }

		//"meta"
		public Keyword getMetaMetaKeyword_1_2_0() { return cMetaMetaKeyword_1_2_0; }

		//const?="const"?
		public Assignment getConstAssignment_1_3() { return cConstAssignment_1_3; }

		//"const"
		public Keyword getConstConstKeyword_1_3_0() { return cConstConstKeyword_1_3_0; }
	}

	public class UAVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesUAVariableIDParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesUAVariableIDParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//UAVariableDeclaration:
		//	type=UAType variables+=UAVariableID ("," variables+=UAVariableID)*;
		public ParserRule getRule() { return rule; }

		//type=UAType variables+=UAVariableID ("," variables+=UAVariableID)*
		public Group getGroup() { return cGroup; }

		//type=UAType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UAType
		public RuleCall getTypeUATypeParserRuleCall_0_0() { return cTypeUATypeParserRuleCall_0_0; }

		//variables+=UAVariableID
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//UAVariableID
		public RuleCall getVariablesUAVariableIDParserRuleCall_1_0() { return cVariablesUAVariableIDParserRuleCall_1_0; }

		//("," variables+=UAVariableID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=UAVariableID
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//UAVariableID
		public RuleCall getVariablesUAVariableIDParserRuleCall_2_1_0() { return cVariablesUAVariableIDParserRuleCall_2_1_0; }
	}

	public class UAVariableIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAVariableID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionsUAArrayDeclarationParserRuleCall_1_0 = (RuleCall)cDimensionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialiserAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialiserUAInitialiserParserRuleCall_2_1_0 = (RuleCall)cInitialiserAssignment_2_1.eContents().get(0);
		
		//UAVariableID:
		//	name=ID dimensions+=UAArrayDeclaration* ("=" initialiser=UAInitialiser)?;
		public ParserRule getRule() { return rule; }

		//name=ID dimensions+=UAArrayDeclaration* ("=" initialiser=UAInitialiser)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//dimensions+=UAArrayDeclaration*
		public Assignment getDimensionsAssignment_1() { return cDimensionsAssignment_1; }

		//UAArrayDeclaration
		public RuleCall getDimensionsUAArrayDeclarationParserRuleCall_1_0() { return cDimensionsUAArrayDeclarationParserRuleCall_1_0; }

		//("=" initialiser=UAInitialiser)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//initialiser=UAInitialiser
		public Assignment getInitialiserAssignment_2_1() { return cInitialiserAssignment_2_1; }

		//UAInitialiser
		public RuleCall getInitialiserUAInitialiserParserRuleCall_2_1_0() { return cInitialiserUAInitialiserParserRuleCall_2_1_0; }
	}

	public class UAInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAInitialiser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUASingleInitialiserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUAMultiInitialiserParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UAInitialiser:
		//	UASingleInitialiser | UAMultiInitialiser;
		public ParserRule getRule() { return rule; }

		//UASingleInitialiser | UAMultiInitialiser
		public Alternatives getAlternatives() { return cAlternatives; }

		//UASingleInitialiser
		public RuleCall getUASingleInitialiserParserRuleCall_0() { return cUASingleInitialiserParserRuleCall_0; }

		//UAMultiInitialiser
		public RuleCall getUAMultiInitialiserParserRuleCall_1() { return cUAMultiInitialiserParserRuleCall_1; }
	}

	public class UASingleInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASingleInitialiser");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionUAExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//UASingleInitialiser:
		//	expression=UAExpression;
		public ParserRule getRule() { return rule; }

		//expression=UAExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//UAExpression
		public RuleCall getExpressionUAExpressionParserRuleCall_0() { return cExpressionUAExpressionParserRuleCall_0; }
	}

	public class UAMultiInitialiserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAMultiInitialiser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialisersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialisersUAInitialiserParserRuleCall_1_0 = (RuleCall)cInitialisersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialisersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialisersUAInitialiserParserRuleCall_2_1_0 = (RuleCall)cInitialisersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UAMultiInitialiser:
		//	"{" initialisers+=UAInitialiser ("," initialisers+=UAInitialiser)* "}";
		public ParserRule getRule() { return rule; }

		//"{" initialisers+=UAInitialiser ("," initialisers+=UAInitialiser)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//initialisers+=UAInitialiser
		public Assignment getInitialisersAssignment_1() { return cInitialisersAssignment_1; }

		//UAInitialiser
		public RuleCall getInitialisersUAInitialiserParserRuleCall_1_0() { return cInitialisersUAInitialiserParserRuleCall_1_0; }

		//("," initialisers+=UAInitialiser)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//initialisers+=UAInitialiser
		public Assignment getInitialisersAssignment_2_1() { return cInitialisersAssignment_2_1; }

		//UAInitialiser
		public RuleCall getInitialisersUAInitialiserParserRuleCall_2_1_0() { return cInitialisersUAInitialiserParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class UATypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UATypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaseTypeUATypeParserRuleCall_1_0 = (RuleCall)cBaseTypeAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesUATypeIDParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesUATypeIDParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		
		//UATypeDeclaration:
		//	"typedef" baseType=UAType types+=UATypeID ("," types+=UATypeID)*;
		public ParserRule getRule() { return rule; }

		//"typedef" baseType=UAType types+=UATypeID ("," types+=UATypeID)*
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//baseType=UAType
		public Assignment getBaseTypeAssignment_1() { return cBaseTypeAssignment_1; }

		//UAType
		public RuleCall getBaseTypeUATypeParserRuleCall_1_0() { return cBaseTypeUATypeParserRuleCall_1_0; }

		//types+=UATypeID
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//UATypeID
		public RuleCall getTypesUATypeIDParserRuleCall_2_0() { return cTypesUATypeIDParserRuleCall_2_0; }

		//("," types+=UATypeID)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=UATypeID
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//UATypeID
		public RuleCall getTypesUATypeIDParserRuleCall_3_1_0() { return cTypesUATypeIDParserRuleCall_3_1_0; }
	}

	public class UATypeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UATypeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionsUAArrayDeclarationParserRuleCall_1_0 = (RuleCall)cDimensionsAssignment_1.eContents().get(0);
		
		//UATypeID:
		//	name=ID dimensions+=UAArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//name=ID dimensions+=UAArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//dimensions+=UAArrayDeclaration*
		public Assignment getDimensionsAssignment_1() { return cDimensionsAssignment_1; }

		//UAArrayDeclaration
		public RuleCall getDimensionsUAArrayDeclarationParserRuleCall_1_0() { return cDimensionsUAArrayDeclarationParserRuleCall_1_0; }
	}

	public class UATypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UATypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUAClockTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUAChannelTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUABooleanTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUAScalarTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUAStructTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cUAUserTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		
		//UATypeIdentifier:
		//	UAIntegerType | UAClockType | UAChannelType | UABooleanType | UAScalarType | UAStructType | {UAUserType} name=ID;
		public ParserRule getRule() { return rule; }

		//UAIntegerType | UAClockType | UAChannelType | UABooleanType | UAScalarType | UAStructType | {UAUserType} name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAIntegerType
		public RuleCall getUAIntegerTypeParserRuleCall_0() { return cUAIntegerTypeParserRuleCall_0; }

		//UAClockType
		public RuleCall getUAClockTypeParserRuleCall_1() { return cUAClockTypeParserRuleCall_1; }

		//UAChannelType
		public RuleCall getUAChannelTypeParserRuleCall_2() { return cUAChannelTypeParserRuleCall_2; }

		//UABooleanType
		public RuleCall getUABooleanTypeParserRuleCall_3() { return cUABooleanTypeParserRuleCall_3; }

		//UAScalarType
		public RuleCall getUAScalarTypeParserRuleCall_4() { return cUAScalarTypeParserRuleCall_4; }

		//UAStructType
		public RuleCall getUAStructTypeParserRuleCall_5() { return cUAStructTypeParserRuleCall_5; }

		//{UAUserType} name=ID
		public Group getGroup_6() { return cGroup_6; }

		//{UAUserType}
		public Action getUAUserTypeAction_6_0() { return cUAUserTypeAction_6_0; }

		//name=ID
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_1_0() { return cNameIDTerminalRuleCall_6_1_0; }
	}

	public class UAIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinUAExpressionParserRuleCall_2_1_0 = (RuleCall)cMinAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMaxAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMaxUAExpressionParserRuleCall_2_3_0 = (RuleCall)cMaxAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//UAIntegerType:
		//	{UAIntegerType} "int" ("[" min=UAExpression "," max=UAExpression "]")?;
		public ParserRule getRule() { return rule; }

		//{UAIntegerType} "int" ("[" min=UAExpression "," max=UAExpression "]")?
		public Group getGroup() { return cGroup; }

		//{UAIntegerType}
		public Action getUAIntegerTypeAction_0() { return cUAIntegerTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//("[" min=UAExpression "," max=UAExpression "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//min=UAExpression
		public Assignment getMinAssignment_2_1() { return cMinAssignment_2_1; }

		//UAExpression
		public RuleCall getMinUAExpressionParserRuleCall_2_1_0() { return cMinUAExpressionParserRuleCall_2_1_0; }

		//","
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//max=UAExpression
		public Assignment getMaxAssignment_2_3() { return cMaxAssignment_2_3; }

		//UAExpression
		public RuleCall getMaxUAExpressionParserRuleCall_2_3_0() { return cMaxUAExpressionParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class UAClockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAClockType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAClockTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UAClockType:
		//	{UAClockType} "clock";
		public ParserRule getRule() { return rule; }

		//{UAClockType} "clock"
		public Group getGroup() { return cGroup; }

		//{UAClockType}
		public Action getUAClockTypeAction_0() { return cUAClockTypeAction_0; }

		//"clock"
		public Keyword getClockKeyword_1() { return cClockKeyword_1; }
	}

	public class UAChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAChannelTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UAChannelType:
		//	{UAChannelType} "chan";
		public ParserRule getRule() { return rule; }

		//{UAChannelType} "chan"
		public Group getGroup() { return cGroup; }

		//{UAChannelType}
		public Action getUAChannelTypeAction_0() { return cUAChannelTypeAction_0; }

		//"chan"
		public Keyword getChanKeyword_1() { return cChanKeyword_1; }
	}

	public class UABooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUABooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UABooleanType:
		//	{UABooleanType} "bool";
		public ParserRule getRule() { return rule; }

		//{UABooleanType} "bool"
		public Group getGroup() { return cGroup; }

		//{UABooleanType}
		public Action getUABooleanTypeAction_0() { return cUABooleanTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class UAScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAScalarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAScalarTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScalarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeUAExpressionParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UAScalarType:
		//	{UAScalarType} "scalar" "[" size=UAExpression "]";
		public ParserRule getRule() { return rule; }

		//{UAScalarType} "scalar" "[" size=UAExpression "]"
		public Group getGroup() { return cGroup; }

		//{UAScalarType}
		public Action getUAScalarTypeAction_0() { return cUAScalarTypeAction_0; }

		//"scalar"
		public Keyword getScalarKeyword_1() { return cScalarKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//size=UAExpression
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }

		//UAExpression
		public RuleCall getSizeUAExpressionParserRuleCall_3_0() { return cSizeUAExpressionParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class UAStructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAStructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsUAFieldDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclarationsUAFieldDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UAStructType:
		//	{UAStructType} "struct" "{" declarations+=UAFieldDeclaration (";" declarations+=UAFieldDeclaration)* ";"? "}";
		public ParserRule getRule() { return rule; }

		//{UAStructType} "struct" "{" declarations+=UAFieldDeclaration (";" declarations+=UAFieldDeclaration)* ";"? "}"
		public Group getGroup() { return cGroup; }

		//{UAStructType}
		public Action getUAStructTypeAction_0() { return cUAStructTypeAction_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//declarations+=UAFieldDeclaration
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//UAFieldDeclaration
		public RuleCall getDeclarationsUAFieldDeclarationParserRuleCall_3_0() { return cDeclarationsUAFieldDeclarationParserRuleCall_3_0; }

		//(";" declarations+=UAFieldDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//declarations+=UAFieldDeclaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }

		//UAFieldDeclaration
		public RuleCall getDeclarationsUAFieldDeclarationParserRuleCall_4_1_0() { return cDeclarationsUAFieldDeclarationParserRuleCall_4_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class UAFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsUAFieldIDParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldsUAFieldIDParserRuleCall_2_1_0 = (RuleCall)cFieldsAssignment_2_1.eContents().get(0);
		
		//UAFieldDeclaration:
		//	type=UAType fields+=UAFieldID ("," fields+=UAFieldID)*;
		public ParserRule getRule() { return rule; }

		//type=UAType fields+=UAFieldID ("," fields+=UAFieldID)*
		public Group getGroup() { return cGroup; }

		//type=UAType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UAType
		public RuleCall getTypeUATypeParserRuleCall_0_0() { return cTypeUATypeParserRuleCall_0_0; }

		//fields+=UAFieldID
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }

		//UAFieldID
		public RuleCall getFieldsUAFieldIDParserRuleCall_1_0() { return cFieldsUAFieldIDParserRuleCall_1_0; }

		//("," fields+=UAFieldID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//fields+=UAFieldID
		public Assignment getFieldsAssignment_2_1() { return cFieldsAssignment_2_1; }

		//UAFieldID
		public RuleCall getFieldsUAFieldIDParserRuleCall_2_1_0() { return cFieldsUAFieldIDParserRuleCall_2_1_0; }
	}

	public class UAFieldIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAFieldID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimensionsUAArrayDeclarationParserRuleCall_1_0 = (RuleCall)cDimensionsAssignment_1.eContents().get(0);
		
		//UAFieldID:
		//	name=ID dimensions+=UAArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//name=ID dimensions+=UAArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//dimensions+=UAArrayDeclaration*
		public Assignment getDimensionsAssignment_1() { return cDimensionsAssignment_1; }

		//UAArrayDeclaration
		public RuleCall getDimensionsUAArrayDeclarationParserRuleCall_1_0() { return cDimensionsUAArrayDeclarationParserRuleCall_1_0; }
	}

	public class UAParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersUAParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersUAParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		////// Parameters
		/// *
		// * UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Parameters.shtml)
		// * / UAParameters:
		//	parameters+=UAParameter ("," parameters+=UAParameter)*;
		public ParserRule getRule() { return rule; }

		//parameters+=UAParameter ("," parameters+=UAParameter)*
		public Group getGroup() { return cGroup; }

		//parameters+=UAParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//UAParameter
		public RuleCall getParametersUAParameterParserRuleCall_0_0() { return cParametersUAParameterParserRuleCall_0_0; }

		//("," parameters+=UAParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=UAParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//UAParameter
		public RuleCall getParametersUAParameterParserRuleCall_1_1_0() { return cParametersUAParameterParserRuleCall_1_1_0; }
	}

	public class UAParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeUATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cByReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cByReferenceAmpersandKeyword_1_0 = (Keyword)cByReferenceAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDimensionsUAArrayDeclarationParserRuleCall_3_0 = (RuleCall)cDimensionsAssignment_3.eContents().get(0);
		
		//UAParameter:
		//	type=UAType byReference?="&"? name=ID dimensions+=UAArrayDeclaration*;
		public ParserRule getRule() { return rule; }

		//type=UAType byReference?="&"? name=ID dimensions+=UAArrayDeclaration*
		public Group getGroup() { return cGroup; }

		//type=UAType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//UAType
		public RuleCall getTypeUATypeParserRuleCall_0_0() { return cTypeUATypeParserRuleCall_0_0; }

		//byReference?="&"?
		public Assignment getByReferenceAssignment_1() { return cByReferenceAssignment_1; }

		//"&"
		public Keyword getByReferenceAmpersandKeyword_1_0() { return cByReferenceAmpersandKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//dimensions+=UAArrayDeclaration*
		public Assignment getDimensionsAssignment_3() { return cDimensionsAssignment_3; }

		//UAArrayDeclaration
		public RuleCall getDimensionsUAArrayDeclarationParserRuleCall_3_0() { return cDimensionsUAArrayDeclarationParserRuleCall_3_0; }
	}

	public class UAExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAImplyLogicOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAForallExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cForallKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAExistsExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExistsKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeUATypeParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cExpressionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExpressionUAExpressionParserRuleCall_1_6_0 = (RuleCall)cExpressionAssignment_1_6.eContents().get(0);
		
		////// Expression
		/// *
		// * UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Expressions.shtml)
		// * / // unary right
		//UAExpression:
		//	UAImplyLogicOrExpression | ({UAForallExpression} "forall" | {UAExistsExpression} "exists") "(" name=ID ":" type=UAType
		//	")" expression=UAExpression;
		public ParserRule getRule() { return rule; }

		//UAImplyLogicOrExpression | ({UAForallExpression} "forall" | {UAExistsExpression} "exists") "(" name=ID ":" type=UAType
		//")" expression=UAExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAImplyLogicOrExpression
		public RuleCall getUAImplyLogicOrExpressionParserRuleCall_0() { return cUAImplyLogicOrExpressionParserRuleCall_0; }

		//({UAForallExpression} "forall" | {UAExistsExpression} "exists") "(" name=ID ":" type=UAType ")" expression=UAExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UAForallExpression} "forall" | {UAExistsExpression} "exists"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAForallExpression} "forall"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAForallExpression}
		public Action getUAForallExpressionAction_1_0_0_0() { return cUAForallExpressionAction_1_0_0_0; }

		//"forall"
		public Keyword getForallKeyword_1_0_0_1() { return cForallKeyword_1_0_0_1; }

		//{UAExistsExpression} "exists"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAExistsExpression}
		public Action getUAExistsExpressionAction_1_0_1_0() { return cUAExistsExpressionAction_1_0_1_0; }

		//"exists"
		public Keyword getExistsKeyword_1_0_1_1() { return cExistsKeyword_1_0_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//type=UAType
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }

		//UAType
		public RuleCall getTypeUATypeParserRuleCall_1_4_0() { return cTypeUATypeParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//expression=UAExpression
		public Assignment getExpressionAssignment_1_6() { return cExpressionAssignment_1_6; }

		//UAExpression
		public RuleCall getExpressionUAExpressionParserRuleCall_1_6_0() { return cExpressionUAExpressionParserRuleCall_1_6_0; }
	}

	public class UAImplyLogicOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAImplyLogicOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUALogicAndExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAImplyExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cImplyKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUALogicOrExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUALogicAndExpression1ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAImplyLogicOrExpression returns UAExpression:
		//	UALogicAndExpression1 (({UAImplyExpression.left=current} "imply" | {UALogicOrExpression.left=current} "or")
		//	right=UALogicAndExpression1)*;
		public ParserRule getRule() { return rule; }

		//UALogicAndExpression1 (({UAImplyExpression.left=current} "imply" | {UALogicOrExpression.left=current} "or")
		//right=UALogicAndExpression1)*
		public Group getGroup() { return cGroup; }

		//UALogicAndExpression1
		public RuleCall getUALogicAndExpression1ParserRuleCall_0() { return cUALogicAndExpression1ParserRuleCall_0; }

		//(({UAImplyExpression.left=current} "imply" | {UALogicOrExpression.left=current} "or") right=UALogicAndExpression1)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAImplyExpression.left=current} "imply" | {UALogicOrExpression.left=current} "or"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAImplyExpression.left=current} "imply"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAImplyExpression.left=current}
		public Action getUAImplyExpressionLeftAction_1_0_0_0() { return cUAImplyExpressionLeftAction_1_0_0_0; }

		//"imply"
		public Keyword getImplyKeyword_1_0_0_1() { return cImplyKeyword_1_0_0_1; }

		//{UALogicOrExpression.left=current} "or"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UALogicOrExpression.left=current}
		public Action getUALogicOrExpressionLeftAction_1_0_1_0() { return cUALogicOrExpressionLeftAction_1_0_1_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1_1() { return cOrKeyword_1_0_1_1; }

		//right=UALogicAndExpression1
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UALogicAndExpression1
		public RuleCall getRightUALogicAndExpression1ParserRuleCall_1_1_0() { return cRightUALogicAndExpression1ParserRuleCall_1_1_0; }
	}

	public class UALogicAndExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UALogicAndExpression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUALogicNotExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUALogicAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUALogicNotExpression1ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UALogicAndExpression1 returns UAExpression:
		//	UALogicNotExpression1 (({UALogicAndExpression.left=current} "and") right=UALogicNotExpression1)*;
		public ParserRule getRule() { return rule; }

		//UALogicNotExpression1 (({UALogicAndExpression.left=current} "and") right=UALogicNotExpression1)*
		public Group getGroup() { return cGroup; }

		//UALogicNotExpression1
		public RuleCall getUALogicNotExpression1ParserRuleCall_0() { return cUALogicNotExpression1ParserRuleCall_0; }

		//(({UALogicAndExpression.left=current} "and") right=UALogicNotExpression1)*
		public Group getGroup_1() { return cGroup_1; }

		//{UALogicAndExpression.left=current} "and"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UALogicAndExpression.left=current}
		public Action getUALogicAndExpressionLeftAction_1_0_0() { return cUALogicAndExpressionLeftAction_1_0_0; }

		//"and"
		public Keyword getAndKeyword_1_0_1() { return cAndKeyword_1_0_1; }

		//right=UALogicNotExpression1
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UALogicNotExpression1
		public RuleCall getRightUALogicNotExpression1ParserRuleCall_1_1_0() { return cRightUALogicNotExpression1ParserRuleCall_1_1_0; }
	}

	public class UALogicNotExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UALogicNotExpression1");
		private final RuleCall cUAAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// unary right
		//// TODO: causes duplicate method definition by Xtext
		////	| ({UALogicNotExpression} 'not'
		////		expression=UALogicNotExpression1)
		//UALogicNotExpression1 returns UAExpression:
		//	UAAssignmentExpression;
		public ParserRule getRule() { return rule; }

		//UAAssignmentExpression
		public RuleCall getUAAssignmentExpressionParserRuleCall() { return cUAAssignmentExpressionParserRuleCall; }
	}

	public class UAAssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAAssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAAssignmentExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAAssignmentExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cUAAdditionAssignmentExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cUASubtractionAssignmentExpressionLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cUAMultiplicationAssignmentExpressionLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cUADivisionAssignmentExpressionLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cUAModuloAssignmentExpressionLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cPercentSignEqualsSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Action cUABitOrAssignmentExpressionLeftAction_1_0_7_0 = (Action)cGroup_1_0_7.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Group cGroup_1_0_8 = (Group)cAlternatives_1_0.eContents().get(8);
		private final Action cUABitAndAssignmentExpressionLeftAction_1_0_8_0 = (Action)cGroup_1_0_8.eContents().get(0);
		private final Keyword cAmpersandEqualsSignKeyword_1_0_8_1 = (Keyword)cGroup_1_0_8.eContents().get(1);
		private final Group cGroup_1_0_9 = (Group)cAlternatives_1_0.eContents().get(9);
		private final Action cUABitXORAssignmentExpressionLeftAction_1_0_9_0 = (Action)cGroup_1_0_9.eContents().get(0);
		private final Keyword cCircumflexAccentEqualsSignKeyword_1_0_9_1 = (Keyword)cGroup_1_0_9.eContents().get(1);
		private final Group cGroup_1_0_10 = (Group)cAlternatives_1_0.eContents().get(10);
		private final Action cUABitLeftAssignmentExpressionLeftAction_1_0_10_0 = (Action)cGroup_1_0_10.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1 = (Keyword)cGroup_1_0_10.eContents().get(1);
		private final Group cGroup_1_0_11 = (Group)cAlternatives_1_0.eContents().get(11);
		private final Action cUABitRightAssignmentExpressionLeftAction_1_0_11_0 = (Action)cGroup_1_0_11.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1 = (Keyword)cGroup_1_0_11.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAAssignmentExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// right
		//UAAssignmentExpression returns UAExpression:
		//	UAConditionalExpression (({UAAssignmentExpression.left=current} "=" | {UAAssignmentExpression.left=current} ":=" |
		//	{UAAdditionAssignmentExpression.left=current} "+=" | {UASubtractionAssignmentExpression.left=current} "-=" |
		//	{UAMultiplicationAssignmentExpression.left=current} "*=" | {UADivisionAssignmentExpression.left=current} "/=" |
		//	{UAModuloAssignmentExpression.left=current} "%=" | {UABitOrAssignmentExpression.left=current} "|=" |
		//	{UABitAndAssignmentExpression.left=current} "&=" | {UABitXORAssignmentExpression.left=current} "^=" |
		//	{UABitLeftAssignmentExpression.left=current} "<<=" | {UABitRightAssignmentExpression.left=current} ">>=")
		//	right=UAAssignmentExpression)?;
		public ParserRule getRule() { return rule; }

		//UAConditionalExpression (({UAAssignmentExpression.left=current} "=" | {UAAssignmentExpression.left=current} ":=" |
		//{UAAdditionAssignmentExpression.left=current} "+=" | {UASubtractionAssignmentExpression.left=current} "-=" |
		//{UAMultiplicationAssignmentExpression.left=current} "*=" | {UADivisionAssignmentExpression.left=current} "/=" |
		//{UAModuloAssignmentExpression.left=current} "%=" | {UABitOrAssignmentExpression.left=current} "|=" |
		//{UABitAndAssignmentExpression.left=current} "&=" | {UABitXORAssignmentExpression.left=current} "^=" |
		//{UABitLeftAssignmentExpression.left=current} "<<=" | {UABitRightAssignmentExpression.left=current} ">>=")
		//right=UAAssignmentExpression)?
		public Group getGroup() { return cGroup; }

		//UAConditionalExpression
		public RuleCall getUAConditionalExpressionParserRuleCall_0() { return cUAConditionalExpressionParserRuleCall_0; }

		//(({UAAssignmentExpression.left=current} "=" | {UAAssignmentExpression.left=current} ":=" |
		//{UAAdditionAssignmentExpression.left=current} "+=" | {UASubtractionAssignmentExpression.left=current} "-=" |
		//{UAMultiplicationAssignmentExpression.left=current} "*=" | {UADivisionAssignmentExpression.left=current} "/=" |
		//{UAModuloAssignmentExpression.left=current} "%=" | {UABitOrAssignmentExpression.left=current} "|=" |
		//{UABitAndAssignmentExpression.left=current} "&=" | {UABitXORAssignmentExpression.left=current} "^=" |
		//{UABitLeftAssignmentExpression.left=current} "<<=" | {UABitRightAssignmentExpression.left=current} ">>=")
		//right=UAAssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{UAAssignmentExpression.left=current} "=" | {UAAssignmentExpression.left=current} ":=" |
		//{UAAdditionAssignmentExpression.left=current} "+=" | {UASubtractionAssignmentExpression.left=current} "-=" |
		//{UAMultiplicationAssignmentExpression.left=current} "*=" | {UADivisionAssignmentExpression.left=current} "/=" |
		//{UAModuloAssignmentExpression.left=current} "%=" | {UABitOrAssignmentExpression.left=current} "|=" |
		//{UABitAndAssignmentExpression.left=current} "&=" | {UABitXORAssignmentExpression.left=current} "^=" |
		//{UABitLeftAssignmentExpression.left=current} "<<=" | {UABitRightAssignmentExpression.left=current} ">>="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAAssignmentExpression.left=current} "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAAssignmentExpression.left=current}
		public Action getUAAssignmentExpressionLeftAction_1_0_0_0() { return cUAAssignmentExpressionLeftAction_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }

		//{UAAssignmentExpression.left=current} ":="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAAssignmentExpression.left=current}
		public Action getUAAssignmentExpressionLeftAction_1_0_1_0() { return cUAAssignmentExpressionLeftAction_1_0_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1_1() { return cColonEqualsSignKeyword_1_0_1_1; }

		//{UAAdditionAssignmentExpression.left=current} "+="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{UAAdditionAssignmentExpression.left=current}
		public Action getUAAdditionAssignmentExpressionLeftAction_1_0_2_0() { return cUAAdditionAssignmentExpressionLeftAction_1_0_2_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_0_2_1() { return cPlusSignEqualsSignKeyword_1_0_2_1; }

		//{UASubtractionAssignmentExpression.left=current} "-="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{UASubtractionAssignmentExpression.left=current}
		public Action getUASubtractionAssignmentExpressionLeftAction_1_0_3_0() { return cUASubtractionAssignmentExpressionLeftAction_1_0_3_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1_0_3_1() { return cHyphenMinusEqualsSignKeyword_1_0_3_1; }

		//{UAMultiplicationAssignmentExpression.left=current} "*="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{UAMultiplicationAssignmentExpression.left=current}
		public Action getUAMultiplicationAssignmentExpressionLeftAction_1_0_4_0() { return cUAMultiplicationAssignmentExpressionLeftAction_1_0_4_0; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1_0_4_1() { return cAsteriskEqualsSignKeyword_1_0_4_1; }

		//{UADivisionAssignmentExpression.left=current} "/="
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{UADivisionAssignmentExpression.left=current}
		public Action getUADivisionAssignmentExpressionLeftAction_1_0_5_0() { return cUADivisionAssignmentExpressionLeftAction_1_0_5_0; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_0_5_1() { return cSolidusEqualsSignKeyword_1_0_5_1; }

		//{UAModuloAssignmentExpression.left=current} "%="
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{UAModuloAssignmentExpression.left=current}
		public Action getUAModuloAssignmentExpressionLeftAction_1_0_6_0() { return cUAModuloAssignmentExpressionLeftAction_1_0_6_0; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_1_0_6_1() { return cPercentSignEqualsSignKeyword_1_0_6_1; }

		//{UABitOrAssignmentExpression.left=current} "|="
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//{UABitOrAssignmentExpression.left=current}
		public Action getUABitOrAssignmentExpressionLeftAction_1_0_7_0() { return cUABitOrAssignmentExpressionLeftAction_1_0_7_0; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_1_0_7_1() { return cVerticalLineEqualsSignKeyword_1_0_7_1; }

		//{UABitAndAssignmentExpression.left=current} "&="
		public Group getGroup_1_0_8() { return cGroup_1_0_8; }

		//{UABitAndAssignmentExpression.left=current}
		public Action getUABitAndAssignmentExpressionLeftAction_1_0_8_0() { return cUABitAndAssignmentExpressionLeftAction_1_0_8_0; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_1_0_8_1() { return cAmpersandEqualsSignKeyword_1_0_8_1; }

		//{UABitXORAssignmentExpression.left=current} "^="
		public Group getGroup_1_0_9() { return cGroup_1_0_9; }

		//{UABitXORAssignmentExpression.left=current}
		public Action getUABitXORAssignmentExpressionLeftAction_1_0_9_0() { return cUABitXORAssignmentExpressionLeftAction_1_0_9_0; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_1_0_9_1() { return cCircumflexAccentEqualsSignKeyword_1_0_9_1; }

		//{UABitLeftAssignmentExpression.left=current} "<<="
		public Group getGroup_1_0_10() { return cGroup_1_0_10; }

		//{UABitLeftAssignmentExpression.left=current}
		public Action getUABitLeftAssignmentExpressionLeftAction_1_0_10_0() { return cUABitLeftAssignmentExpressionLeftAction_1_0_10_0; }

		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1() { return cLessThanSignLessThanSignEqualsSignKeyword_1_0_10_1; }

		//{UABitRightAssignmentExpression.left=current} ">>="
		public Group getGroup_1_0_11() { return cGroup_1_0_11; }

		//{UABitRightAssignmentExpression.left=current}
		public Action getUABitRightAssignmentExpressionLeftAction_1_0_11_0() { return cUABitRightAssignmentExpressionLeftAction_1_0_11_0; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0_11_1; }

		//right=UAAssignmentExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAAssignmentExpression
		public RuleCall getRightUAAssignmentExpressionParserRuleCall_1_1_0() { return cRightUAAssignmentExpressionParserRuleCall_1_1_0; }
	}

	public class UAConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUALogicOrExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUAConditionalExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenUALogicOrExpression2ParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseUAConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cElseAssignment_1_4.eContents().get(0);
		
		//// right
		//UAConditionalExpression returns UAExpression:
		//	UALogicOrExpression2 ({UAConditionalExpression.condition=current} "?" then=UALogicOrExpression2 ":"
		//	else=UAConditionalExpression)?;
		public ParserRule getRule() { return rule; }

		//UALogicOrExpression2 ({UAConditionalExpression.condition=current} "?" then=UALogicOrExpression2 ":"
		//else=UAConditionalExpression)?
		public Group getGroup() { return cGroup; }

		//UALogicOrExpression2
		public RuleCall getUALogicOrExpression2ParserRuleCall_0() { return cUALogicOrExpression2ParserRuleCall_0; }

		//({UAConditionalExpression.condition=current} "?" then=UALogicOrExpression2 ":" else=UAConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{UAConditionalExpression.condition=current}
		public Action getUAConditionalExpressionConditionAction_1_0() { return cUAConditionalExpressionConditionAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//then=UALogicOrExpression2
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }

		//UALogicOrExpression2
		public RuleCall getThenUALogicOrExpression2ParserRuleCall_1_2_0() { return cThenUALogicOrExpression2ParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//else=UAConditionalExpression
		public Assignment getElseAssignment_1_4() { return cElseAssignment_1_4; }

		//UAConditionalExpression
		public RuleCall getElseUAConditionalExpressionParserRuleCall_1_4_0() { return cElseUAConditionalExpressionParserRuleCall_1_4_0; }
	}

	public class UALogicOrExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UALogicOrExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUALogicAndExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUALogicOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUALogicAndExpression2ParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UALogicOrExpression2 returns UAExpression:
		//	UALogicAndExpression2 (({UALogicOrExpression.left=current} "||") right=UALogicAndExpression2)*;
		public ParserRule getRule() { return rule; }

		//UALogicAndExpression2 (({UALogicOrExpression.left=current} "||") right=UALogicAndExpression2)*
		public Group getGroup() { return cGroup; }

		//UALogicAndExpression2
		public RuleCall getUALogicAndExpression2ParserRuleCall_0() { return cUALogicAndExpression2ParserRuleCall_0; }

		//(({UALogicOrExpression.left=current} "||") right=UALogicAndExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//{UALogicOrExpression.left=current} "||"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UALogicOrExpression.left=current}
		public Action getUALogicOrExpressionLeftAction_1_0_0() { return cUALogicOrExpressionLeftAction_1_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }

		//right=UALogicAndExpression2
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UALogicAndExpression2
		public RuleCall getRightUALogicAndExpression2ParserRuleCall_1_1_0() { return cRightUALogicAndExpression2ParserRuleCall_1_1_0; }
	}

	public class UALogicAndExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UALogicAndExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUABitOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUALogicAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUABitOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UALogicAndExpression2 returns UAExpression:
		//	UABitOrExpression (({UALogicAndExpression.left=current} "&&") right=UABitOrExpression)*;
		public ParserRule getRule() { return rule; }

		//UABitOrExpression (({UALogicAndExpression.left=current} "&&") right=UABitOrExpression)*
		public Group getGroup() { return cGroup; }

		//UABitOrExpression
		public RuleCall getUABitOrExpressionParserRuleCall_0() { return cUABitOrExpressionParserRuleCall_0; }

		//(({UALogicAndExpression.left=current} "&&") right=UABitOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UALogicAndExpression.left=current} "&&"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UALogicAndExpression.left=current}
		public Action getUALogicAndExpressionLeftAction_1_0_0() { return cUALogicAndExpressionLeftAction_1_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }

		//right=UABitOrExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UABitOrExpression
		public RuleCall getRightUABitOrExpressionParserRuleCall_1_1_0() { return cRightUABitOrExpressionParserRuleCall_1_1_0; }
	}

	public class UABitOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABitOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUABitXORExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUABitOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUABitXORExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UABitOrExpression returns UAExpression:
		//	UABitXORExpression (({UABitOrExpression.left=current} "|") right=UABitXORExpression)*;
		public ParserRule getRule() { return rule; }

		//UABitXORExpression (({UABitOrExpression.left=current} "|") right=UABitXORExpression)*
		public Group getGroup() { return cGroup; }

		//UABitXORExpression
		public RuleCall getUABitXORExpressionParserRuleCall_0() { return cUABitXORExpressionParserRuleCall_0; }

		//(({UABitOrExpression.left=current} "|") right=UABitXORExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UABitOrExpression.left=current} "|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UABitOrExpression.left=current}
		public Action getUABitOrExpressionLeftAction_1_0_0() { return cUABitOrExpressionLeftAction_1_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1() { return cVerticalLineKeyword_1_0_1; }

		//right=UABitXORExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UABitXORExpression
		public RuleCall getRightUABitXORExpressionParserRuleCall_1_1_0() { return cRightUABitXORExpressionParserRuleCall_1_1_0; }
	}

	public class UABitXORExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABitXORExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUABitAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUABitXORExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUABitAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UABitXORExpression returns UAExpression:
		//	UABitAndExpression (({UABitXORExpression.left=current} "^") right=UABitAndExpression)*;
		public ParserRule getRule() { return rule; }

		//UABitAndExpression (({UABitXORExpression.left=current} "^") right=UABitAndExpression)*
		public Group getGroup() { return cGroup; }

		//UABitAndExpression
		public RuleCall getUABitAndExpressionParserRuleCall_0() { return cUABitAndExpressionParserRuleCall_0; }

		//(({UABitXORExpression.left=current} "^") right=UABitAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UABitXORExpression.left=current} "^"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UABitXORExpression.left=current}
		public Action getUABitXORExpressionLeftAction_1_0_0() { return cUABitXORExpressionLeftAction_1_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0_1() { return cCircumflexAccentKeyword_1_0_1; }

		//right=UABitAndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UABitAndExpression
		public RuleCall getRightUABitAndExpressionParserRuleCall_1_1_0() { return cRightUABitAndExpressionParserRuleCall_1_1_0; }
	}

	public class UABitAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABitAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cUABitAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UABitAndExpression returns UAExpression:
		//	UAEqualityExpression (({UABitAndExpression.left=current} "&") right=UAEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//UAEqualityExpression (({UABitAndExpression.left=current} "&") right=UAEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//UAEqualityExpression
		public RuleCall getUAEqualityExpressionParserRuleCall_0() { return cUAEqualityExpressionParserRuleCall_0; }

		//(({UABitAndExpression.left=current} "&") right=UAEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UABitAndExpression.left=current} "&"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UABitAndExpression.left=current}
		public Action getUABitAndExpressionLeftAction_1_0_0() { return cUABitAndExpressionLeftAction_1_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }

		//right=UAEqualityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAEqualityExpression
		public RuleCall getRightUAEqualityExpressionParserRuleCall_1_1_0() { return cRightUAEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class UAEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAInequalityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAEqualExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAUnequalExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAInequalityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAEqualityExpression returns UAExpression:
		//	UAInequalityExpression (({UAEqualExpression.left=current} "==" | {UAUnequalExpression.left=current} "!=")
		//	right=UAInequalityExpression)*;
		public ParserRule getRule() { return rule; }

		//UAInequalityExpression (({UAEqualExpression.left=current} "==" | {UAUnequalExpression.left=current} "!=")
		//right=UAInequalityExpression)*
		public Group getGroup() { return cGroup; }

		//UAInequalityExpression
		public RuleCall getUAInequalityExpressionParserRuleCall_0() { return cUAInequalityExpressionParserRuleCall_0; }

		//(({UAEqualExpression.left=current} "==" | {UAUnequalExpression.left=current} "!=") right=UAInequalityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAEqualExpression.left=current} "==" | {UAUnequalExpression.left=current} "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAEqualExpression.left=current} "=="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAEqualExpression.left=current}
		public Action getUAEqualExpressionLeftAction_1_0_0_0() { return cUAEqualExpressionLeftAction_1_0_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }

		//{UAUnequalExpression.left=current} "!="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAUnequalExpression.left=current}
		public Action getUAUnequalExpressionLeftAction_1_0_1_0() { return cUAUnequalExpressionLeftAction_1_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }

		//right=UAInequalityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAInequalityExpression
		public RuleCall getRightUAInequalityExpressionParserRuleCall_1_1_0() { return cRightUAInequalityExpressionParserRuleCall_1_1_0; }
	}

	public class UAInequalityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAInequalityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUALessExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUALessEqualExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cUAGreaterEqualExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cUAGreaterExpressionLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAMinMaxExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAInequalityExpression returns UAExpression:
		//	UAMinMaxExpression (({UALessExpression.left=current} "<" | {UALessEqualExpression.left=current} "<=" |
		//	{UAGreaterEqualExpression.left=current} ">=" | {UAGreaterExpression.left=current} ">") right=UAMinMaxExpression)*;
		public ParserRule getRule() { return rule; }

		//UAMinMaxExpression (({UALessExpression.left=current} "<" | {UALessEqualExpression.left=current} "<=" |
		//{UAGreaterEqualExpression.left=current} ">=" | {UAGreaterExpression.left=current} ">") right=UAMinMaxExpression)*
		public Group getGroup() { return cGroup; }

		//UAMinMaxExpression
		public RuleCall getUAMinMaxExpressionParserRuleCall_0() { return cUAMinMaxExpressionParserRuleCall_0; }

		//(({UALessExpression.left=current} "<" | {UALessEqualExpression.left=current} "<=" |
		//{UAGreaterEqualExpression.left=current} ">=" | {UAGreaterExpression.left=current} ">") right=UAMinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UALessExpression.left=current} "<" | {UALessEqualExpression.left=current} "<=" |
		//{UAGreaterEqualExpression.left=current} ">=" | {UAGreaterExpression.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UALessExpression.left=current} "<"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UALessExpression.left=current}
		public Action getUALessExpressionLeftAction_1_0_0_0() { return cUALessExpressionLeftAction_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1() { return cLessThanSignKeyword_1_0_0_1; }

		//{UALessEqualExpression.left=current} "<="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UALessEqualExpression.left=current}
		public Action getUALessEqualExpressionLeftAction_1_0_1_0() { return cUALessEqualExpressionLeftAction_1_0_1_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1_1() { return cLessThanSignEqualsSignKeyword_1_0_1_1; }

		//{UAGreaterEqualExpression.left=current} ">="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{UAGreaterEqualExpression.left=current}
		public Action getUAGreaterEqualExpressionLeftAction_1_0_2_0() { return cUAGreaterEqualExpressionLeftAction_1_0_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_2_1; }

		//{UAGreaterExpression.left=current} ">"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{UAGreaterExpression.left=current}
		public Action getUAGreaterExpressionLeftAction_1_0_3_0() { return cUAGreaterExpressionLeftAction_1_0_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_3_1() { return cGreaterThanSignKeyword_1_0_3_1; }

		//right=UAMinMaxExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAMinMaxExpression
		public RuleCall getRightUAMinMaxExpressionParserRuleCall_1_1_0() { return cRightUAMinMaxExpressionParserRuleCall_1_1_0; }
	}

	public class UAMinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAMinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUABitLeftBRightExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAMinExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAMaxExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignQuestionMarkKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUABitLeftBRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAMinMaxExpression returns UAExpression:
		//	UABitLeftBRightExpression (({UAMinExpression.left=current} "<?" | {UAMaxExpression.left=current} ">?")
		//	right=UABitLeftBRightExpression)*;
		public ParserRule getRule() { return rule; }

		//UABitLeftBRightExpression (({UAMinExpression.left=current} "<?" | {UAMaxExpression.left=current} ">?")
		//right=UABitLeftBRightExpression)*
		public Group getGroup() { return cGroup; }

		//UABitLeftBRightExpression
		public RuleCall getUABitLeftBRightExpressionParserRuleCall_0() { return cUABitLeftBRightExpressionParserRuleCall_0; }

		//(({UAMinExpression.left=current} "<?" | {UAMaxExpression.left=current} ">?") right=UABitLeftBRightExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAMinExpression.left=current} "<?" | {UAMaxExpression.left=current} ">?"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAMinExpression.left=current} "<?"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAMinExpression.left=current}
		public Action getUAMinExpressionLeftAction_1_0_0_0() { return cUAMinExpressionLeftAction_1_0_0_0; }

		//"<?"
		public Keyword getLessThanSignQuestionMarkKeyword_1_0_0_1() { return cLessThanSignQuestionMarkKeyword_1_0_0_1; }

		//{UAMaxExpression.left=current} ">?"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAMaxExpression.left=current}
		public Action getUAMaxExpressionLeftAction_1_0_1_0() { return cUAMaxExpressionLeftAction_1_0_1_0; }

		//">?"
		public Keyword getGreaterThanSignQuestionMarkKeyword_1_0_1_1() { return cGreaterThanSignQuestionMarkKeyword_1_0_1_1; }

		//right=UABitLeftBRightExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UABitLeftBRightExpression
		public RuleCall getRightUABitLeftBRightExpressionParserRuleCall_1_1_0() { return cRightUABitLeftBRightExpressionParserRuleCall_1_1_0; }
	}

	public class UABitLeftBRightExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABitLeftBRightExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUABitLeftExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUABitRightExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UABitLeftBRightExpression returns UAExpression:
		//	UAAdditiveExpression (({UABitLeftExpression.left=current} "<<" | {UABitRightExpression.left=current} ">>")
		//	right=UAAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//UAAdditiveExpression (({UABitLeftExpression.left=current} "<<" | {UABitRightExpression.left=current} ">>")
		//right=UAAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//UAAdditiveExpression
		public RuleCall getUAAdditiveExpressionParserRuleCall_0() { return cUAAdditiveExpressionParserRuleCall_0; }

		//(({UABitLeftExpression.left=current} "<<" | {UABitRightExpression.left=current} ">>") right=UAAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UABitLeftExpression.left=current} "<<" | {UABitRightExpression.left=current} ">>"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UABitLeftExpression.left=current} "<<"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UABitLeftExpression.left=current}
		public Action getUABitLeftExpressionLeftAction_1_0_0_0() { return cUABitLeftExpressionLeftAction_1_0_0_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_0_0_1() { return cLessThanSignLessThanSignKeyword_1_0_0_1; }

		//{UABitRightExpression.left=current} ">>"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UABitRightExpression.left=current}
		public Action getUABitRightExpressionLeftAction_1_0_1_0() { return cUABitRightExpressionLeftAction_1_0_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0_1_1() { return cGreaterThanSignGreaterThanSignKeyword_1_0_1_1; }

		//right=UAAdditiveExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAAdditiveExpression
		public RuleCall getRightUAAdditiveExpressionParserRuleCall_1_1_0() { return cRightUAAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class UAAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAAddExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUASubtractExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAAdditiveExpression returns UAExpression:
		//	UAMultiplicativeExpression (({UAAddExpression.left=current} "+" | {UASubtractExpression.left=current} "-")
		//	right=UAMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//UAMultiplicativeExpression (({UAAddExpression.left=current} "+" | {UASubtractExpression.left=current} "-")
		//right=UAMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//UAMultiplicativeExpression
		public RuleCall getUAMultiplicativeExpressionParserRuleCall_0() { return cUAMultiplicativeExpressionParserRuleCall_0; }

		//(({UAAddExpression.left=current} "+" | {UASubtractExpression.left=current} "-") right=UAMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAAddExpression.left=current} "+" | {UASubtractExpression.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAAddExpression.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAAddExpression.left=current}
		public Action getUAAddExpressionLeftAction_1_0_0_0() { return cUAAddExpressionLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{UASubtractExpression.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UASubtractExpression.left=current}
		public Action getUASubtractExpressionLeftAction_1_0_1_0() { return cUASubtractExpressionLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=UAMultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAMultiplicativeExpression
		public RuleCall getRightUAMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightUAMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class UAMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAPrefixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAMultiplyExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUADivideExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cUAModuloExpressionLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUAPrefixExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// left
		//UAMultiplicativeExpression returns UAExpression:
		//	UAPrefixExpression (({UAMultiplyExpression.left=current} "*" | {UADivideExpression.left=current} "/" |
		//	{UAModuloExpression.left=current} "%") right=UAPrefixExpression)*;
		public ParserRule getRule() { return rule; }

		//UAPrefixExpression (({UAMultiplyExpression.left=current} "*" | {UADivideExpression.left=current} "/" |
		//{UAModuloExpression.left=current} "%") right=UAPrefixExpression)*
		public Group getGroup() { return cGroup; }

		//UAPrefixExpression
		public RuleCall getUAPrefixExpressionParserRuleCall_0() { return cUAPrefixExpressionParserRuleCall_0; }

		//(({UAMultiplyExpression.left=current} "*" | {UADivideExpression.left=current} "/" | {UAModuloExpression.left=current}
		//"%") right=UAPrefixExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAMultiplyExpression.left=current} "*" | {UADivideExpression.left=current} "/" | {UAModuloExpression.left=current} "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAMultiplyExpression.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAMultiplyExpression.left=current}
		public Action getUAMultiplyExpressionLeftAction_1_0_0_0() { return cUAMultiplyExpressionLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{UADivideExpression.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UADivideExpression.left=current}
		public Action getUADivideExpressionLeftAction_1_0_1_0() { return cUADivideExpressionLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//{UAModuloExpression.left=current} "%"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{UAModuloExpression.left=current}
		public Action getUAModuloExpressionLeftAction_1_0_2_0() { return cUAModuloExpressionLeftAction_1_0_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2_1() { return cPercentSignKeyword_1_0_2_1; }

		//right=UAPrefixExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UAPrefixExpression
		public RuleCall getRightUAPrefixExpressionParserRuleCall_1_1_0() { return cRightUAPrefixExpressionParserRuleCall_1_1_0; }
	}

	public class UAPrefixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAPrefixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUAPreIncrementExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAPreDecrementExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionUAPrefixExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//// unary right
		//UAPrefixExpression returns UAExpression:
		//	UAUnaryExpression | ({UAPreIncrementExpression} "++" | {UAPreDecrementExpression} "--") expression=UAPrefixExpression;
		public ParserRule getRule() { return rule; }

		//UAUnaryExpression | ({UAPreIncrementExpression} "++" | {UAPreDecrementExpression} "--") expression=UAPrefixExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAUnaryExpression
		public RuleCall getUAUnaryExpressionParserRuleCall_0() { return cUAUnaryExpressionParserRuleCall_0; }

		//({UAPreIncrementExpression} "++" | {UAPreDecrementExpression} "--") expression=UAPrefixExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UAPreIncrementExpression} "++" | {UAPreDecrementExpression} "--"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UAPreIncrementExpression} "++"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UAPreIncrementExpression}
		public Action getUAPreIncrementExpressionAction_1_0_0_0() { return cUAPreIncrementExpressionAction_1_0_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_0_1() { return cPlusSignPlusSignKeyword_1_0_0_1; }

		//{UAPreDecrementExpression} "--"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAPreDecrementExpression}
		public Action getUAPreDecrementExpressionAction_1_0_1_0() { return cUAPreDecrementExpressionAction_1_0_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusHyphenMinusKeyword_1_0_1_1; }

		//expression=UAPrefixExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//UAPrefixExpression
		public RuleCall getExpressionUAPrefixExpressionParserRuleCall_1_1_0() { return cExpressionUAPrefixExpressionParserRuleCall_1_1_0; }
	}

	public class UAUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cUALogicNotExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cUAMinusExpressionAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionUAUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//// unary right
		//UAUnaryExpression returns UAExpression:
		//	UAPostfixExpression | ({UALogicNotExpression} "!" | {UAMinusExpression} "-") expression=UAUnaryExpression;
		public ParserRule getRule() { return rule; }

		//UAPostfixExpression | ({UALogicNotExpression} "!" | {UAMinusExpression} "-") expression=UAUnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAPostfixExpression
		public RuleCall getUAPostfixExpressionParserRuleCall_0() { return cUAPostfixExpressionParserRuleCall_0; }

		//({UALogicNotExpression} "!" | {UAMinusExpression} "-") expression=UAUnaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UALogicNotExpression} "!" | {UAMinusExpression} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{UALogicNotExpression} "!"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{UALogicNotExpression}
		public Action getUALogicNotExpressionAction_1_0_0_0() { return cUALogicNotExpressionAction_1_0_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0_0_1() { return cExclamationMarkKeyword_1_0_0_1; }

		//{UAMinusExpression} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{UAMinusExpression}
		public Action getUAMinusExpressionAction_1_0_1_0() { return cUAMinusExpressionAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//expression=UAUnaryExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//UAUnaryExpression
		public RuleCall getExpressionUAUnaryExpressionParserRuleCall_1_1_0() { return cExpressionUAUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UAPostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAPostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAStructExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cUAPostIncrementExpressionExpressionAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cUAPostDecrementExpressionExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// unary left
		//UAPostfixExpression returns UAExpression:
		//	UAStructExpression ({UAPostIncrementExpression.expression=current} "++" |
		//	{UAPostDecrementExpression.expression=current} "--")*;
		public ParserRule getRule() { return rule; }

		//UAStructExpression ({UAPostIncrementExpression.expression=current} "++" | {UAPostDecrementExpression.expression=current}
		//"--")*
		public Group getGroup() { return cGroup; }

		//UAStructExpression
		public RuleCall getUAStructExpressionParserRuleCall_0() { return cUAStructExpressionParserRuleCall_0; }

		//({UAPostIncrementExpression.expression=current} "++" | {UAPostDecrementExpression.expression=current} "--")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{UAPostIncrementExpression.expression=current} "++"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{UAPostIncrementExpression.expression=current}
		public Action getUAPostIncrementExpressionExpressionAction_1_0_0() { return cUAPostIncrementExpressionExpressionAction_1_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_1() { return cPlusSignPlusSignKeyword_1_0_1; }

		//{UAPostDecrementExpression.expression=current} "--"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{UAPostDecrementExpression.expression=current}
		public Action getUAPostDecrementExpressionExpressionAction_1_1_0() { return cUAPostDecrementExpressionExpressionAction_1_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }
	}

	public class UAStructExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAStructExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAArrayExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUAStructExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightIDTerminalRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// left
		//UAStructExpression returns UAExpression:
		//	UAArrayExpression ({UAStructExpression.left=current} "." right=ID)*;
		public ParserRule getRule() { return rule; }

		//UAArrayExpression ({UAStructExpression.left=current} "." right=ID)*
		public Group getGroup() { return cGroup; }

		//UAArrayExpression
		public RuleCall getUAArrayExpressionParserRuleCall_0() { return cUAArrayExpressionParserRuleCall_0; }

		//({UAStructExpression.left=current} "." right=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//{UAStructExpression.left=current}
		public Action getUAStructExpressionLeftAction_1_0() { return cUAStructExpressionLeftAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//right=ID
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ID
		public RuleCall getRightIDTerminalRuleCall_1_2_0() { return cRightIDTerminalRuleCall_1_2_0; }
	}

	public class UAArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUAPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUAArrayExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUAExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// left
		//UAArrayExpression returns UAExpression:
		//	UAPrimaryExpression ({UAArrayExpression.left=current} "[" right=UAExpression "]")*;
		public ParserRule getRule() { return rule; }

		//UAPrimaryExpression ({UAArrayExpression.left=current} "[" right=UAExpression "]")*
		public Group getGroup() { return cGroup; }

		//UAPrimaryExpression
		public RuleCall getUAPrimaryExpressionParserRuleCall_0() { return cUAPrimaryExpressionParserRuleCall_0; }

		//({UAArrayExpression.left=current} "[" right=UAExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//{UAArrayExpression.left=current}
		public Action getUAArrayExpressionLeftAction_1_0() { return cUAArrayExpressionLeftAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//right=UAExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UAExpression
		public RuleCall getRightUAExpressionParserRuleCall_1_2_0() { return cRightUAExpressionParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class UAPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUAReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUANumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUABooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUAParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UAPrimaryExpression returns UAExpression:
		//	UAReference | UANumberLiteral | UABooleanLiteral | UAParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//UAReference | UANumberLiteral | UABooleanLiteral | UAParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UAReference
		public RuleCall getUAReferenceParserRuleCall_0() { return cUAReferenceParserRuleCall_0; }

		//UANumberLiteral
		public RuleCall getUANumberLiteralParserRuleCall_1() { return cUANumberLiteralParserRuleCall_1; }

		//UABooleanLiteral
		public RuleCall getUABooleanLiteralParserRuleCall_2() { return cUABooleanLiteralParserRuleCall_2; }

		//UAParenthesizedExpression
		public RuleCall getUAParenthesizedExpressionParserRuleCall_3() { return cUAParenthesizedExpressionParserRuleCall_3; }
	}

	public class UAReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// NOTE: member access handled by ID terminal
		//UAReference returns UAExpression:
		//	{UAReference} name=ID;
		public ParserRule getRule() { return rule; }

		//{UAReference} name=ID
		public Group getGroup() { return cGroup; }

		//{UAReference}
		public Action getUAReferenceAction_0() { return cUAReferenceAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class UABooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UABooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUABooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UABooleanLiteral returns UAExpression:
		//	{UABooleanLiteral} value=BOOL;
		public ParserRule getRule() { return rule; }

		//{UABooleanLiteral} value=BOOL
		public Group getGroup() { return cGroup; }

		//{UABooleanLiteral}
		public Action getUABooleanLiteralAction_0() { return cUABooleanLiteralAction_0; }

		//value=BOOL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_1_0() { return cValueBOOLParserRuleCall_1_0; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL returns ecore::EBooleanObject:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class UANumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UANumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUANumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UANumberLiteral returns UAExpression:
		//	{UANumberLiteral} value=INT;
		public ParserRule getRule() { return rule; }

		//{UANumberLiteral} value=INT
		public Group getGroup() { return cGroup; }

		//{UANumberLiteral}
		public Action getUANumberLiteralAction_0() { return cUANumberLiteralAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class UAParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cUAExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UAParenthesizedExpression returns UAExpression:
		//	"(" UAExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" UAExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//UAExpression
		public RuleCall getUAExpressionParserRuleCall_1() { return cUAExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class UASelectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASelectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectsUASelectParserRuleCall_0_0 = (RuleCall)cSelectsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectsUASelectParserRuleCall_1_1_0 = (RuleCall)cSelectsAssignment_1_1.eContents().get(0);
		
		////// Select, Update
		/// *
		// * UPPAAL grammar:
		// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Edges.shtml)
		// * / UASelectList:
		//	selects+=UASelect ("," selects+=UASelect)*;
		public ParserRule getRule() { return rule; }

		//selects+=UASelect ("," selects+=UASelect)*
		public Group getGroup() { return cGroup; }

		//selects+=UASelect
		public Assignment getSelectsAssignment_0() { return cSelectsAssignment_0; }

		//UASelect
		public RuleCall getSelectsUASelectParserRuleCall_0_0() { return cSelectsUASelectParserRuleCall_0_0; }

		//("," selects+=UASelect)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//selects+=UASelect
		public Assignment getSelectsAssignment_1_1() { return cSelectsAssignment_1_1; }

		//UASelect
		public RuleCall getSelectsUASelectParserRuleCall_1_1_0() { return cSelectsUASelectParserRuleCall_1_1_0; }
	}

	public class UASelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeUATypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//UASelect:
		//	name=ID ":" type=UAType;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=UAType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=UAType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//UAType
		public RuleCall getTypeUATypeParserRuleCall_2_0() { return cTypeUATypeParserRuleCall_2_0; }
	}

	public class UAUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UAUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUAUpdateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsUAExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsUAExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		
		//UAUpdate:
		//	{UAUpdate} (expressions+=UAExpression ("," expressions+=UAExpression)*)?;
		public ParserRule getRule() { return rule; }

		//{UAUpdate} (expressions+=UAExpression ("," expressions+=UAExpression)*)?
		public Group getGroup() { return cGroup; }

		//{UAUpdate}
		public Action getUAUpdateAction_0() { return cUAUpdateAction_0; }

		//(expressions+=UAExpression ("," expressions+=UAExpression)*)?
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=UAExpression
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//UAExpression
		public RuleCall getExpressionsUAExpressionParserRuleCall_1_0_0() { return cExpressionsUAExpressionParserRuleCall_1_0_0; }

		//("," expressions+=UAExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//expressions+=UAExpression
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//UAExpression
		public RuleCall getExpressionsUAExpressionParserRuleCall_1_1_1_0() { return cExpressionsUAExpressionParserRuleCall_1_1_1_0; }
	}

	public class UASynchronisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UASynchronisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionUAExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeUASynchronisationTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//UASynchronisation:
		//	expression=UAExpression type=UASynchronisationType;
		public ParserRule getRule() { return rule; }

		//expression=UAExpression type=UASynchronisationType
		public Group getGroup() { return cGroup; }

		//expression=UAExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//UAExpression
		public RuleCall getExpressionUAExpressionParserRuleCall_0_0() { return cExpressionUAExpressionParserRuleCall_0_0; }

		//type=UASynchronisationType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//UASynchronisationType
		public RuleCall getTypeUASynchronisationTypeEnumRuleCall_1_0() { return cTypeUASynchronisationTypeEnumRuleCall_1_0; }
	}
	
	
	public class UASynchronisationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UASynchronisationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEMISSIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEMISSIONExclamationMarkKeyword_0_0 = (Keyword)cEMISSIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRECEPTIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRECEPTIONQuestionMarkKeyword_1_0 = (Keyword)cRECEPTIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UASynchronisationType:
		//	EMISSION="!" | RECEPTION="?";
		public EnumRule getRule() { return rule; }

		//EMISSION="!" | RECEPTION="?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EMISSION="!"
		public EnumLiteralDeclaration getEMISSIONEnumLiteralDeclaration_0() { return cEMISSIONEnumLiteralDeclaration_0; }

		//"!"
		public Keyword getEMISSIONExclamationMarkKeyword_0_0() { return cEMISSIONExclamationMarkKeyword_0_0; }

		//RECEPTION="?"
		public EnumLiteralDeclaration getRECEPTIONEnumLiteralDeclaration_1() { return cRECEPTIONEnumLiteralDeclaration_1; }

		//"?"
		public Keyword getRECEPTIONQuestionMarkKeyword_1_0() { return cRECEPTIONQuestionMarkKeyword_1_0; }
	}
	
	private TopElements pTop;
	private UASystemDefinitionElements pUASystemDefinition;
	private UADefinitionElements pUADefinition;
	private UAInstantiationElements pUAInstantiation;
	private UASystemElements pUASystem;
	private UASystemIDElements pUASystemID;
	private UAArrayDeclarationElements pUAArrayDeclaration;
	private UADeclarationsElements pUADeclarations;
	private UADeclarationElements pUADeclaration;
	private UATypeElements pUAType;
	private UATypeModifiersElements pUATypeModifiers;
	private UAVariableDeclarationElements pUAVariableDeclaration;
	private UAVariableIDElements pUAVariableID;
	private UAInitialiserElements pUAInitialiser;
	private UASingleInitialiserElements pUASingleInitialiser;
	private UAMultiInitialiserElements pUAMultiInitialiser;
	private UATypeDeclarationElements pUATypeDeclaration;
	private UATypeIDElements pUATypeID;
	private UATypeIdentifierElements pUATypeIdentifier;
	private UAIntegerTypeElements pUAIntegerType;
	private UAClockTypeElements pUAClockType;
	private UAChannelTypeElements pUAChannelType;
	private UABooleanTypeElements pUABooleanType;
	private UAScalarTypeElements pUAScalarType;
	private UAStructTypeElements pUAStructType;
	private UAFieldDeclarationElements pUAFieldDeclaration;
	private UAFieldIDElements pUAFieldID;
	private UAParametersElements pUAParameters;
	private UAParameterElements pUAParameter;
	private UAExpressionElements pUAExpression;
	private UAImplyLogicOrExpressionElements pUAImplyLogicOrExpression;
	private UALogicAndExpression1Elements pUALogicAndExpression1;
	private UALogicNotExpression1Elements pUALogicNotExpression1;
	private UAAssignmentExpressionElements pUAAssignmentExpression;
	private UAConditionalExpressionElements pUAConditionalExpression;
	private UALogicOrExpression2Elements pUALogicOrExpression2;
	private UALogicAndExpression2Elements pUALogicAndExpression2;
	private UABitOrExpressionElements pUABitOrExpression;
	private UABitXORExpressionElements pUABitXORExpression;
	private UABitAndExpressionElements pUABitAndExpression;
	private UAEqualityExpressionElements pUAEqualityExpression;
	private UAInequalityExpressionElements pUAInequalityExpression;
	private UAMinMaxExpressionElements pUAMinMaxExpression;
	private UABitLeftBRightExpressionElements pUABitLeftBRightExpression;
	private UAAdditiveExpressionElements pUAAdditiveExpression;
	private UAMultiplicativeExpressionElements pUAMultiplicativeExpression;
	private UAPrefixExpressionElements pUAPrefixExpression;
	private UAUnaryExpressionElements pUAUnaryExpression;
	private UAPostfixExpressionElements pUAPostfixExpression;
	private UAStructExpressionElements pUAStructExpression;
	private UAArrayExpressionElements pUAArrayExpression;
	private UAPrimaryExpressionElements pUAPrimaryExpression;
	private UAReferenceElements pUAReference;
	private UABooleanLiteralElements pUABooleanLiteral;
	private BOOLElements pBOOL;
	private UANumberLiteralElements pUANumberLiteral;
	private UAParenthesizedExpressionElements pUAParenthesizedExpression;
	private UASelectListElements pUASelectList;
	private UASelectElements pUASelect;
	private UAUpdateElements pUAUpdate;
	private UASynchronisationElements pUASynchronisation;
	private UASynchronisationTypeElements unknownRuleUASynchronisationType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DescriptionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uppaal.xml.description.Description".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * NOTE:
	// * Rules/Names are prefixed with UA (UppAal) for convenience
	// * reasons to differentiate them from equal names in the ECDAR DSL.
	// * Otherwise, it's necessary to use fully qualified identifiers
	// * in code using both models, as neither Java nor Xtend support
	// * type/import aliasing yet. For Xtend, see:
	// * http://bugs.eclipse.org/bugs/show_bug.cgi?id=382915
	// * / / * NOTE:
	// * Top rule can be ignored, only exists to mention all
	// * rules, so they aren't ignored by the Xtext generator.
	// * Rules are actually used independently.
	// * / Top:
	//	"SYSTEM" UASystemDefinition | "DECLARATIONS" UADeclarations | "PARAMS" UAParameters | "EXPRESSION" UAExpression |
	//	"SELECT" UASelectList | "UPDATE" UAUpdate | "SYNC" UASynchronisation;
	public TopElements getTopAccess() {
		return (pTop != null) ? pTop : (pTop = new TopElements());
	}
	
	public ParserRule getTopRule() {
		return getTopAccess().getRule();
	}

	//UASystemDefinition:
	//	{UASystemDefinition} (definitions+=UADefinition ";"?)* (system=UASystem ";"?)?;
	public UASystemDefinitionElements getUASystemDefinitionAccess() {
		return (pUASystemDefinition != null) ? pUASystemDefinition : (pUASystemDefinition = new UASystemDefinitionElements());
	}
	
	public ParserRule getUASystemDefinitionRule() {
		return getUASystemDefinitionAccess().getRule();
	}

	//UADefinition:
	//	UADeclaration | UAInstantiation;
	public UADefinitionElements getUADefinitionAccess() {
		return (pUADefinition != null) ? pUADefinition : (pUADefinition = new UADefinitionElements());
	}
	
	public ParserRule getUADefinitionRule() {
		return getUADefinitionAccess().getRule();
	}

	//UAInstantiation:
	//	name=ID ("(" parameters=UAParameters ")")? (":=" | "=") target=ID "(" arguments+=UAExpression (","
	//	arguments+=UAExpression)* ")";
	public UAInstantiationElements getUAInstantiationAccess() {
		return (pUAInstantiation != null) ? pUAInstantiation : (pUAInstantiation = new UAInstantiationElements());
	}
	
	public ParserRule getUAInstantiationRule() {
		return getUAInstantiationAccess().getRule();
	}

	//UASystem:
	//	"system" systems+=UASystemID (("," | "<") systems+=UASystemID)*;
	public UASystemElements getUASystemAccess() {
		return (pUASystem != null) ? pUASystem : (pUASystem = new UASystemElements());
	}
	
	public ParserRule getUASystemRule() {
		return getUASystemAccess().getRule();
	}

	//UASystemID:
	//	name=ID;
	public UASystemIDElements getUASystemIDAccess() {
		return (pUASystemID != null) ? pUASystemID : (pUASystemID = new UASystemIDElements());
	}
	
	public ParserRule getUASystemIDRule() {
		return getUASystemIDAccess().getRule();
	}

	////// Declarations
	/// * NOTE:
	// * Definition of higher-level grammar would require
	// * duplicate definition. For example, variable
	// * declarations support multiple names, comma-separated,
	// * but individual parameters are also comma separated.
	// *
	// * Uses only names, as cross-references don't work,
	// * because the parser is used directly instead of
	// * using the EMF API. This is required as several
	// * declaration blocks may exist throughout the file.
	// *
	// * Use of semicolon is more permissive
	// * / / *
	// * UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Declarations.shtml)
	// * / UAArrayDeclaration:
	//	"[" size=UAExpression "]";
	public UAArrayDeclarationElements getUAArrayDeclarationAccess() {
		return (pUAArrayDeclaration != null) ? pUAArrayDeclaration : (pUAArrayDeclaration = new UAArrayDeclarationElements());
	}
	
	public ParserRule getUAArrayDeclarationRule() {
		return getUAArrayDeclarationAccess().getRule();
	}

	//UADeclarations:
	//	declarations+=UADeclaration (";" declarations+=UADeclaration)* ";"?;
	public UADeclarationsElements getUADeclarationsAccess() {
		return (pUADeclarations != null) ? pUADeclarations : (pUADeclarations = new UADeclarationsElements());
	}
	
	public ParserRule getUADeclarationsRule() {
		return getUADeclarationsAccess().getRule();
	}

	//// TODO: | UAFunction
	//// TODO: | UAChannelPritority
	//UADeclaration:
	//	UAVariableDeclaration | UATypeDeclaration;
	public UADeclarationElements getUADeclarationAccess() {
		return (pUADeclaration != null) ? pUADeclaration : (pUADeclaration = new UADeclarationElements());
	}
	
	public ParserRule getUADeclarationRule() {
		return getUADeclarationAccess().getRule();
	}

	//UAType:
	//	modifiers=UATypeModifiers identifier=UATypeIdentifier;
	public UATypeElements getUATypeAccess() {
		return (pUAType != null) ? pUAType : (pUAType = new UATypeElements());
	}
	
	public ParserRule getUATypeRule() {
		return getUATypeAccess().getRule();
	}

	//UATypeModifiers:
	//	{UATypeModifiers} (urgent?="urgent"? & broadcast?="broadcast"? & meta?="meta"? & const?="const"?);
	public UATypeModifiersElements getUATypeModifiersAccess() {
		return (pUATypeModifiers != null) ? pUATypeModifiers : (pUATypeModifiers = new UATypeModifiersElements());
	}
	
	public ParserRule getUATypeModifiersRule() {
		return getUATypeModifiersAccess().getRule();
	}

	//UAVariableDeclaration:
	//	type=UAType variables+=UAVariableID ("," variables+=UAVariableID)*;
	public UAVariableDeclarationElements getUAVariableDeclarationAccess() {
		return (pUAVariableDeclaration != null) ? pUAVariableDeclaration : (pUAVariableDeclaration = new UAVariableDeclarationElements());
	}
	
	public ParserRule getUAVariableDeclarationRule() {
		return getUAVariableDeclarationAccess().getRule();
	}

	//UAVariableID:
	//	name=ID dimensions+=UAArrayDeclaration* ("=" initialiser=UAInitialiser)?;
	public UAVariableIDElements getUAVariableIDAccess() {
		return (pUAVariableID != null) ? pUAVariableID : (pUAVariableID = new UAVariableIDElements());
	}
	
	public ParserRule getUAVariableIDRule() {
		return getUAVariableIDAccess().getRule();
	}

	//UAInitialiser:
	//	UASingleInitialiser | UAMultiInitialiser;
	public UAInitialiserElements getUAInitialiserAccess() {
		return (pUAInitialiser != null) ? pUAInitialiser : (pUAInitialiser = new UAInitialiserElements());
	}
	
	public ParserRule getUAInitialiserRule() {
		return getUAInitialiserAccess().getRule();
	}

	//UASingleInitialiser:
	//	expression=UAExpression;
	public UASingleInitialiserElements getUASingleInitialiserAccess() {
		return (pUASingleInitialiser != null) ? pUASingleInitialiser : (pUASingleInitialiser = new UASingleInitialiserElements());
	}
	
	public ParserRule getUASingleInitialiserRule() {
		return getUASingleInitialiserAccess().getRule();
	}

	//UAMultiInitialiser:
	//	"{" initialisers+=UAInitialiser ("," initialisers+=UAInitialiser)* "}";
	public UAMultiInitialiserElements getUAMultiInitialiserAccess() {
		return (pUAMultiInitialiser != null) ? pUAMultiInitialiser : (pUAMultiInitialiser = new UAMultiInitialiserElements());
	}
	
	public ParserRule getUAMultiInitialiserRule() {
		return getUAMultiInitialiserAccess().getRule();
	}

	//UATypeDeclaration:
	//	"typedef" baseType=UAType types+=UATypeID ("," types+=UATypeID)*;
	public UATypeDeclarationElements getUATypeDeclarationAccess() {
		return (pUATypeDeclaration != null) ? pUATypeDeclaration : (pUATypeDeclaration = new UATypeDeclarationElements());
	}
	
	public ParserRule getUATypeDeclarationRule() {
		return getUATypeDeclarationAccess().getRule();
	}

	//UATypeID:
	//	name=ID dimensions+=UAArrayDeclaration*;
	public UATypeIDElements getUATypeIDAccess() {
		return (pUATypeID != null) ? pUATypeID : (pUATypeID = new UATypeIDElements());
	}
	
	public ParserRule getUATypeIDRule() {
		return getUATypeIDAccess().getRule();
	}

	//UATypeIdentifier:
	//	UAIntegerType | UAClockType | UAChannelType | UABooleanType | UAScalarType | UAStructType | {UAUserType} name=ID;
	public UATypeIdentifierElements getUATypeIdentifierAccess() {
		return (pUATypeIdentifier != null) ? pUATypeIdentifier : (pUATypeIdentifier = new UATypeIdentifierElements());
	}
	
	public ParserRule getUATypeIdentifierRule() {
		return getUATypeIdentifierAccess().getRule();
	}

	//UAIntegerType:
	//	{UAIntegerType} "int" ("[" min=UAExpression "," max=UAExpression "]")?;
	public UAIntegerTypeElements getUAIntegerTypeAccess() {
		return (pUAIntegerType != null) ? pUAIntegerType : (pUAIntegerType = new UAIntegerTypeElements());
	}
	
	public ParserRule getUAIntegerTypeRule() {
		return getUAIntegerTypeAccess().getRule();
	}

	//UAClockType:
	//	{UAClockType} "clock";
	public UAClockTypeElements getUAClockTypeAccess() {
		return (pUAClockType != null) ? pUAClockType : (pUAClockType = new UAClockTypeElements());
	}
	
	public ParserRule getUAClockTypeRule() {
		return getUAClockTypeAccess().getRule();
	}

	//UAChannelType:
	//	{UAChannelType} "chan";
	public UAChannelTypeElements getUAChannelTypeAccess() {
		return (pUAChannelType != null) ? pUAChannelType : (pUAChannelType = new UAChannelTypeElements());
	}
	
	public ParserRule getUAChannelTypeRule() {
		return getUAChannelTypeAccess().getRule();
	}

	//UABooleanType:
	//	{UABooleanType} "bool";
	public UABooleanTypeElements getUABooleanTypeAccess() {
		return (pUABooleanType != null) ? pUABooleanType : (pUABooleanType = new UABooleanTypeElements());
	}
	
	public ParserRule getUABooleanTypeRule() {
		return getUABooleanTypeAccess().getRule();
	}

	//UAScalarType:
	//	{UAScalarType} "scalar" "[" size=UAExpression "]";
	public UAScalarTypeElements getUAScalarTypeAccess() {
		return (pUAScalarType != null) ? pUAScalarType : (pUAScalarType = new UAScalarTypeElements());
	}
	
	public ParserRule getUAScalarTypeRule() {
		return getUAScalarTypeAccess().getRule();
	}

	//UAStructType:
	//	{UAStructType} "struct" "{" declarations+=UAFieldDeclaration (";" declarations+=UAFieldDeclaration)* ";"? "}";
	public UAStructTypeElements getUAStructTypeAccess() {
		return (pUAStructType != null) ? pUAStructType : (pUAStructType = new UAStructTypeElements());
	}
	
	public ParserRule getUAStructTypeRule() {
		return getUAStructTypeAccess().getRule();
	}

	//UAFieldDeclaration:
	//	type=UAType fields+=UAFieldID ("," fields+=UAFieldID)*;
	public UAFieldDeclarationElements getUAFieldDeclarationAccess() {
		return (pUAFieldDeclaration != null) ? pUAFieldDeclaration : (pUAFieldDeclaration = new UAFieldDeclarationElements());
	}
	
	public ParserRule getUAFieldDeclarationRule() {
		return getUAFieldDeclarationAccess().getRule();
	}

	//UAFieldID:
	//	name=ID dimensions+=UAArrayDeclaration*;
	public UAFieldIDElements getUAFieldIDAccess() {
		return (pUAFieldID != null) ? pUAFieldID : (pUAFieldID = new UAFieldIDElements());
	}
	
	public ParserRule getUAFieldIDRule() {
		return getUAFieldIDAccess().getRule();
	}

	////// Parameters
	/// *
	// * UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Parameters.shtml)
	// * / UAParameters:
	//	parameters+=UAParameter ("," parameters+=UAParameter)*;
	public UAParametersElements getUAParametersAccess() {
		return (pUAParameters != null) ? pUAParameters : (pUAParameters = new UAParametersElements());
	}
	
	public ParserRule getUAParametersRule() {
		return getUAParametersAccess().getRule();
	}

	//UAParameter:
	//	type=UAType byReference?="&"? name=ID dimensions+=UAArrayDeclaration*;
	public UAParameterElements getUAParameterAccess() {
		return (pUAParameter != null) ? pUAParameter : (pUAParameter = new UAParameterElements());
	}
	
	public ParserRule getUAParameterRule() {
		return getUAParameterAccess().getRule();
	}

	////// Expression
	/// *
	// * UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Expressions.shtml)
	// * / // unary right
	//UAExpression:
	//	UAImplyLogicOrExpression | ({UAForallExpression} "forall" | {UAExistsExpression} "exists") "(" name=ID ":" type=UAType
	//	")" expression=UAExpression;
	public UAExpressionElements getUAExpressionAccess() {
		return (pUAExpression != null) ? pUAExpression : (pUAExpression = new UAExpressionElements());
	}
	
	public ParserRule getUAExpressionRule() {
		return getUAExpressionAccess().getRule();
	}

	//// left
	//UAImplyLogicOrExpression returns UAExpression:
	//	UALogicAndExpression1 (({UAImplyExpression.left=current} "imply" | {UALogicOrExpression.left=current} "or")
	//	right=UALogicAndExpression1)*;
	public UAImplyLogicOrExpressionElements getUAImplyLogicOrExpressionAccess() {
		return (pUAImplyLogicOrExpression != null) ? pUAImplyLogicOrExpression : (pUAImplyLogicOrExpression = new UAImplyLogicOrExpressionElements());
	}
	
	public ParserRule getUAImplyLogicOrExpressionRule() {
		return getUAImplyLogicOrExpressionAccess().getRule();
	}

	//// left
	//UALogicAndExpression1 returns UAExpression:
	//	UALogicNotExpression1 (({UALogicAndExpression.left=current} "and") right=UALogicNotExpression1)*;
	public UALogicAndExpression1Elements getUALogicAndExpression1Access() {
		return (pUALogicAndExpression1 != null) ? pUALogicAndExpression1 : (pUALogicAndExpression1 = new UALogicAndExpression1Elements());
	}
	
	public ParserRule getUALogicAndExpression1Rule() {
		return getUALogicAndExpression1Access().getRule();
	}

	//// unary right
	//// TODO: causes duplicate method definition by Xtext
	////	| ({UALogicNotExpression} 'not'
	////		expression=UALogicNotExpression1)
	//UALogicNotExpression1 returns UAExpression:
	//	UAAssignmentExpression;
	public UALogicNotExpression1Elements getUALogicNotExpression1Access() {
		return (pUALogicNotExpression1 != null) ? pUALogicNotExpression1 : (pUALogicNotExpression1 = new UALogicNotExpression1Elements());
	}
	
	public ParserRule getUALogicNotExpression1Rule() {
		return getUALogicNotExpression1Access().getRule();
	}

	//// right
	//UAAssignmentExpression returns UAExpression:
	//	UAConditionalExpression (({UAAssignmentExpression.left=current} "=" | {UAAssignmentExpression.left=current} ":=" |
	//	{UAAdditionAssignmentExpression.left=current} "+=" | {UASubtractionAssignmentExpression.left=current} "-=" |
	//	{UAMultiplicationAssignmentExpression.left=current} "*=" | {UADivisionAssignmentExpression.left=current} "/=" |
	//	{UAModuloAssignmentExpression.left=current} "%=" | {UABitOrAssignmentExpression.left=current} "|=" |
	//	{UABitAndAssignmentExpression.left=current} "&=" | {UABitXORAssignmentExpression.left=current} "^=" |
	//	{UABitLeftAssignmentExpression.left=current} "<<=" | {UABitRightAssignmentExpression.left=current} ">>=")
	//	right=UAAssignmentExpression)?;
	public UAAssignmentExpressionElements getUAAssignmentExpressionAccess() {
		return (pUAAssignmentExpression != null) ? pUAAssignmentExpression : (pUAAssignmentExpression = new UAAssignmentExpressionElements());
	}
	
	public ParserRule getUAAssignmentExpressionRule() {
		return getUAAssignmentExpressionAccess().getRule();
	}

	//// right
	//UAConditionalExpression returns UAExpression:
	//	UALogicOrExpression2 ({UAConditionalExpression.condition=current} "?" then=UALogicOrExpression2 ":"
	//	else=UAConditionalExpression)?;
	public UAConditionalExpressionElements getUAConditionalExpressionAccess() {
		return (pUAConditionalExpression != null) ? pUAConditionalExpression : (pUAConditionalExpression = new UAConditionalExpressionElements());
	}
	
	public ParserRule getUAConditionalExpressionRule() {
		return getUAConditionalExpressionAccess().getRule();
	}

	//// left
	//UALogicOrExpression2 returns UAExpression:
	//	UALogicAndExpression2 (({UALogicOrExpression.left=current} "||") right=UALogicAndExpression2)*;
	public UALogicOrExpression2Elements getUALogicOrExpression2Access() {
		return (pUALogicOrExpression2 != null) ? pUALogicOrExpression2 : (pUALogicOrExpression2 = new UALogicOrExpression2Elements());
	}
	
	public ParserRule getUALogicOrExpression2Rule() {
		return getUALogicOrExpression2Access().getRule();
	}

	//// left
	//UALogicAndExpression2 returns UAExpression:
	//	UABitOrExpression (({UALogicAndExpression.left=current} "&&") right=UABitOrExpression)*;
	public UALogicAndExpression2Elements getUALogicAndExpression2Access() {
		return (pUALogicAndExpression2 != null) ? pUALogicAndExpression2 : (pUALogicAndExpression2 = new UALogicAndExpression2Elements());
	}
	
	public ParserRule getUALogicAndExpression2Rule() {
		return getUALogicAndExpression2Access().getRule();
	}

	//// left
	//UABitOrExpression returns UAExpression:
	//	UABitXORExpression (({UABitOrExpression.left=current} "|") right=UABitXORExpression)*;
	public UABitOrExpressionElements getUABitOrExpressionAccess() {
		return (pUABitOrExpression != null) ? pUABitOrExpression : (pUABitOrExpression = new UABitOrExpressionElements());
	}
	
	public ParserRule getUABitOrExpressionRule() {
		return getUABitOrExpressionAccess().getRule();
	}

	//// left
	//UABitXORExpression returns UAExpression:
	//	UABitAndExpression (({UABitXORExpression.left=current} "^") right=UABitAndExpression)*;
	public UABitXORExpressionElements getUABitXORExpressionAccess() {
		return (pUABitXORExpression != null) ? pUABitXORExpression : (pUABitXORExpression = new UABitXORExpressionElements());
	}
	
	public ParserRule getUABitXORExpressionRule() {
		return getUABitXORExpressionAccess().getRule();
	}

	//// left
	//UABitAndExpression returns UAExpression:
	//	UAEqualityExpression (({UABitAndExpression.left=current} "&") right=UAEqualityExpression)*;
	public UABitAndExpressionElements getUABitAndExpressionAccess() {
		return (pUABitAndExpression != null) ? pUABitAndExpression : (pUABitAndExpression = new UABitAndExpressionElements());
	}
	
	public ParserRule getUABitAndExpressionRule() {
		return getUABitAndExpressionAccess().getRule();
	}

	//// left
	//UAEqualityExpression returns UAExpression:
	//	UAInequalityExpression (({UAEqualExpression.left=current} "==" | {UAUnequalExpression.left=current} "!=")
	//	right=UAInequalityExpression)*;
	public UAEqualityExpressionElements getUAEqualityExpressionAccess() {
		return (pUAEqualityExpression != null) ? pUAEqualityExpression : (pUAEqualityExpression = new UAEqualityExpressionElements());
	}
	
	public ParserRule getUAEqualityExpressionRule() {
		return getUAEqualityExpressionAccess().getRule();
	}

	//// left
	//UAInequalityExpression returns UAExpression:
	//	UAMinMaxExpression (({UALessExpression.left=current} "<" | {UALessEqualExpression.left=current} "<=" |
	//	{UAGreaterEqualExpression.left=current} ">=" | {UAGreaterExpression.left=current} ">") right=UAMinMaxExpression)*;
	public UAInequalityExpressionElements getUAInequalityExpressionAccess() {
		return (pUAInequalityExpression != null) ? pUAInequalityExpression : (pUAInequalityExpression = new UAInequalityExpressionElements());
	}
	
	public ParserRule getUAInequalityExpressionRule() {
		return getUAInequalityExpressionAccess().getRule();
	}

	//// left
	//UAMinMaxExpression returns UAExpression:
	//	UABitLeftBRightExpression (({UAMinExpression.left=current} "<?" | {UAMaxExpression.left=current} ">?")
	//	right=UABitLeftBRightExpression)*;
	public UAMinMaxExpressionElements getUAMinMaxExpressionAccess() {
		return (pUAMinMaxExpression != null) ? pUAMinMaxExpression : (pUAMinMaxExpression = new UAMinMaxExpressionElements());
	}
	
	public ParserRule getUAMinMaxExpressionRule() {
		return getUAMinMaxExpressionAccess().getRule();
	}

	//// left
	//UABitLeftBRightExpression returns UAExpression:
	//	UAAdditiveExpression (({UABitLeftExpression.left=current} "<<" | {UABitRightExpression.left=current} ">>")
	//	right=UAAdditiveExpression)*;
	public UABitLeftBRightExpressionElements getUABitLeftBRightExpressionAccess() {
		return (pUABitLeftBRightExpression != null) ? pUABitLeftBRightExpression : (pUABitLeftBRightExpression = new UABitLeftBRightExpressionElements());
	}
	
	public ParserRule getUABitLeftBRightExpressionRule() {
		return getUABitLeftBRightExpressionAccess().getRule();
	}

	//// left
	//UAAdditiveExpression returns UAExpression:
	//	UAMultiplicativeExpression (({UAAddExpression.left=current} "+" | {UASubtractExpression.left=current} "-")
	//	right=UAMultiplicativeExpression)*;
	public UAAdditiveExpressionElements getUAAdditiveExpressionAccess() {
		return (pUAAdditiveExpression != null) ? pUAAdditiveExpression : (pUAAdditiveExpression = new UAAdditiveExpressionElements());
	}
	
	public ParserRule getUAAdditiveExpressionRule() {
		return getUAAdditiveExpressionAccess().getRule();
	}

	//// left
	//UAMultiplicativeExpression returns UAExpression:
	//	UAPrefixExpression (({UAMultiplyExpression.left=current} "*" | {UADivideExpression.left=current} "/" |
	//	{UAModuloExpression.left=current} "%") right=UAPrefixExpression)*;
	public UAMultiplicativeExpressionElements getUAMultiplicativeExpressionAccess() {
		return (pUAMultiplicativeExpression != null) ? pUAMultiplicativeExpression : (pUAMultiplicativeExpression = new UAMultiplicativeExpressionElements());
	}
	
	public ParserRule getUAMultiplicativeExpressionRule() {
		return getUAMultiplicativeExpressionAccess().getRule();
	}

	//// unary right
	//UAPrefixExpression returns UAExpression:
	//	UAUnaryExpression | ({UAPreIncrementExpression} "++" | {UAPreDecrementExpression} "--") expression=UAPrefixExpression;
	public UAPrefixExpressionElements getUAPrefixExpressionAccess() {
		return (pUAPrefixExpression != null) ? pUAPrefixExpression : (pUAPrefixExpression = new UAPrefixExpressionElements());
	}
	
	public ParserRule getUAPrefixExpressionRule() {
		return getUAPrefixExpressionAccess().getRule();
	}

	//// unary right
	//UAUnaryExpression returns UAExpression:
	//	UAPostfixExpression | ({UALogicNotExpression} "!" | {UAMinusExpression} "-") expression=UAUnaryExpression;
	public UAUnaryExpressionElements getUAUnaryExpressionAccess() {
		return (pUAUnaryExpression != null) ? pUAUnaryExpression : (pUAUnaryExpression = new UAUnaryExpressionElements());
	}
	
	public ParserRule getUAUnaryExpressionRule() {
		return getUAUnaryExpressionAccess().getRule();
	}

	//// unary left
	//UAPostfixExpression returns UAExpression:
	//	UAStructExpression ({UAPostIncrementExpression.expression=current} "++" |
	//	{UAPostDecrementExpression.expression=current} "--")*;
	public UAPostfixExpressionElements getUAPostfixExpressionAccess() {
		return (pUAPostfixExpression != null) ? pUAPostfixExpression : (pUAPostfixExpression = new UAPostfixExpressionElements());
	}
	
	public ParserRule getUAPostfixExpressionRule() {
		return getUAPostfixExpressionAccess().getRule();
	}

	//// left
	//UAStructExpression returns UAExpression:
	//	UAArrayExpression ({UAStructExpression.left=current} "." right=ID)*;
	public UAStructExpressionElements getUAStructExpressionAccess() {
		return (pUAStructExpression != null) ? pUAStructExpression : (pUAStructExpression = new UAStructExpressionElements());
	}
	
	public ParserRule getUAStructExpressionRule() {
		return getUAStructExpressionAccess().getRule();
	}

	//// left
	//UAArrayExpression returns UAExpression:
	//	UAPrimaryExpression ({UAArrayExpression.left=current} "[" right=UAExpression "]")*;
	public UAArrayExpressionElements getUAArrayExpressionAccess() {
		return (pUAArrayExpression != null) ? pUAArrayExpression : (pUAArrayExpression = new UAArrayExpressionElements());
	}
	
	public ParserRule getUAArrayExpressionRule() {
		return getUAArrayExpressionAccess().getRule();
	}

	//UAPrimaryExpression returns UAExpression:
	//	UAReference | UANumberLiteral | UABooleanLiteral | UAParenthesizedExpression;
	public UAPrimaryExpressionElements getUAPrimaryExpressionAccess() {
		return (pUAPrimaryExpression != null) ? pUAPrimaryExpression : (pUAPrimaryExpression = new UAPrimaryExpressionElements());
	}
	
	public ParserRule getUAPrimaryExpressionRule() {
		return getUAPrimaryExpressionAccess().getRule();
	}

	//// NOTE: member access handled by ID terminal
	//UAReference returns UAExpression:
	//	{UAReference} name=ID;
	public UAReferenceElements getUAReferenceAccess() {
		return (pUAReference != null) ? pUAReference : (pUAReference = new UAReferenceElements());
	}
	
	public ParserRule getUAReferenceRule() {
		return getUAReferenceAccess().getRule();
	}

	//UABooleanLiteral returns UAExpression:
	//	{UABooleanLiteral} value=BOOL;
	public UABooleanLiteralElements getUABooleanLiteralAccess() {
		return (pUABooleanLiteral != null) ? pUABooleanLiteral : (pUABooleanLiteral = new UABooleanLiteralElements());
	}
	
	public ParserRule getUABooleanLiteralRule() {
		return getUABooleanLiteralAccess().getRule();
	}

	//BOOL returns ecore::EBooleanObject:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//UANumberLiteral returns UAExpression:
	//	{UANumberLiteral} value=INT;
	public UANumberLiteralElements getUANumberLiteralAccess() {
		return (pUANumberLiteral != null) ? pUANumberLiteral : (pUANumberLiteral = new UANumberLiteralElements());
	}
	
	public ParserRule getUANumberLiteralRule() {
		return getUANumberLiteralAccess().getRule();
	}

	//UAParenthesizedExpression returns UAExpression:
	//	"(" UAExpression ")";
	public UAParenthesizedExpressionElements getUAParenthesizedExpressionAccess() {
		return (pUAParenthesizedExpression != null) ? pUAParenthesizedExpression : (pUAParenthesizedExpression = new UAParenthesizedExpressionElements());
	}
	
	public ParserRule getUAParenthesizedExpressionRule() {
		return getUAParenthesizedExpressionAccess().getRule();
	}

	////// Select, Update
	/// *
	// * UPPAAL grammar:
	// * (See http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Edges.shtml)
	// * / UASelectList:
	//	selects+=UASelect ("," selects+=UASelect)*;
	public UASelectListElements getUASelectListAccess() {
		return (pUASelectList != null) ? pUASelectList : (pUASelectList = new UASelectListElements());
	}
	
	public ParserRule getUASelectListRule() {
		return getUASelectListAccess().getRule();
	}

	//UASelect:
	//	name=ID ":" type=UAType;
	public UASelectElements getUASelectAccess() {
		return (pUASelect != null) ? pUASelect : (pUASelect = new UASelectElements());
	}
	
	public ParserRule getUASelectRule() {
		return getUASelectAccess().getRule();
	}

	//UAUpdate:
	//	{UAUpdate} (expressions+=UAExpression ("," expressions+=UAExpression)*)?;
	public UAUpdateElements getUAUpdateAccess() {
		return (pUAUpdate != null) ? pUAUpdate : (pUAUpdate = new UAUpdateElements());
	}
	
	public ParserRule getUAUpdateRule() {
		return getUAUpdateAccess().getRule();
	}

	//UASynchronisation:
	//	expression=UAExpression type=UASynchronisationType;
	public UASynchronisationElements getUASynchronisationAccess() {
		return (pUASynchronisation != null) ? pUASynchronisation : (pUASynchronisation = new UASynchronisationElements());
	}
	
	public ParserRule getUASynchronisationRule() {
		return getUASynchronisationAccess().getRule();
	}

	//enum UASynchronisationType:
	//	EMISSION="!" | RECEPTION="?";
	public UASynchronisationTypeElements getUASynchronisationTypeAccess() {
		return (unknownRuleUASynchronisationType != null) ? unknownRuleUASynchronisationType : (unknownRuleUASynchronisationType = new UASynchronisationTypeElements());
	}
	
	public EnumRule getUASynchronisationTypeRule() {
		return getUASynchronisationTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
